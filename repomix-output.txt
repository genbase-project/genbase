This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
docs/
  app/
    (home)/
      layout.tsx
      page.tsx
    api/
      search/
        route.ts
    docs/
      [[...slug]]/
        page.tsx
      layout.tsx
    global.css
    layout.config.tsx
    layout.tsx
  content/
    docs/
      overview/
        architecture.mdx
        concepts.mdx
        getting-started.mdx
        introduction.mdx
      index.mdx
      test.mdx
  lib/
    source.ts
  .eslintrc.json
  .gitignore
  next.config.mjs
  package.json
  postcss.config.mjs
  README.md
  source.config.ts
  tsconfig.json
engine/
  src/
    engine/
      apis/
        action.py
        chat.py
        kit.py
        model.py
        module.py
        project.py
        repository.py
        resource.py
        workflow.py
      base/
        agents/
          __init__.py
          tasker.py
      config/
        context.py
        workflow_config.py
      db/
        migrations/
          versions/
            04b136490796_add_realtion_type_tor_primary_key.py
            159009b62982_cascade_delte_for_module.py
            1b860f044ac1_add_cascade_delete_for_module.py
            1d66c6f2b36b_add_relation_description.py
            2cf6212c3cf7_add_initial_schema.py
            4f8cb01d9da8_add_session_id_to_workflows.py
            51944779d9a5_add_relation_description.py
            53bcfdb9ee4d_create_initial_tables.py
            6948d3231316_add_work_manifests_table.py
            6fc6692b69f7_change_tool_callstype.py
            77139f76018f_add_realtion_primary_key.py
            7e0a1909e829_add_module_name_field.py
            80a345d4c6d4_add_relation_description.py
            82c5c646edb2_make_content_optional.py
            8e1b1c958c84_create_initial_tables.py
            a0453eafb61d_add_workfloe_statuses.py
            a2b0c771ef91_create_initial_tables.py
            b14ec2d2c63e_create_users_table.py
            b3c6f4e02985_add_tool_call_id_and_name_to_chat_.py
            b66afe5185f9_add_realtion_primary_key.py
            c10ed21756d1_make_content_optional.py
            dde76d5a3ca7_rename_tool_data.py
          env.py
          README
          script.py.mako
        base.py
        models.py
      services/
        agents/
          agent_utils.py
          base_agent.py
          chat_history.py
          code_edit.py
        core/
          agent_loader.py
          kit.py
          module.py
          project.py
        execution/
          action.py
          model.py
          state.py
          workflow.py
        storage/
          repository.py
          resource.py
      utils/
        file.py
        logging.py
        xml_prompts.py
        yaml.py
      main.py
  tests/
    services/
      agents/
        test_base_agent.py
      core/
        test_agent_loader.py
        test_kit_service.py
        test_module_service.py
        test_project_service.py
      execution/
        test_state_service.py
      storage/
        test_repo_service.py
        test_resource_service.py
    conftest.py
  alembic.ini
  pdm.lock
  pyproject.toml
  ruff.toml
registry/
  @/
    components/
      ui/
        scroll-area.tsx
        tabs.tsx
  components/
    ui/
      alert-dialog.tsx
      badge.tsx
      button.tsx
      card.tsx
      dialog.tsx
      dropdown-menu.tsx
      input.tsx
      label.tsx
      progress.tsx
      scroll-area.tsx
      tabs.tsx
    CommonHeader.tsx
    DemoPageLinks.js
    FirebaseAuth.js
    FullPageLoader.js
    Header.js
    Home.tsx
    StyledFirebaseAuth.tsx
  lib/
    utils.ts
  pages/
    api/
      registry/
        file-content.ts
        kit.ts
        publish.ts
      cookies-example.js
      example.js
      login.js
      logout.js
    deprecated/
      ssr-auth-required.js
      ssr-no-token.tsx
      static-auth-required-loader.js
    kit/
      [id].tsx
    _app.tsx
    auth-ssr.tsx
    auth.tsx
    index.tsx
    publish.tsx
  public/
    between-cards.svg
    between-links.svg
    vercel.svg
  styles/
    globals.css
  utils/
    getAbsoluteURL.js
    initAdmin.ts
    initAuth.js
  .dockerignore
  .eslintrc.json
  .gitignore
  .prettierrc
  components.json
  Dockerfile
  next.config.js
  next.config.mjs
  package.json
  postcss.config.js
  README.md
  tailwind.config.js
  tsconfig.json
studio/
  public/
    vite.svg
  src/
    components/
      giml/
        index.tsx
      ui/
        alert-dialog.tsx
        alert.tsx
        avatar.tsx
        badge.tsx
        button.tsx
        card.tsx
        checkbox.tsx
        collapsible.tsx
        context-menu.tsx
        dialog.tsx
        dropdown-menu.tsx
        form.tsx
        input.tsx
        label.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        tooltip.tsx
      AuthPage.tsx
      Chat.tsx
      CodeDiffViewer.tsx
      CodeEditor.tsx
      RelationshipTree.tsx
      themeProvider.tsx
      TreeView.tsx
    hooks/
      use-mobile.tsx
      use-toast.ts
      useModuleRelationships.ts
    layout/
      BottomPanel.tsx
      LeftSidebar.tsx
      MainContent.tsx
      MarkdownText.tsx
      RightSidebar.tsx
      types.d.ts
    lib/
      tree.ts
      utils.ts
    stores/
      chatPromptStore.ts
      chatStore.ts
    types/
      types.ts
    App.css
    App.tsx
    config.ts
    index.css
    main.tsx
    store.ts
    vite-env.d.ts
  .gitignore
  components.json
  eslint.config.js
  index.html
  package.json
  postcss.config.js
  README.md
  tailwind.config.js
  tsconfig.app.json
  tsconfig.json
  tsconfig.node.json
  vite.config.ts
.gitignore
README.md

================================================================
Files
================================================================

================
File: docs/app/(home)/layout.tsx
================
import type { ReactNode } from 'react';
import { HomeLayout } from 'fumadocs-ui/layouts/home';
import { baseOptions } from '@/app/layout.config';

export default function Layout({ children }: { children: ReactNode }) {
  return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}

================
File: docs/app/(home)/page.tsx
================
import React from 'react';
import { ArrowRight, Box, Code2, Brain, Zap, GitFork, BookOpen, Circle } from 'lucide-react';
import Link from 'next/link';

const features = [
  {
    icon: <Brain className="h-6 w-6" />,
    title: "AI-First Design",
    description: "Built from the ground up for AI-controlled software systems with rich context management",
    gradient: "from-orange-100 to-amber-50"
  },
  {
    icon: <Box className="h-6 w-6" />,
    title: "Modular Architecture",
    description: "Create composable, reusable modules that work together seamlessly",
    gradient: "from-amber-50 to-orange-100"
  },
  {
    icon: <Code2 className="h-6 w-6" />,
    title: "Developer Friendly",
    description: "Intuitive APIs, comprehensive documentation, and powerful development tools",
    gradient: "from-orange-100 to-amber-50"
  },
  {
    icon: <Zap className="h-6 w-6" />,
    title: "Production Ready",
    description: "Enterprise-grade reliability with built-in monitoring and security",
    gradient: "from-amber-50 to-orange-100"
  }
];

const LandingPage = () => {
  return (
    <div className="min-h-screen bg-gradient-to-b from-orange-50 to-white">
      {/* Hero Section */}
      <div className="relative overflow-hidden">
        {/* Background Elements */}
        <div className="absolute inset-0">
          <div className="absolute -top-40 -right-40 w-80 h-80 rounded-full bg-gradient-to-br from-orange-200 to-amber-100 opacity-20 blur-3xl" />
          <div className="absolute top-60 -left-40 w-80 h-80 rounded-full bg-gradient-to-br from-orange-200 to-amber-100 opacity-20 blur-3xl" />
        </div>
        
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-24 sm:pb-32">
          <div className="text-center">
            <div className="inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-orange-100 to-amber-100 text-orange-800 text-sm mb-8">
              <Circle className="h-3 w-3 text-orange-500 mr-2 animate-pulse" />
              Now in Public Beta
            </div>
            
            <h1 className="text-4xl sm:text-6xl font-bold text-orange-900 mb-8 relative">
              <span className="relative">
                AI-First Software Architecture
                <div className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-orange-500 to-amber-500 transform skew-x-12" />
              </span>
            </h1>
            
            <p className="max-w-2xl mx-auto text-xl text-gray-600 mb-8">
              Build intelligent, self-managing software systems with context-aware AI agents and modular architecture
            </p>
            
            <div className="flex justify-center gap-4">
              <Link href="/docs" className="inline-flex items-center px-6 py-3 rounded-lg bg-gradient-to-r from-orange-500 to-amber-500 text-white hover:from-orange-600 hover:to-amber-600 transition-all duration-200 shadow-lg hover:shadow-xl hover:-translate-y-0.5">
                Get Started
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
              <a href="https://github.com/yourusername/hivon" className="inline-flex items-center px-6 py-3 rounded-lg border border-orange-200 hover:border-orange-300 hover:bg-orange-50 transition-all duration-200">
                <GitFork className="mr-2 h-4 w-4 text-orange-600" />
                Star on GitHub
              </a>
            </div>
          </div>
          
          {/* Code Preview */}
          <div className="mt-16 max-w-3xl mx-auto transform hover:scale-[1.02] transition-transform duration-200">
            <div className="bg-gray-900 rounded-xl shadow-2xl overflow-hidden border border-orange-200/20">
              <div className="flex items-center space-x-2 px-4 py-3 border-b border-gray-800 bg-gray-800/50">
                <div className="w-3 h-3 bg-red-500 rounded-full" />
                <div className="w-3 h-3 bg-yellow-500 rounded-full" />
                <div className="w-3 h-3 bg-green-500 rounded-full" />
                <div className="ml-2 text-gray-400 text-sm">terminal</div>
              </div>
              <div className="p-4 space-y-4">
                <div className="space-y-2">
                  <div className="flex items-center space-x-2 text-gray-400 text-sm">
                    <span className="text-orange-400">$</span>
                    <span className="text-gray-100">hivon module create --kit web-service --name my-service</span>
                  </div>
                </div>
                <div className="space-y-2 border-l-2 border-orange-500/30 pl-4">
                  <div className="text-orange-400"> Check the service health and optimize configuration</div>
                  <div className="text-gray-300">Agent: I'll analyze the service and make improvements.</div>
                  <div className="text-gray-400 pl-2">1. Checking current metrics...</div>
                  <div className="text-gray-400 pl-2">2. Analyzing bottlenecks...</div>
                  <div className="text-gray-400 pl-2">3. Implementing optimizations...</div>
                </div>
                <div className="space-y-1 text-green-400/80">
                  <div>✓ Response time improved by 35%</div>
                  <div>✓ Resource usage optimized</div>
                  <div>✓ Monitoring configured</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <div 
              key={index} 
              className="group p-6 rounded-xl bg-gradient-to-br border border-orange-100 hover:border-orange-200 transition-all duration-200 hover:shadow-lg"
              style={{
                background: `linear-gradient(to bottom right, ${index % 2 === 0 ? '#fff5eb, #fff' : '#fff, #fff5eb'})`
              }}
            >
              <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-orange-500 to-amber-500 flex items-center justify-center text-white mb-4 group-hover:scale-110 transition-transform duration-200">
                {feature.icon}
              </div>
              <h3 className="text-lg font-semibold text-orange-900 mb-2">{feature.title}</h3>
              <p className="text-gray-600">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Documentation Preview */}
      <div className="bg-gradient-to-b from-white to-orange-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-orange-900 mb-4">Comprehensive Documentation</h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Everything you need to build powerful AI-controlled systems
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {[
              {
                icon: <BookOpen className="h-6 w-6" />,
                title: "Getting Started",
                description: "Quick start guide to create your first AI-controlled module",
                path: "/docs/getting-started"
              },
              {
                icon: <Brain className="h-6 w-6" />,
                title: "Core Concepts",
                description: "Understanding the fundamental building blocks of Hivon",
                path: "/docs/core-concepts"
              },
              {
                icon: <Box className="h-6 w-6" />,
                title: "Architecture",
                description: "Deep dive into Hivon's technical architecture and design",
                path: "/docs/architecture"
              }
            ].map((item, index) => (
              <Link 
                key={index}
                href={item.path} 
                className="group block p-6 rounded-xl bg-white border border-orange-100 hover:border-orange-200 transition-all duration-200 hover:shadow-lg hover:-translate-y-1"
              >
                <div className="flex items-center mb-4">
                  <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-orange-500 to-amber-500 flex items-center justify-center text-white group-hover:scale-110 transition-transform duration-200">
                    {item.icon}
                  </div>
                  <h3 className="ml-3 font-semibold text-orange-900">{item.title}</h3>
                </div>
                <p className="text-gray-600">{item.description}</p>
              </Link>
            ))}
          </div>
        </div>
      </div>

      {/* Call to Action */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center">
        <div className="relative">
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-32 h-32 rounded-full bg-gradient-to-br from-orange-200 to-amber-100 opacity-20 blur-2xl" />
          </div>
          <div className="relative">
            <h2 className="text-3xl font-bold text-orange-900 mb-4">Ready to Get Started?</h2>
            <p className="text-gray-600 max-w-2xl mx-auto mb-8">
              Join the community and start building intelligent, self-managing software systems today
            </p>
            <div className="flex justify-center gap-4">
              <Link href="/docs" className="inline-flex items-center px-6 py-3 rounded-lg bg-gradient-to-r from-orange-500 to-amber-500 text-white hover:from-orange-600 hover:to-amber-600 transition-all duration-200 shadow-lg hover:shadow-xl hover:-translate-y-0.5">
                Read the Docs
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
              <a href="https://discord.gg/hivon" className="inline-flex items-center px-6 py-3 rounded-lg border border-orange-200 hover:border-orange-300 hover:bg-orange-50 transition-all duration-200">
                Join Discord
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LandingPage;

================
File: docs/app/api/search/route.ts
================
import { source } from '@/lib/source';
import { createFromSource } from 'fumadocs-core/search/server';

export const { GET } = createFromSource(source);

================
File: docs/app/docs/[[...slug]]/page.tsx
================
import { source } from '@/lib/source';
import {
  DocsPage,
  DocsBody,
  DocsDescription,
  DocsTitle,
} from 'fumadocs-ui/page';
import { notFound } from 'next/navigation';
import defaultMdxComponents from 'fumadocs-ui/mdx';

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  const MDX = page.data.body;

  return (
    <DocsPage toc={page.data.toc} full={page.data.full}>
      <DocsTitle>{page.data.title}</DocsTitle>
      <DocsDescription>{page.data.description}</DocsDescription>
      <DocsBody>
        <MDX components={{ ...defaultMdxComponents }} />
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return source.generateParams();
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = source.getPage(params.slug);
  if (!page) notFound();

  return {
    title: page.data.title,
    description: page.data.description,
  };
}

================
File: docs/app/docs/layout.tsx
================
import { DocsLayout } from 'fumadocs-ui/layouts/docs';
import type { ReactNode } from 'react';
import { baseOptions } from '@/app/layout.config';
import { source } from '@/lib/source';

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout tree={source.pageTree} {...baseOptions}>
      {children}
    </DocsLayout>
  );
}

================
File: docs/app/global.css
================
@import 'tailwindcss';
@import 'fumadocs-ui/css/neutral.css';
@import 'fumadocs-ui/css/preset.css';

@source '../node_modules/fumadocs-ui/dist/**/*.js';

================
File: docs/app/layout.config.tsx
================
import type { BaseLayoutProps } from 'fumadocs-ui/layouts/shared';

/**
 * Shared layout configurations
 *
 * you can configure layouts individually from:
 * Home Layout: app/(home)/layout.tsx
 * Docs Layout: app/docs/layout.tsx
 */
export const baseOptions: BaseLayoutProps = {
  nav: {
    // can be JSX too!
    title: 'Hivon',
  },
  links: [
    {
      text: 'Documentation',
      url: '/docs',
      active: 'nested-url',
    },
  ],
};

================
File: docs/app/layout.tsx
================
import './global.css';
import { RootProvider } from 'fumadocs-ui/provider';
import { Inter } from 'next/font/google';
import type { ReactNode } from 'react';

const inter = Inter({
  subsets: ['latin'],
});

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className={inter.className} suppressHydrationWarning>
      <body className="flex flex-col min-h-screen">
        <RootProvider>{children}</RootProvider>
      </body>
    </html>
  );
}

================
File: docs/content/docs/overview/architecture.mdx
================
---
title: Architecture
description: Hivon Architecture
---

## Core Services

### Kit Service

The Kit Service manages the lifecycle of kit definitions and their versions. It provides core functionality for:

1. Version Management
```python
class KitService:
    def __init__(self, base_path: Path):
        self.base_path = base_path
        
    async def save_kit(self, kit_data: BinaryIO) -> KitMetadata:
        """
        Save a new kit version after validating its structure
        and extracting metadata from kit.yaml
        """
        # Implementation details from source code
```

2. Kit Validation
   - Semantic version validation
   - Structure verification
   - Dependency checking

3. Distribution
   - Version resolution
   - Dependency resolution
   - Content delivery

### Module Service

The Module Service is responsible for module lifecycle management and relationships:

```python
class ModuleService:
    def create_module(
        self,
        project_id: str,
        owner: str,
        kit_id: str,
        version: str,
        env_vars: Dict[str, str],
        path: str,
        module_name: Optional[str] = None
    ) -> ModuleMetadata:
        """Create a new module instance"""
        # Implementation details from source code
```

Key Responsibilities:
1. Module Creation
2. Relationship Management
3. State Tracking
4. Environment Configuration

### Agent Service

The Agent Service orchestrates AI agent interactions:

```python
class AgentService:
    async def execute_agent_workflow(
        self,
        module_id: str,
        workflow: str,
        user_input: str
    ) -> Dict[str, Any]:
        """Execute workflow with state management and error handling"""
        # Implementation details
```

Core Features:
1. Workflow Execution
2. Tool Management
3. Context Building
4. State Transitions

## State Management

### Stage State Service

Manages the progression of modules through different stages:

```mermaid
stateDiagram-v2
    [*] --> INITIALIZE: Create Module
    INITIALIZE --> MAINTAIN: Setup Complete
    MAINTAIN --> REMOVE: Decommission Request
    
    state INITIALIZE {
        [*] --> STANDBY
        STANDBY --> EXECUTING: Start Action
        EXECUTING --> STANDBY: Complete Action
    }
    
    state MAINTAIN {
        [*] --> STANDBY
        STANDBY --> EXECUTING: Start Action
        EXECUTING --> STANDBY: Complete Action
    }
```

Implementation Details:
```python
class StageStateService:
    def promote_stage(self, module_id: str, target_stage: AgentStage):
        """
        Promote module to next stage if valid
        
        Args:
            module_id: Module identifier
            target_stage: Target stage to promote to
        """
        # Implementation details from source code
```

### Resource Service

Manages module resources and their lifecycle:

1. Resource Types
   - Instructions
   - Documentation
   - Specifications
   - Workspace files

2. Resource Management
```python
class ResourceService:
    def get_workspace_resources(self, module_id: str) -> List[Resource]:
        """Get workspace resources for a module"""
        # Implementation details
```


### State Store

The state store maintains:
1. Module Stage Information
2. Execution State
3. Workflow Progress
4. Relationship Status

## AI Integration

### LLM Service

The Language Model service provides:

```python
class ModelService:
    def __init__(self, model_name: str = "claude-3-5-sonnet-20240620"):
        self.model_name = model_name

    async def chat_completion(
        self,
        messages: List[Dict[str, str]],
        stream: bool = False,
        tools: Optional[List[Dict[str, Any]]] = None,
        tool_choice: Optional[Union[str, Dict[str, str]]] = None,
        **kwargs
    ):
        """Get chat completion from model"""
        # Implementation details from source code
```

### Tool Execution System

Tools are defined and executed through:

1. Function Definitions
```python
@dataclass
class FunctionMetadata:
    """Function metadata in OpenAI function calling format"""
    name: str
    description: str
    parameters: Dict[str, Any]
    is_async: bool
```

2. Execution Environment
```python
class ActionService:
    def execute_function(
        self,
        folder_path: str,
        file_path: str,
        function_name: str,
        parameters: Dict[str, Any],
        requirements: List[str],
        env_vars: Dict[str, str],
        repo_name: str
    ) -> Any:
        """Execute a function in the shared environment"""
        # Implementation details from source code
```

## Security Considerations

1. Environment Isolation
   - Each module runs in its own virtual environment
   - Strict dependency management
   - Resource limitations

2. Access Control
   - Module-level permissions
   - Action restrictions
   - Resource boundaries

3. Audit Trail
   - Comprehensive logging
   - Action history
   - State transitions

## Performance Optimizations

1. Caching Strategy
   - Context caching
   - Resource caching
   - Tool results caching

2. Async Operations
   - Non-blocking I/O
   - Parallel tool execution
   - Event-driven updates

3. Resource Management
   - Connection pooling
   - Memory management
   - Cleanup procedures

## Next Steps

- Learn about [Development Setup](/contributing/development-setup)
- Understand [API Reference](/reference/api/kit-service)
- Explore [Integration Patterns](/guides/integration-patterns)
---
title: Hivon Architecture
description: Deep dive into Hivon's technical architecture and system design
---

# Architecture

Hivon's architecture is designed to provide a robust, scalable foundation for AI-controlled software systems. This page details the technical implementation and design decisions that make Hivon powerful and flexible.

## System Overview

```mermaid
graph TB
    subgraph External Systems
        ES1[Software System A]
        ES2[Software System B]
        ES3[Software System C]
    end
    
    subgraph Hivon Core
        subgraph Service Layer
            SL1[Kit Service]
            SL2[Module Service]
            SL3[Agent Service]
            SL4[Workflow Service]
        end
        
        subgraph State Management
            SM1[Stage State Service]
            SM2[Resource Service]
            SM3[Repository Service]
        end
        
        subgraph Data Layer
            DL1[Module DB]
            DL2[State Store]
            DL3[Chat History]
            DL4[Repository Store]
        end
    end
    
    subgraph AI Layer
        AI1[LLM Service]
        AI2[Tool Execution]
        AI3[Context Management]
    end
    
    %% Connections
    SL2 --> ES1
    SL2 --> ES2
    SL2 --> ES3
    
    SL1 --> DL1
    SL2 --> DL1
    SL3 --> DL3
    SL4 --> DL2
    
    SM1 --> DL2
    SM2 --> DL4
    SM3 --> DL4
    
    SL3 --> AI1
    AI1 --> AI2
    AI2 --> AI3
```

================
File: docs/content/docs/overview/concepts.mdx
================
---
title: Core Concepts
description: Understanding the fundamental building blocks of Hivon
---

# Core Concepts

Hivon's architecture is built around several key concepts that work together to enable AI-controlled software systems. This page explores these concepts in detail, explaining how they interact and why they're essential.

## Architectural Overview

```mermaid
graph TB
    %% Define the foundational architecture of Hivon
    %% Show how different layers interact
    subgraph Registry Layer
        A[Kit Registry]
    end
    
    subgraph Module Layer
        B[Module Instance]
        C[Module Instance]
        D[Module Instance]
    end
    
    subgraph Control Layer
        E[AI Agent]
        F[AI Agent]
        G[AI Agent]
    end
    
    subgraph Integration Layer
        H[Software System]
        I[Software System]
        J[Software System]
    end
    
    A -->|Templates| B
    A -->|Templates| C
    A -->|Templates| D
    
    B -->|Controls| H
    C -->|Controls| I
    D -->|Controls| J
    
    E -->|Manages| B
    F -->|Manages| C
    G -->|Manages| D

## Kits: The Foundation

A kit in Hivon represents a template for AI-controlled software management. It defines how an AI agent should interact with and manage a specific type of software system.

### Kit Structure

```mermaid
graph TD
    subgraph Kit Components
        A[Kit Definition] --> B[Workflows]
        A --> C[Actions]
        A --> D[Instructions]
        A --> E[Resources]
        
        B --> B1[Initialize]
        B --> B2[Maintain]
        B --> B3[Remove]
        
        C --> C1[Python Functions]
        C --> C2[Shell Scripts]
        C --> C3[API Calls]
        
        D --> D1[Documentation]
        D --> D2[Specifications]
        D --> D3[Guidelines]
        
        E --> E1[Templates]
        E --> E2[Configs]
        E --> E3[Scripts]
    end
```

### Key Aspects of Kits

1. **Version Control**
   - Semantic versioning for predictable upgrades
   - Change tracking across versions
   - Backward compatibility guidelines

2. **Environment Specification**
   The kit defines all environmental requirements:
   ```yaml
   environment:
     - name: API_KEY
       description: "Authentication key for the service"
       required: true
       secret: true
     - name: SERVICE_URL
       description: "Base URL for API endpoints"
       required: true
       default: "https://api.service.com"
   ```

3. **Action Definitions**
   Actions are the primary interface between AI agents and software systems:
   ```python
   @action
   async def check_service_health(self, service_url: str) -> HealthStatus:
       """
       Check the health of the service endpoint.
       
       Args:
           service_url: The URL to check
           
       Returns:
           HealthStatus: Current health status with metrics
       """
       # Implementation
   ```

## Modules: The Implementation

Modules are instances of kits, representing actual software systems under AI control. Each module maintains its own:

### State Management
Modules implement a sophisticated state machine:

```mermaid
stateDiagram-v2
    [*] --> INITIALIZE
    INITIALIZE --> MAINTAIN: Successful Setup
    MAINTAIN --> REMOVE: Decommission
    
    state INITIALIZE {
        [*] --> Setup
        Setup --> Validation
        Validation --> Ready
        Ready --> [*]
    }
    
    state MAINTAIN {
        [*] --> Monitoring
        Monitoring --> ActionRequired: Issue Detected
        ActionRequired --> Monitoring: Issue Resolved
    }
```

### Module Relationships

The relationship system enables modules to share context and operate together:

1. **Connection Relationships**
   - Bi-directional operational links
   - Shared workflows
   - Runtime dependencies
   ```python
   # Example of establishing a connection
   await module.create_relation(
       target_id="module-123",
       relation_type=RelationType.CONNECTION,
       description="Primary database connection"
   )
   ```

2. **Context Relationships**
   - Knowledge sharing
   - Configuration inheritance
   - Environmental awareness
   ```python
   # Example of context sharing
   shared_context = await module.get_context_from(
       source_id="module-456",
       context_type="configuration"
   )
   ```

## AI Agents: The Control Layer

AI agents in Hivon are specialized language models that:

### Tool Interaction
The agent uses a standardized tool interface:
```python
class Tool:
    name: str
    description: str
    parameters: Dict[str, Any]
    function: Callable
    
    async def execute(self, **params) -> Result:
        """Execute the tool with given parameters"""
```

### Context Building
Agents construct their understanding through:

1. Static Context
   - Module documentation
   - Workflow definitions
   - Historical patterns

2. Dynamic Context
   - Current state
   - Related module information
   - Environmental conditions
   - Recent actions and their outcomes

### Decision Making
The agent follows a structured decision process:

```mermaid
graph LR
    A[Observe State] --> B[Gather Context]
    B --> C[Evaluate Options]
    C --> D[Select Action]
    D --> E[Execute]
    E --> F[Monitor Results]
    F --> A
```

## Integration Points

Hivon provides several integration mechanisms:

### 1. API Integration
```python
from hivon import Module, Action

class CustomModule(Module):
    @Action
    async def integrate_with_service(self, endpoint: str):
        """Custom integration logic"""
        pass
```

### 2. Event System
```python
# Event subscription
@module.on_event("state_change")
async def handle_state_change(event: StateChangeEvent):
    """React to state changes"""
    pass
```

### 3. Plugin Architecture
```python
from hivon.plugins import Plugin

class CustomPlugin(Plugin):
    """Extend functionality through plugins"""
    
    async def initialize(self):
        """Plugin initialization"""
        pass
```

## Next Steps

1. Explore the [Quickstart Guide](/guides/quickstart) to create your first module
2. Learn about [Kit Development](/guides/creating-kits/basic-kit)
3. Understand [Module Management](/guides/using-modules/initialization)
4. Join our [Community](/community)

================
File: docs/content/docs/overview/getting-started.mdx
================
---
title: Getting Started with Hivon
description: Your first steps with AI-controlled software architecture
---

# Getting Started with Hivon

This guide will walk you through setting up your first AI-controlled module using Hivon. We'll create a simple module that manages a web service, demonstrating the core concepts and workflows.

## Prerequisites

Before starting, ensure you have:

1. Python 3.9 or higher installed
2. pip package manager
3. Git
4. A basic understanding of Python and web services

## Installation

First, let's install Hivon using pip:

```bash
pip install hivon-framework
```

Create a new directory for your project:

```bash
mkdir my-hivon-project
cd my-hivon-project
```

Initialize a new Hivon project:

```bash
hivon init
```

## Your First Module

Let's create a module that manages a web service. We'll use the web-service kit from the registry:

```bash
hivon module create --kit web-service --name my-service
```

This will create a new module with the following structure:

```
my-service/
├── actions/
│   ├── health.py
│   ├── deployment.py
│   └── monitoring.py
├── instructions/
│   ├── setup.md
│   └── maintenance.md
├── kit.yaml
└── workspace/
    ├── config/
    └── scripts/
```

### Configure the Module

Edit the module's environment variables:

```yaml
# .env
SERVICE_URL=https://api.example.com
API_KEY=your-api-key
ENVIRONMENT=production
```

## Understanding Module Workflows

### 1. Initialize Workflow

The initialize workflow sets up your service:

```mermaid
sequenceDiagram
    participant U as User
    participant A as AI Agent
    participant S as Service
    
    U->>A: Start Initialize
    A->>S: Check Prerequisites
    A->>S: Configure Service
    A->>S: Verify Setup
    A-->>U: Setup Complete
```

Start the initialization:

```bash
hivon workflow run my-service initialize
```

The AI agent will:
1. Check system requirements
2. Configure the service
3. Verify the setup
4. Move to the maintain stage

### 2. Maintain Workflow

In the maintain workflow, the agent monitors and manages your service:

```bash
hivon workflow run my-service maintain
```

Example interaction:

```
> Check the current status of the service

Agent: I'll check the service health and metrics.

Executing health check...
- Endpoint status: OK
- Response time: 145ms
- Error rate: 0.02%
- CPU usage: 45%

The service is running normally. Would you like me to:
1. Show detailed metrics
2. Optimize any settings
3. Set up alerts
```

## Adding Module Relationships

Let's connect our service module with a database module:

1. Create a database module:
```bash
hivon module create --kit postgresql --name my-database
```

2. Establish the connection:
```bash
hivon module connect my-service my-database --type connection
```

This enables:
- Shared context between modules
- Coordinated operations
- Automatic configuration updates

## Using the AI Agent

The AI agent can handle various tasks. Here are some example interactions:

### 1. Performance Optimization

```
> The service seems slow, can you optimize it?

Agent: I'll analyze the performance and make improvements.

1. Checking current metrics...
2. Analyzing bottlenecks...
3. Implementing optimizations...

I've made the following changes:
- Increased connection pool size
- Enabled response caching
- Optimized database queries

Response time has improved by 35%.
```

### 2. Configuration Management

```
> Update the service configuration for higher throughput

Agent: I'll adjust the configuration safely.

1. Backing up current config...
2. Analyzing resource usage...
3. Calculating optimal values...
4. Applying changes gradually...

Configuration updated:
- Worker processes: 8 -> 12
- Connection timeout: 30s -> 45s
- Max requests: 1000 -> 1500

Monitoring for any issues...
```

## Next Steps

Now that you have a basic module running, you can:

1. Explore [Advanced Module Configuration](/guides/using-modules/configuration)
2. Learn about [Custom Actions](/guides/creating-kits/actions)
3. Understand [Module Relationships](/concepts/modules/relationships)
4. Join the [Community](/community)

## Common Issues and Solutions

### Issue: Module Creation Fails

```bash
Error: Kit validation failed
```

Solution:
1. Verify kit name and version
2. Check environment variables
3. Ensure prerequisites are met

### Issue: Agent Communication Problems

```
Error: Could not execute workflow
```

Solution:
1. Check API access
2. Verify environment configuration
3. Review service permissions

## Getting Help

1. Documentation
   - [Concepts Guide](/concepts)
   - [API Reference](/reference/api)
   - [Troubleshooting Guide](/guides/troubleshooting)

2. Community
   - [Discord Server](https://discord.gg/hivon)
   - [GitHub Discussions](https://github.com/hivon/hivon/discussions)
   - [Stack Overflow](https://stackoverflow.com/questions/tagged/hivon)

Would you like me to continue with more documentation sections or expand any particular area?

================
File: docs/content/docs/overview/introduction.mdx
================
---
title: Introduction to Hivon
description: Understanding the fundamentals of AI-first software architecture
---

# Introduction to Hivon

Hivon represents a paradigm shift in software architecture, embracing the reality that while Artificial General Intelligence (AGI) remains on the horizon, we already possess AI models capable of human-level performance within well-defined domains. This framework bridges the gap between traditional software engineering and modern AI capabilities, offering a structured approach to building AI-controlled systems.

## The Challenge

Traditional software architecture faces several limitations when integrating with AI systems:

1. Context Integration
   Modern AI models excel with proper context, but there's no standardized way to provide and maintain this context in software systems.

2. Bounded Rationality
   While current AI models aren't generally intelligent, they perform exceptionally well within constrained environments with clear objectives.

3. Tool Integration
   AI models need well-defined interfaces to interact with software systems, but traditional architectures aren't designed with AI control in mind.

```mermaid
graph TD
    A[Traditional Software Architecture] --> B[Limited AI Integration]
    B --> C[Context Management Issues]
    B --> D[Tool Interface Problems]
    B --> E[Unclear Control Boundaries]
    
    F[Hivon Framework] --> G[Structured AI Integration]
    G --> H[Context Management System]
    G --> I[Standardized Tool Interfaces]
    G --> J[Clear Control Protocols]
```

## The Hivon Solution

Hivon addresses these challenges through a comprehensive framework that enables:

### 1. Modular AI Control
The framework introduces the concept of AI-controlled modules, where each module:
- Represents a distinct software system or component
- Provides clear boundaries and interfaces
- Maintains its own context and state
- Operates through well-defined workflows

### 2. Contextual Awareness
Hivon's unique approach to context management ensures that:

Rather than relying on static prompts or one-size-fits-all solutions, Hivon enables dynamic context building through:
- Module relationships
- Shared resources
- Workflow history
- Environmental awareness

This context-first approach allows AI models to make informed decisions based on complete and relevant information.

### 3. Structured Workflows
The framework implements a stage-based workflow system that guides AI agents through different phases of module management:

```mermaid
stateDiagram-v2
    [*] --> Initialize
    Initialize --> Maintain: Initial setup complete
    Maintain --> Remove: Decommission required
    
    state Initialize {
        [*] --> Setup
        Setup --> Validation
        Validation --> Configuration
        Configuration --> [*]
    }
    
    state Maintain {
        [*] --> Monitor
        Monitor --> Update
        Update --> Monitor
    }
```

## Key Benefits

### For Engineers
1. Structured Integration
   - Clear patterns for AI integration
   - Standardized interfaces
   - Predictable behavior

2. Reduced Complexity
   Engineers can focus on defining capabilities and constraints while letting AI handle routine operations.

3. Improved Maintainability
   The modular nature of Hivon allows for:
   - Isolated testing
   - Gradual adoption
   - Easy updates

### For Organizations
1. Scalable AI Integration
   Start small with individual modules and scale up as needed.

2. Risk Management
   - Clear boundaries for AI operations
   - Audit trails through workflow history
   - Controlled progression through stages

3. Resource Optimization
   AI agents can manage routine tasks efficiently, allowing human engineers to focus on strategic development.

## Real-World Applications

Hivon is particularly valuable in scenarios such as:

### DevOps Automation
AI agents can manage:
- Deployment workflows
- Monitoring and alerting
- Scaling decisions
- Incident response

### System Integration
Modules can represent different systems while AI agents handle:
- Data synchronization
- Protocol translation
- Error recovery
- Performance optimization

### Service Management
Automated management of:
- Service health
- Resource allocation
- Configuration updates
- Dependency management

## Next Steps

Begin your journey with Hivon by:

1. Understanding core concepts in the next section
2. Following the quickstart guide
3. Exploring the kit registry at registry.hivon.dev
4. Joining the community discussions

Each section of this documentation will dive deeper into specific aspects of Hivon, providing you with comprehensive knowledge to successfully implement AI-controlled software architectures.

================
File: docs/content/docs/index.mdx
================
---
title: Hello World
description: Your first document
---

Welcome to the docs! You can start writing documents in `/content/docs`.

## What is Next?

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

================
File: docs/content/docs/test.mdx
================
---
title: Components
description: Components
---

## Code Block

```js
console.log('Hello World');
```

## Cards

<Cards>
  <Card title="Learn more about Next.js" href="https://nextjs.org/docs" />
  <Card title="Learn more about Fumadocs" href="https://fumadocs.vercel.app" />
</Cards>

================
File: docs/lib/source.ts
================
import { docs, meta } from '@/.source';
import { createMDXSource } from 'fumadocs-mdx';
import { loader } from 'fumadocs-core/source';

export const source = loader({
  baseUrl: '/docs',
  source: createMDXSource(docs, meta),
});

================
File: docs/.eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: docs/.gitignore
================
# deps
/node_modules

# generated content
.contentlayer
.content-collections
.source

# test & build
/coverage
/.next/
/out/
/build
*.tsbuildinfo

# misc
.DS_Store
*.pem
/.pnp
.pnp.js
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# others
.env*.local
.vercel
next-env.d.ts

================
File: docs/next.config.mjs
================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);

================
File: docs/package.json
================
{
  "name": "hivon-docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start",
    "postinstall": "fumadocs-mdx"
  },
  "dependencies": {
    "@react-spring/web": "^9.7.5",
    "@theguild/remark-mermaid": "^0.2.0",
    "framer-motion": "^12.0.6",
    "fumadocs-core": "15.0.0",
    "fumadocs-mdx": "11.3.2",
    "fumadocs-ui": "15.0.0",
    "next": "15.1.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-intersection-observer": "^9.15.1",
    "react-particles": "^2.12.2",
    "tsparticles": "^3.8.1",
    "tsparticles-slim": "^2.12.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.0.0",
    "@types/mdx": "^2.0.13",
    "@types/node": "22.10.9",
    "@types/react": "^19.0.7",
    "@types/react-dom": "^19.0.3",
    "eslint": "^8",
    "eslint-config-next": "15.1.6",
    "postcss": "^8.5.1",
    "tailwindcss": "^4.0.0",
    "typescript": "^5.7.3"
  }
}

================
File: docs/postcss.config.mjs
================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

================
File: docs/README.md
================
# hivon-docs

This is a Next.js application generated with
[Create Fumadocs](https://github.com/fuma-nama/fumadocs).

Run development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```

Open http://localhost:3000 with your browser to see the result.

## Learn More

To learn more about Next.js and Fumadocs, take a look at the following
resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js
  features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
- [Fumadocs](https://fumadocs.vercel.app) - learn about Fumadocs

================
File: docs/source.config.ts
================
import { defineDocs, defineConfig } from 'fumadocs-mdx/config';
import { remarkMermaid } from '@theguild/remark-mermaid';


export const { docs, meta } = defineDocs({
  dir: 'content/docs',
});

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [remarkMermaid],
  },
});

================
File: docs/tsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: engine/src/engine/apis/action.py
================
# engine/apis/action.py

from typing import Any, Dict, List

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel

from engine.services.execution.action import ActionError, ActionService, FunctionMetadata


class OpenAIFunctionSchema(BaseModel):
    """OpenAI function calling schema"""
    type: str = "function"
    function: Dict[str, Any]

    @classmethod
    def from_metadata(cls, metadata: FunctionMetadata) -> "OpenAIFunctionSchema":
        """Convert function metadata to OpenAI schema"""
        return cls(
            type="function",
            function={
                "name": metadata.name,
                "description": metadata.description,
                "parameters": metadata.parameters or {},
                "strict": True
            }
        )

class ExecuteFunctionRequest(BaseModel):
    parameters: Dict[str, Any] = {}
    requirements: List[str] = []
    env_vars: Dict[str, str] = {}  # Add environment variables field

class ActionRouter:
    """FastAPI router for function execution"""

    def __init__(
        self,
        action_service: ActionService,
        prefix: str = "/action"
    ):
        self.service = action_service
        self.router = APIRouter(prefix=prefix, tags=["action"])
        self._setup_routes()

    async def _get_function_metadata(
        self,
        folder_path: str = Query(..., description="Path to folder containing Python files"),
        file_path: str = Query(..., description="Path to Python file (relative to folder_path)"),
        function_name: str = Query(..., description="Name of the function")
    ) -> OpenAIFunctionSchema:
        """Get function metadata in OpenAI schema format"""
        try:
            metadata = self.service.get_function_metadata(
                folder_path=folder_path,
                file_path=file_path,
                function_name=function_name
            )
            return OpenAIFunctionSchema.from_metadata(metadata)
        except ActionError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _execute_function(
        self,
        folder_path: str = Query(..., description="Path to folder containing Python files"),
        file_path: str = Query(..., description="Path to Python file (relative to folder_path)"),
        function_name: str = Query(..., description="Name of the function"),
        request: ExecuteFunctionRequest = None
    ) -> Dict[str, Any]:
        """Execute function"""
        try:
            if request is None:
                request = ExecuteFunctionRequest()

            result = self.service.execute_function(
                folder_path=folder_path,
                file_path=file_path,
                function_name=function_name,
                parameters=request.parameters,
                requirements=request.requirements,
                env_vars=request.env_vars  # Pass environment variables to service
            )
            return {"result": result}
        except ActionError as e:
            raise HTTPException(status_code=400, detail=str(e))

    def _setup_routes(self):
        """Setup all routes"""
        self.router.add_api_route(
            "/metadata",
            self._get_function_metadata,
            methods=["GET"],
            response_model=OpenAIFunctionSchema,
            summary="Get function metadata in OpenAI schema format"
        )

        self.router.add_api_route(
            "/execute",
            self._execute_function,
            methods=["POST"],
            response_model=Dict[str, Any],
            summary="Execute function with optional environment variables"
        )

================
File: engine/src/engine/apis/chat.py
================
# engine/apis/agent.py

from typing import Dict, Any, List, Optional
from fastapi import APIRouter, HTTPException, Query, Path
from pydantic import BaseModel

from engine.config.workflow_config import WorkflowConfigurations
from engine.services.agents.base_agent import BaseAgent
from engine.services.agents.base_agent import AgentServices, AgentContext
from engine.config.workflow_config import WorkflowConfigService

class WorkflowExecuteRequest(BaseModel):
    """Request model for workflow execution"""
    section: str
    input: str 
    session_id: Optional[str] = "00000000-0000-0000-0000-000000000000"  # Default UUID(0)

class WorkflowResponse(BaseModel):
    """Response model for workflow execution"""
    response: str
    results: List[Dict[str, Any]]

class HistoryResponse(BaseModel):
    """Response model for history"""
    history: List[Dict[str, Any]]
    section: str
    module_id: str

class StatusResponse(BaseModel):
    """Response model for module status"""
    module_id: str
    state: str
    last_updated: str

from engine.services.agents.chat_history import AgentError
from engine.services.core.agent_loader import AgentLoader, AgentLoaderError

class ChatRouter:
    """FastAPI router for agent endpoints"""

    def __init__(
        self,
        agent_services: AgentServices,
        prefix: str = "/chat"
    ):
        self.services = agent_services
        self.workflow_config_service = WorkflowConfigService()
        self.agent_loader = AgentLoader(agent_services)
        
        # Important: prefix is /chat in our route declarations
        self.router = APIRouter(prefix=prefix, tags=["agent"])
        self._setup_routes()

    def _get_agent_for_workflow(self, workflow_type: str, module_id: str) -> BaseAgent:
        """Get appropriate agent based on workflow configuration in kit.yaml"""
        try:
            # Get module info
            module_path = self.services.module_service.get_module_path(module_id)
            
            # Get kit config first
            with open(module_path / "kit.yaml") as f:
                import yaml
                kit_config = yaml.safe_load(f)
            
            # Get workflow config
            config = self.workflow_config_service.get_workflow_config(workflow_type, kit_config)
            
            if not config.agent_type:
                raise AgentError(f"No agent type specified for workflow: {workflow_type}")

            # Load appropriate agent from kit
            agent = self.agent_loader.load_workflow_agent(
                kit_path=module_path,
                workflow_name=workflow_type,
                workflow_config=config
            )
            
            if not agent:
                raise AgentError(f"Failed to load agent '{config.agent_type}' for workflow: {workflow_type}")
                
            return agent
                
        except AgentLoaderError as e:
            raise AgentError(f"Failed to load agent: {str(e)}")
        except Exception as e:
            raise AgentError(f"Failed to determine agent: {str(e)}")

    async def _execute_workflow(
        self,
        request: WorkflowExecuteRequest,
        module_id: str = Path(..., description="Module ID")
    ) -> WorkflowResponse:
        """Handle workflow execution request"""
        try:
            # Get appropriate agent
            agent = self._get_agent_for_workflow(request.section, module_id)
            
            # Create context - force string session ID
            session_id = request.session_id or "00000000-0000-0000-0000-000000000000"
            
            context = AgentContext(
                module_id=module_id,
                workflow=request.section,
                user_input=request.input,
                session_id=session_id
            )
            
            # Execute workflow
            result = await agent.process_request(context)
            
            return WorkflowResponse(
                response=result.get("response", ""),  # Default empty string 
                results=result.get("results", [])
            )
            
        except AgentError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _get_workflow_history(
        self,
        module_id: str = Path(..., description="Module ID"),
        workflow: str = Path(..., description="Workflow"),
        session_id: Optional[str] = Query("00000000-0000-0000-0000-000000000000", description="Optional session ID")
    ) -> HistoryResponse:
        """Get workflow history"""
        try:
            # Get appropriate agent
            agent = self._get_agent_for_workflow(workflow, module_id)
            
            history = agent.history_manager.get_chat_history(
                module_id=module_id,
                workflow=workflow,
                session_id=session_id
            )
            
            return HistoryResponse(
                history=history,
                section=workflow,
                module_id=module_id
            )
            
        except AgentError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _get_status(
        self,
        module_id: str = Path(..., description="Module ID")
    ) -> StatusResponse:
        """Get module status"""
        try:
            stage, state = self.services.state_service.get_status(module_id)
            last_updated = self.services.state_service.get_last_updated(module_id)
            
            return StatusResponse(
                module_id=module_id,
                state=state.value,
                last_updated=last_updated
            )
            
        except AgentError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    def _setup_routes(self):
        """Setup API routes"""
        # Update parameter description to clarify session_id usage
        descriptions = {
            "module_id": "Module ID",
            "section": "Workflow section (initialize/maintain/remove/edit)",
            "session_id": "Optional session ID. Defaults to base session if not provided."
        }
        
        # Use full paths with /chat prefix since it's not in router prefix
        self.router.add_api_route(
            "/{module_id}/execute",
            self._execute_workflow,
            methods=["POST"],
            response_model=WorkflowResponse
        )

        self.router.add_api_route(
            "/{module_id}/workflow/{workflow}/history",
            self._get_workflow_history,
            methods=["GET"],
            response_model=HistoryResponse
        )

        self.router.add_api_route(
            "/{module_id}/status",
            self._get_status,
            methods=["GET"],
            response_model=StatusResponse
        )

================
File: engine/src/engine/apis/kit.py
================
from typing import List

from fastapi import APIRouter, File, HTTPException, UploadFile
from fastapi.responses import JSONResponse
from pydantic import BaseModel

from engine.services.core.kit import (
    InvalidVersionError,
    KitError,
    KitMetadata,
    KitNotFoundError,
    KitService,
    VersionExistsError,
    VersionSort,
)

# Pydantic models for API responses


class KitResponse(BaseModel):
    name: str
    version: str
    created_at: str
    size: int
    owner: str = "default"
    doc_version: str = "v1"
    kit_id: str = ""
    environment: List[dict] = []

    @classmethod
    def from_metadata(cls, metadata: KitMetadata) -> "KitResponse":
        return cls(
            name=metadata.name,
            version=metadata.version,
            created_at=metadata.created_at,
            size=metadata.size,
            owner=metadata.owner,
            doc_version=metadata.doc_version,
            kit_id=metadata.kit_id,
            environment=metadata.environment
        )


class KitListResponse(BaseModel):
    kits: List[KitResponse]

class KitVersionsResponse(BaseModel):
    versions: List[str]

class KitRouter:
    """FastAPI router for kit management endpoints"""

    def __init__(
        self,
        kit_service: KitService,
        prefix: str = "/kits"
    ):
        """
        Initialize kit router
        
        Args:
            kit_service: Kit management service
            prefix: URL prefix for routes
        """
        self.service = kit_service
        self.router = APIRouter(prefix=prefix, tags=["kits"])
        self._setup_routes()

    async def _upload_kit(
        self,
        kit_file: UploadFile = File(...)
    ):
        """Handle kit upload"""
        try:
            metadata = self.service.save_kit(
                kit_file.file
            )

            return JSONResponse(
                content={
                    "status": "success",
                    "message": "Kit uploaded successfully",
                    "kit_info": KitResponse.from_metadata(metadata).dict()
                }
            )

        except InvalidVersionError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except VersionExistsError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except KitError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _list_kits(self):
        """List all kits"""
        try:
            kits = self.service.get_all_kits()
            return KitListResponse(
                kits=[KitResponse.from_metadata(p) for p in kits]
            )
        except KitError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _list_kit_versions(self, owner: str, kit_id: str):
        """List kit versions"""
        try:
            versions = self.service.get_kit_versions(owner, kit_id, sort=VersionSort.DESCENDING)
            return KitVersionsResponse(versions=versions)
        except KitNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except KitError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _delete_kit_version(self, owner: str, kit_id: str, version: str):
        """Delete kit version"""
        try:
            self.service.delete_kit_version(owner, kit_id, version)
            return JSONResponse(
                content={
                    "status": "success",
                    "message": f"Kit {kit_id} version {version} deleted successfully"
                }
            )
        except InvalidVersionError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except KitNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except KitError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _delete_kit(self, owner: str,kit_id: str):
        """Delete kit and all versions"""
        try:
            self.service.delete_kit(owner, kit_id)
            return JSONResponse(
                content={
                    "status": "success",
                    "message": f"Kit {kit_id} deleted successfully"
                }
            )
        except KitNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except KitError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _install_kit(self, owner: str, kit_id: str, version: str = None):
        """Install kit from registry"""
        try:
            metadata = self.service.install_kit(owner, kit_id, version)
            return JSONResponse(
                content={
                    "status": "success",
                    "message": "Kit installed successfully",
                    "kit_info": KitResponse.from_metadata(metadata).dict()
                }
            )
        except InvalidVersionError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except KitNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except KitError as e:
            raise HTTPException(status_code=500, detail=str(e))

    def _setup_routes(self):
        """Setup all routes"""
        self.router.add_api_route(
            "/",
            self._upload_kit,
            methods=["POST"],
            summary="Upload kit"
        )

        self.router.add_api_route(
            "/install/{owner}/{kit_id}/{version}",
            self._install_kit,
            methods=["GET"],
            summary="Install kit from registry with specific version"
        )

        self.router.add_api_route(
            "/install/{owner}/{kit_id}",
            self._install_kit,
            methods=["GET"],
            summary="Install kit from registry with latest version"
        )

        self.router.add_api_route(
            "",
            self._list_kits,
            methods=["GET"],
            response_model=KitListResponse,
            summary="List all kits"
        )

        self.router.add_api_route(
            "/{owner}/{kit_id}/versions",
            self._list_kit_versions,
            methods=["GET"],
            response_model=KitVersionsResponse,
            summary="List kit versions"
        )

        self.router.add_api_route(
            "/{owner}/{kit_id}/{version}",
            self._delete_kit_version,
            methods=["DELETE"],
            summary="Delete kit version"
        )

        self.router.add_api_route(
            "/{owner}/{kit_id}",
            self._delete_kit,
            methods=["DELETE"],
            summary="Delete kit"
        )

================
File: engine/src/engine/apis/model.py
================
from typing import Any, Dict, List

from fastapi import APIRouter
from pydantic import BaseModel

from engine.services.execution.model import ModelService

class SetModelRequest(BaseModel):
    """Request model for setting the model name"""
    model_name: str


class ModelRouter:
    """FastAPI router for model endpoints"""

    def __init__(
        self,
        model_service: ModelService,
        prefix: str = "/model"
    ):
        self.service = model_service
        self.router = APIRouter(prefix=prefix, tags=["model"])
        self._setup_routes()

    async def _set_model(self, request: SetModelRequest):
        """Handle set model request"""
        try:
            model_name = self.service.set_model(request.model_name)
            return {"model_name": model_name}
        except Exception as e:
            raise Exception(str(e))

    async def _get_current_model(self):
        """Handle get current model request"""
        try:
            model_name = self.service.get_current_model()
            return {"model_name": model_name}
        except Exception as e:
            raise Exception(str(e))

    async def _list_models(self):
        """Handle list models request"""
        try:
            available_models = self.service.get_available_models()
            return available_models
        except Exception as e:
            raise Exception(str(e))

    async def _chat_completion(self, request: Dict[str, Any]):
        """Handle chat completion request"""
        try:
            response = await self.service.chat_completion(**request)
            return response
        except Exception as e:
            raise Exception(str(e))

    def _setup_routes(self):
        """Setup API routes"""
        self.router.add_api_route(
            "/chat/completions",
            self._chat_completion,
            methods=["POST"]
        )
        self.router.add_api_route(
            "/set",
            self._set_model,
            methods=["POST"],
            response_model=Dict[str, str]
        )
        self.router.add_api_route(
            "/list",
            self._list_models,
            methods=["GET"],
            response_model=Dict[str, List[str]]
        )
        self.router.add_api_route(
            "/current",
            self._get_current_model,
            methods=["GET"],
            response_model=Dict[str, str]
        )

================
File: engine/src/engine/apis/module.py
================
import re
from typing import Dict, List, Optional

from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel, validator

from engine.services.core.module import (
    ModuleError,
    ModuleMetadata,
    ModuleService,
    RelationType,
)
from loguru import logger


class CreateModuleRequest(BaseModel):
    project_id: str
    owner: str
    kit_id: str
    version: str
    env_vars: Dict[str, str]
    path: str
    module_name: Optional[str] = None  # New optional field

    @validator('path')
    def validate_path(cls, v):
        if not re.match(r'^[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*$', v):
            raise ValueError('Path must be alphanumeric segments separated by dots')
        return v

class UpdateModulePathRequest(BaseModel):
    path: str
    project_id: str

    @validator('path')
    def validate_path(cls, v):
        if not re.match(r'^[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*$', v):
            raise ValueError('Path must be alphanumeric segments separated by dots')
        return v


class UpdateRelationDescriptionRequest(BaseModel):
    description: str

    @validator('description')
    def validate_description(cls, v):
        if not v.strip():
            raise ValueError('Description cannot be empty')
        return v.strip()



class UpdateModuleEnvVarRequest(BaseModel):
    env_var_name: str
    env_var_value: str
    
    @validator('env_var_name')
    def validate_env_var_name(cls, v):
        if not v.strip():
            raise ValueError('Environment variable name cannot be empty')
        return v.strip()

class UpdateModuleNameRequest(BaseModel):
    name: str
    
    @validator('name')
    def validate_name(cls, v):
        if not v.strip():
            raise ValueError('Module name cannot be empty')
        return v.strip()
    
class ModuleResponse(BaseModel):
    module_id: str
    module_name: Optional[str]  # New field
    project_id: str
    kit_id: str
    owner: str
    version: str
    created_at: str
    env_vars: Dict[str, str]
    repo_name: str
    path: str

    @classmethod
    def from_metadata(cls, metadata: ModuleMetadata) -> "ModuleResponse":
        return cls(
            module_id=metadata.module_id,
            module_name=metadata.module_name,  # New field
            project_id=metadata.project_id,
            kit_id=metadata.kit_id,
            owner=metadata.owner,
            version=metadata.version,
            created_at=metadata.created_at,
            env_vars=metadata.env_vars,
            repo_name=metadata.repo_name,
            path=metadata.path
        )

class CreateRelationRequest(BaseModel):
    source_id: str
    target_id: str
    relation_type: RelationType
    description: Optional[str] = None  # New optional field


class ModuleGraphResponse(BaseModel):
    nodes: List[ModuleResponse]
    edges: List[Dict]

class ModuleRouter:
    """FastAPI router for module management"""

    def __init__(
        self,
        module_service: ModuleService,
        prefix: str = "/module"
    ):
        self.service = module_service
        self.router = APIRouter(prefix=prefix, tags=["module"])
        self._setup_routes()

    async def _create_module(self, request: CreateModuleRequest):
        """Create module"""
        try:
            metadata = self.service.create_module(
                project_id=request.project_id,
                owner=request.owner,
                kit_id=request.kit_id,
                version=request.version,
                env_vars=request.env_vars,
                path=request.path,
                module_name=request.module_name
            )
            return ModuleResponse.from_metadata(metadata)
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _delete_module(self, module_id: str):
        """Delete module"""
        try:
            self.service.delete_module(module_id)
            return JSONResponse(
                content={
                    "status": "success",
                    "message": f"module {module_id} deleted successfully"
                }
            )
        except ModuleError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _update_module_path(
        self,
        module_id: str,
        request: UpdateModulePathRequest
    ):
        """Update module path for a specific module in a project"""
        try:
            self.service.update_module_path(
                module_id=module_id,
                project_id=request.project_id,
                new_path=request.path
            )
            return JSONResponse(
                content={
                    "status": "success",
                    "message": "Module path updated successfully"
                }
            )
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _create_relation(self, request: CreateRelationRequest):
        """Create module relation"""
        try:
            self.service.create_relation(
                source_id=request.source_id,
                target_id=request.target_id,
                relation_type=request.relation_type,
                description=request.description
            )
            return JSONResponse(
                content={
                    "status": "success",
                    "message": "Relation created successfully"
                }
            )
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _delete_relation(
        self,
        source_id: str,
        target_id: str,
        relation_type: RelationType
    ):
        """Delete module relation"""
        try:
            self.service.delete_relation(
                source_id=source_id,
                target_id=target_id,
                relation_type=relation_type
            )
            return JSONResponse(
                content={
                    "status": "success",
                    "message": "Relation deleted successfully"
                }
            )
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def get_module_graph(self):
        """Get module relationship graph"""
        try:
            graph = self.service.get_module_graph()

            nodes = []
            for node_id in graph.nodes:
                attrs = graph.nodes[node_id]
                if 'kit_id' not in attrs:
                    continue

                logger.info(attrs)
                nodes.append(
                    ModuleResponse(
                        module_id=node_id,
                        kit_id=attrs['kit_id'],
                        module_name=attrs.get('module_name'),  # New field
                        owner=attrs['owner'],
                        version=attrs['version'],
                        created_at=attrs['created_at'].isoformat(),
                        env_vars=attrs['env_vars'],
                        repo_name=attrs['repo_name'],
                        project_id=attrs['project_id'],
                        path=attrs['path']
                    )
                )

            edges = []
            for source, target, attrs in graph.edges(data=True):
                edges.append({
                    "source": source,
                    "target": target,
                    "type": attrs['type'],
                    "created_at": attrs['created_at'],
                    "description": attrs.get('description')
                })

            return ModuleGraphResponse(nodes=nodes, edges=edges)

        except ModuleError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _get_project_modules(self, project_id: str):
        """Get all modules for a project"""
        try:
            modules = self.service.get_project_modules(project_id)
            return [ModuleResponse.from_metadata(m) for m in modules]
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _get_linked_modules(
        self,
        module_id: str,
        relation_type: Optional[RelationType] = None
    ):
        """Get modules linked to the specified module"""
        try:
            modules = self.service.get_linked_modules(
                module_id=module_id,
                relation_type=relation_type
            )
            return [ModuleResponse.from_metadata(m) for m in modules]
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def get_module_connections(self, module_id: str):
        """Get modules with connection relation (bi-directional)"""
        return await self._get_linked_modules(
            module_id=module_id,
            relation_type=RelationType.CONNECTION
        )

    async def get_module_context(self, module_id: str):
        """Get modules with context relation (bi-directional)"""
        return await self._get_linked_modules(
            module_id=module_id,
            relation_type=RelationType.CONTEXT
        )



    async def _update_module_env_var(
        self,
        module_id: str,
        request: UpdateModuleEnvVarRequest
    ):
        """Update module environment variable"""
        try:
            metadata = self.service.update_module_env_var(
                module_id=module_id,
                env_var_name=request.env_var_name,
                env_var_value=request.env_var_value
            )
            return ModuleResponse.from_metadata(metadata)
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _update_module_name(
        self,
        module_id: str,
        request: UpdateModuleNameRequest
    ):
        """Update module name"""
        try:
            metadata = self.service.update_module_name(
                module_id=module_id,
                new_name=request.name
            )
            return ModuleResponse.from_metadata(metadata)
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))




    async def _update_relation_description(
        self,
        source_id: str,
        target_id: str,
        relation_type: RelationType,
        request: UpdateRelationDescriptionRequest
    ):
        """Update relation description"""
        try:
            self.service.update_relation_description(
                source_id=source_id,
                target_id=target_id,
                relation_type=relation_type,
                new_description=request.description
            )
            return JSONResponse(
                content={
                    "status": "success",
                    "message": "Relation description updated successfully"
                }
            )
        except ModuleError as e:
            raise HTTPException(status_code=400, detail=str(e))


    def _setup_routes(self):
        """Setup all routes"""
        self.router.add_api_route(
            "/",
            self._create_module,
            methods=["POST"],
            response_model=ModuleResponse,
            summary="Create module"
        )

        self.router.add_api_route(
            "/{module_id}",
            self._delete_module,
            methods=["DELETE"],
            summary="Delete module"
        )

        self.router.add_api_route(
            "/{module_id}/path",
            self._update_module_path,
            methods=["PUT"],
            summary="Update module path"
        )

        self.router.add_api_route(
            "/project/{project_id}/list",
            self._get_project_modules,
            methods=["GET"],
            response_model=List[ModuleResponse],
            summary="Get all modules in a project"
        )

        self.router.add_api_route(
            "/relation",
            self._create_relation,
            methods=["POST"],
            summary="Create module relation"
        )

        self.router.add_api_route(
            "/relation/{source_id}/{target_id}/{relation_type}",
            self._delete_relation,
            methods=["DELETE"],
            summary="Delete module relation"
        )

        self.router.add_api_route(
            "/graph",
            self.get_module_graph,
            methods=["GET"],
            response_model=ModuleGraphResponse,
            summary="Get module graph"
        )

        self.router.add_api_route(
            "/{module_id}/connections",
            self.get_module_connections,
            methods=["GET"],
            response_model=List[ModuleResponse],
            summary="Get modules with connection relation to this module"
        )

        self.router.add_api_route(
            "/{module_id}/context",
            self.get_module_context,
            methods=["GET"],
            response_model=List[ModuleResponse],
            summary="Get modules with context relation to this module"
        )


        self.router.add_api_route(
            "/{module_id}/name",
            self._update_module_name,
            methods=["PUT"],
            response_model=ModuleResponse,
            summary="Update module name"
        )

        self.router.add_api_route(
            "/{module_id}/env",
            self._update_module_env_var,
            methods=["PUT"],
            response_model=ModuleResponse,
            summary="Update module environment variable"
        )


        self.router.add_api_route(
            "/relation/{source_id}/{target_id}/{relation_type}/description",
            self._update_relation_description,
            methods=["PUT"],
            summary="Update relation description"
        )

================
File: engine/src/engine/apis/project.py
================
from typing import List

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel

from engine.services.core.project import ProjectError, ProjectMetadata, ProjectService


class CreateProjectRequest(BaseModel):
    name: str

class ProjectResponse(BaseModel):
    id: str
    name: str
    created_at: str

    @classmethod
    def from_metadata(cls, metadata: ProjectMetadata) -> "ProjectResponse":
        return cls(
            id=metadata.id,
            name=metadata.name,
            created_at=metadata.created_at
        )

class ProjectRouter:
    """FastAPI router for project management"""

    def __init__(
        self,
        project_service: ProjectService,
        prefix: str = "/project"
    ):
        """
        Initialize project router
        
        Args:
            project_service: Project service
            prefix: URL prefix for routes
        """
        self.service = project_service
        self.router = APIRouter(prefix=prefix, tags=["project"])
        self._setup_routes()

    async def _create_project(self, request: CreateProjectRequest):
        """Create project"""
        try:
            metadata = self.service.create_project(request.name)
            return ProjectResponse.from_metadata(metadata)
        except ProjectError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _get_project(self, project_id: str):
        """Get project by ID"""
        try:
            metadata = self.service.get_project(project_id)
            if not metadata:
                raise HTTPException(status_code=404, detail="Project not found")
            return ProjectResponse.from_metadata(metadata)
        except ProjectError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _get_all_projects(self):
        """Get all projects"""
        try:
            projects = self.service.get_all_projects()
            return [ProjectResponse.from_metadata(p) for p in projects]
        except ProjectError as e:
            raise HTTPException(status_code=500, detail=str(e))


    def _setup_routes(self):
        """Setup all routes"""
        self.router.add_api_route(
            "",
            self._create_project,
            methods=["POST"],
            response_model=ProjectResponse,
            summary="Create project"
        )

        self.router.add_api_route(
            "/{project_id}",
            self._get_project,
            methods=["GET"],
            response_model=ProjectResponse,
            summary="Get project by ID"
        )

        self.router.add_api_route(
            "",
            self._get_all_projects,
            methods=["GET"],
            response_model=List[ProjectResponse],
            summary="Get all projects"
        )

================
File: engine/src/engine/apis/repository.py
================
from typing import List, Optional

from fastapi import APIRouter, File, Form, HTTPException, UploadFile
from fastapi.responses import JSONResponse
from pydantic import BaseModel

from engine.services.storage.repository import (
    CommitInfo,
    RepoExistsError,
    RepoNotFoundError,
    RepoService,
    RepositoryError,
)
from engine.utils.file import extract_zip, is_safe_path


# Pydantic models
class FileUpdateRequest(BaseModel):
    content: str

class CommitRequest(BaseModel):
    commit_message: str
    author_name: Optional[str] = None
    author_email: Optional[str] = None

class MatchPositionResponse(BaseModel):
    line_number: int
    start_char: int
    end_char: int
    line_content: str
    score: float

class SearchResponse(BaseModel):
    file_path: str
    matches: List[MatchPositionResponse]
    total_matches: int
    file_score: float

class RepoCreationResponse(BaseModel):
    repo_name: str
    created_at: str
    status: str

class RepositoryRouter:
    """FastAPI router for repository management endpoints"""

    def __init__(
        self,
        repo_service: RepoService,
        prefix: str = "/repo"
    ):
        """
        Initialize repository router
        
        Args:
            repo_service: Repository service instance
            prefix: URL prefix for routes
        """
        self.service = repo_service
        self.router = APIRouter(prefix=prefix, tags=["repository"])
        self._setup_routes()

    async def _create_repo(
        self,
        repo_file: UploadFile = File(...),
        repo_name: str = Form(...)
    ):
        """Handle repository creation"""
        try:
            result = self.service.create_repository(
                repo_name=repo_name,
                content_file=repo_file.file,
                filename=repo_file.filename,
                extract_func=extract_zip  # You'll need to import this
            )
            return RepoCreationResponse(**result)

        except RepoExistsError as e:
            raise HTTPException(status_code=400, detail=str(e))
        except RepositoryError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _list_repos(self):
        """List all repositories"""
        try:
            repos = self.service.list_repositories()
            return {"repositories": repos}
        except RepositoryError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _list_repo_files(self, repo_name: str):
        """List repository files"""
        try:
            files = self.service.list_files(repo_name)
            return {"files": files}
        except RepoNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except RepositoryError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _delete_repo(self, repo_name: str):
        """Delete repository"""
        try:
            self.service.delete_repository(repo_name)
            return JSONResponse(
                content={
                    "status": "success",
                    "message": f"Repository {repo_name} deleted successfully"
                }
            )
        except RepoNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except RepositoryError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _commit_changes(
        self,
        repo_name: str,
        commit_data: CommitRequest
    ):
        """Handle repository commit"""
        try:
            commit_info = CommitInfo(
                commit_message=commit_data.commit_message,
                author_name=commit_data.author_name,
                author_email=commit_data.author_email
            )

            result = self.service.commit_changes(repo_name, commit_info)
            return JSONResponse(content=result)

        except RepoNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except RepositoryError as e:
            raise HTTPException(status_code=500, detail=str(e))

    async def _update_file(
        self,
        repo_name: str,
        file_path: str,
        update: FileUpdateRequest
    ):
        """Handle file update"""
        try:
            result = self.service.update_file(
                repo_name=repo_name,
                file_path=file_path,
                content=update.content,
                path_validator=is_safe_path  # You'll need to import this
            )
            return JSONResponse(content=result)

        except RepoNotFoundError as e:
            raise HTTPException(status_code=404, detail=str(e))
        except RepositoryError as e:
            raise HTTPException(status_code=500, detail=str(e))

    def _setup_routes(self):
        """Setup all routes"""
        self.router.add_api_route(
            "/create",
            self._create_repo,
            methods=["POST"],
            response_model=RepoCreationResponse,
            summary="Create new repository"
        )

        self.router.add_api_route(
            "/list",
            self._list_repos,
            methods=["GET"],
            summary="List all repositories"
        )

        self.router.add_api_route(
            "/{repo_name}/files",
            self._list_repo_files,
            methods=["GET"],
            summary="List repository files"
        )

        self.router.add_api_route(
            "/{repo_name}",
            self._delete_repo,
            methods=["DELETE"],
            summary="Delete repository"
        )

        self.router.add_api_route(
            "/{repo_name}/commit",
            self._commit_changes,
            methods=["POST"],
            summary="Commit changes"
        )

        self.router.add_api_route(
            "/{repo_name}/file",
            self._update_file,
            methods=["PUT"],
            summary="Update file"
        )

================
File: engine/src/engine/apis/resource.py
================
from typing import List

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session

from engine.services.storage.resource import Resource, ResourceError, ResourceService
from engine.db.session import get_db


class ResourceRouter:
    """FastAPI router for resource endpoints"""

    def __init__(
        self,
        resource_service: ResourceService,
        prefix: str = "/resource"
    ):
        self.service = resource_service
        self.router = APIRouter(prefix=prefix, tags=["resources"])
        self._setup_routes()

    async def _get_workspace_resources(self, module_id: str) -> List[Resource]:
        """Get workspace resources"""
        try:
            resources = self.service.get_workspace_resources(module_id)
            return resources
        except ResourceError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _get_documentation_resources(self, module_id: str) -> List[Resource]:
        """Get documentation resources"""
        try:
            resources = self.service.get_documentation_resources(module_id)
            return resources
        except ResourceError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _get_specification_resources(self, module_id: str) -> List[Resource]:
        """Get specification resources"""
        try:
            resources = self.service.get_specification_resources(module_id)
            return resources
        except ResourceError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _generate_manifest(
        self,
        module_id: str,
        db: Session = Depends(get_db)
    ) -> Resource:
        """Generate a new work manifest"""
        try:
            manifest = await self.service.generate_work_manifest(module_id, db)
            return manifest
        except ResourceError as e:
            raise HTTPException(status_code=400, detail=str(e))

    async def _get_manifests(
        self,
        module_id: str,
        db: Session = Depends(get_db)
    ) -> List[Resource]:
        """Get all work manifests"""
        try:
            manifests = self.service.get_manifest_resources(module_id, db)
            return manifests
        except ResourceError as e:
            raise HTTPException(status_code=400, detail=str(e))

    def _setup_routes(self):
        """Setup all routes"""

        # Add manifest routes
        self.router.add_api_route(
            "/{module_id}/manifest",
            self._generate_manifest,
            methods=["GET"],
            response_model=Resource,
            summary="Generate new work manifest"
        )

        self.router.add_api_route(
            "/{module_id}/manifests",
            self._get_manifests,
            methods=["GET"],
            response_model=List[Resource],
            summary="Get all work manifests"
        )
        self.router.add_api_route(
            "/{module_id}/workspace",
            self._get_workspace_resources,
            methods=["GET"],
            response_model=List[Resource],
            summary="Get workspace resources"
        )

        self.router.add_api_route(
            "/{module_id}/documentation",
            self._get_documentation_resources,
            methods=["GET"],
            response_model=List[Resource],
            summary="Get documentation resources"
        )

        self.router.add_api_route(
            "/{module_id}/specification",
            self._get_specification_resources,
            methods=["GET"],
            response_model=List[Resource],
            summary="Get specification resources"
        )

================
File: engine/src/engine/apis/workflow.py
================
from datetime import datetime, UTC
from typing import Any, Dict, List, Optional
import uuid

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel
from sqlalchemy import select, insert

from engine.db.models import ChatHistory
from engine.db.session import SessionLocal
from engine.services.execution.workflow import WorkflowError, WorkflowService
from engine.config.workflow_config import WorkflowConfigService
from engine.utils.yaml import YAMLUtils
from loguru import logger
from engine.services.execution.state import StateService

class ExecuteStepRequest(BaseModel):
    """Request body for executing a workflow step"""
    parameters: Dict[str, Any] = {}

class CreateSessionResponse(BaseModel):
    """Response for session creation"""
    session_id: str
    timestamp: str

class WorkflowRouter:
    """FastAPI router for workflow operations"""
    
    def __init__(
        self,
        workflow_service: WorkflowService,
        prefix: str = "/workflow"
    ):
        self.service = workflow_service
        self.config_service = WorkflowConfigService()
        self.stage_state_service = StateService()
        self.router = APIRouter(prefix=prefix, tags=["workflow"])
        self._setup_routes()
    
    async def _create_session(
        self,
        module_id: str = Query(..., description="Module ID"),
        workflow: str = Query(..., description="Workflow type")
    ) -> CreateSessionResponse:
        """Create a new chat session"""
        try:
            session_id = str(uuid.uuid4())
            timestamp = datetime.now(UTC)
            
            # Add an initial system message to make the session appear in the list
            with SessionLocal() as db:
                stmt = insert(ChatHistory).values(
                    module_id=module_id,
                    section=workflow,
                    role="system",
                    content="Session created",
                    timestamp=timestamp,
                    message_type="text",
                    session_id=session_id
                )
                db.execute(stmt)
                db.commit()
            
            return CreateSessionResponse(
                session_id=session_id,
                timestamp=timestamp.isoformat()
            )
        except Exception as e:
            logger.error(f"Failed to create session: {str(e)}")
            raise HTTPException(status_code=400, detail=str(e))
    
    async def _get_workflows(
        self,
        module_id: str = Query(..., description="Module ID")
    ) -> List[Dict[str, Any]]:
        """
        Get all available workflows and their configurations for a module.
        
        This endpoint provides a comprehensive view of all workflows available for a module, including:
        - Base workflow configuration (type, agent, instructions, prerequisites)
        - Module-specific customizations from kit.yaml
        - Workflow metadata (instructions, steps, requirements)
        - Default available actions with their schemas
        
        Returns:
            List[Dict[str, Any]]: List of workflow configurations where each contains:
                - workflow_type: The type of workflow (initialize, maintain, etc)
                - agent_type: The type of agent that handles this workflow
                - base_instructions: Default instructions for this workflow
                - prerequisites: List of workflows that must be completed first
                - module_id: ID of the module
                - metadata: Workflow metadata including instructions and available steps
                - default_actions: List of actions available by default
                - kit_config: Module-specific configuration from kit.yaml
        """
        try:
            # Get module path to read kit.yaml
            module_path = self.service.module_service.get_module_path(module_id)
            kit = YAMLUtils.read_kit(module_path)
            
            # Log kit workflows for debugging
            logger.info(f"Kit workflows for module {module_id}:\n{kit.get('workflows', {})}")
            
            # Process each workflow
            workflow_configs = []
            
            for workflow_type in self.config_service.default_configs:
                try:
                    # Get kit workflow config first and ensure actions list
                    kit_workflow = kit.get('workflows', {}).get(workflow_type, {})
                    # Default empty actions list if not provided
                    if 'actions' not in kit_workflow:
                        kit_workflow['actions'] = []
                        
                    logger.info(f"""Processing workflow {workflow_type}:
                    Kit config: {kit_workflow}
                    """)
                    
                    # Get base config
                    config = self.config_service.get_workflow_config(
                        workflow_type=workflow_type,
                        kit_config=kit_workflow
                    )
                    
                    # Get workflow metadata
                    metadata = self.service.get_workflow_metadata(
                        module_id=module_id,
                        workflow=workflow_type
                    )
                    
                    # Get default actions
                    default_actions = []
                    for action in config.default_actions:
                        default_actions.append({
                            "name": action.name,
                            "description": action.description,
                            "schema": action.schema
                        })
                    
                    # Get workflow completion status
                    is_completed = self.stage_state_service.get_workflow_status(
                        module_id=module_id,
                        workflow_type=workflow_type
                    )
                    
                    # Only append if everything loaded successfully
                    workflow_configs.append({
                        "workflow_type": config.workflow_type,
                        "agent_type": config.agent_type,
                        "base_instructions": config.base_instructions,
                        "module_id": module_id,
                        "metadata": metadata,
                        "default_actions": default_actions,
                        "kit_config": kit_workflow,
                        "is_completed": is_completed,
                        "allow_multiple": config.allow_multiple
                    })
                    
                except Exception as e:
                    # Log error but continue processing other workflows
                    logger.error(f"""Failed to load workflow {workflow_type}:
                    Error: {str(e)}
                    Module: {module_id}
                    Kit config: {kit.get('workflows', {}).get(workflow_type)}
                    """)
                    # Skip this workflow rather than including with error
            
            return workflow_configs
            
        except Exception as e:
            logger.error(f"Failed to get workflows for module {module_id}: {str(e)}")
            raise HTTPException(status_code=400, detail=str(e))

    async def _get_workflow_metadata(
        self,
        module_id: str = Query(..., description="Module ID"),
        workflow: str = Query(..., description="Workflow (initialize/maintain/remove/edit)"),
        session_id: Optional[str] = Query(None, description="Optional session ID")
    ) -> Dict[str, Any]:
        """
        Get workflow metadata including instructions and steps.

        This endpoint provides detailed information about a specific workflow, including:
        - Workflow instructions from the module's instructions directory
        - Available steps/actions with their metadata
        - Module requirements needed for the workflow
        
        Returns:
            Dict[str, Any]: Workflow metadata containing:
                - instructions: String containing workflow instructions
                - actions: List of available steps with metadata
                - requirements: List of module requirements
        """
        try:
            metadata = self.service.get_workflow_metadata(
                module_id=module_id,
                workflow=workflow
            )
            return metadata
        except WorkflowError as e:
            logger.error(f"Failed to get metadata for workflow {workflow} in module {module_id}: {str(e)}")
            raise HTTPException(status_code=400, detail=str(e))

    async def _execute_workflow_step(
        self,
        module_id: str = Query(..., description="Module ID"),
        workflow: str = Query(..., description="Workflow (initialize/maintain/remove/edit)"),
        step_name: str = Query(..., description="Name of the step to execute"),
        request: ExecuteStepRequest = None,
        session_id: Optional[str] = Query(None, description="Optional session ID")
    ) -> Dict[str, Any]:
        """
        Execute a workflow step with provided parameters.

        This endpoint executes a specific step in a workflow. The step must be available
        in the workflow's configuration. Parameters for the step can be provided in the
        request body.

        If no parameters are provided, an empty parameter set will be used.
        
        Returns:
            Dict[str, Any]: Execution result containing:
                - result: The result of the execution
                May also include error details if execution fails
        """
        try:
            if request is None:
                request = ExecuteStepRequest()

            result = self.service.execute_workflow_action(
                action_name=step_name,
                parameters=request.parameters
            )
            return {"result": result}
        except WorkflowError as e:
            logger.error(f"Failed to execute step {step_name} in workflow {workflow} for module {module_id}: {str(e)}")
            raise HTTPException(status_code=400, detail=str(e))

    async def _get_workflow_sessions(
        self,
        module_id: str = Query(..., description="Module ID"),
        workflow: str = Query(..., description="Workflow type")
    ) -> List[Dict[str, Any]]:
        """
        Get all available sessions for a workflow.
        
        Returns a list of sessions including their IDs and latest messages.
        """
        try:
            with SessionLocal() as db:
                # Get all unique session IDs for this module/workflow
                stmt = (
                    select(ChatHistory.session_id)
                    .distinct()
                    .where(
                        ChatHistory.module_id == module_id,
                        ChatHistory.section == workflow
                    )
                )
                sessions = db.execute(stmt).scalars().all()
                
                # Get latest message for each session
                result = []
                for session_id in sessions:
                    latest_msg = (
                        db.query(ChatHistory)
                        .filter(
                            ChatHistory.module_id == module_id,
                            ChatHistory.section == workflow,
                            ChatHistory.session_id == session_id
                        )
                        .order_by(ChatHistory.timestamp.desc())
                        .first()
                    )
                    
                    if latest_msg:
                        result.append({
                            "session_id": session_id,
                            "last_message": latest_msg.content,
                            "last_updated": latest_msg.timestamp.isoformat(),
                            "is_default": session_id == str(uuid.UUID(int=0))
                        })
                
                return sorted(result, key=lambda x: x["last_updated"], reverse=True)
                
        except Exception as e:
            logger.error(f"Failed to get workflow sessions: {str(e)}")
            raise HTTPException(status_code=400, detail=str(e))

    def _setup_routes(self):
        """Setup all routes"""
        self.router.add_api_route(
            "/session/create",
            self._create_session,
            methods=["POST"],
            response_model=CreateSessionResponse,
            summary="Create a new chat session",
            description="Create a new chat session for a workflow"
        )

        self.router.add_api_route(
            "/metadata",
            self._get_workflow_metadata,
            methods=["GET"],
            response_model=Dict[str, Any],
            summary="Get detailed metadata for a specific workflow",
            description="Get workflow-specific information including instructions, available steps, and requirements"
        )

        self.router.add_api_route(
            "/sessions",
            self._get_workflow_sessions,
            methods=["GET"],
            response_model=List[Dict[str, Any]],
            summary="Get all available sessions for a workflow",
            description="Get list of chat sessions including their IDs and latest messages"
        )

        self.router.add_api_route(
            "/execute",
            self._execute_workflow_step,
            methods=["POST"],
            response_model=Dict[str, Any],
            summary="Execute a specific step in a workflow",
            description="Execute a workflow step with optional parameters provided in the request body"
        )

        self.router.add_api_route(
            "/workflows",
            self._get_workflows,
            methods=["GET"],
            response_model=List[Dict[str, Any]],
            summary="Get all available workflows for a module",
            description="Get comprehensive configuration for all workflows including base config, metadata, and module customizations"
        )

================
File: engine/src/engine/base/agents/__init__.py
================
from .tasker import TaskerAgent

__all__ = [
    TaskerAgent
]

================
File: engine/src/engine/base/agents/tasker.py
================
from typing import Dict, List, Any, Optional, Tuple
import json
from engine.services.agents.base_agent import BaseAgent, AgentContext
from engine.services.execution.workflow import WorkflowMetadataResult
from loguru import logger

TASKER_INSTRUCTIONS = """You are a task execution agent responsible for managing workflow operations.

When handling user requests:

1. For tool executions:
- Explain your plan before executing tools
- Execute tools one at a time
- After each tool:
    - Explain the results
    - If more tools are needed, explain what you'll do next
- Use previous results to inform next actions

2. Tool execution guidelines:
- Execute sequentially when:
    - Results from one tool affect another
    - Actions need specific order
- Only use parallel execution for independent actions

3. Communication:
- Keep user informed of actions
- Explain reasoning for tool choices
- Provide clear result summaries
- When asking for user input, use XML prompts format

4. Task Management:
- Process and execute workflow tasks
- Handle tool dependencies and execution order
- Track task completion status
- Provide progress updates
- Handle errors and retries"""

class TaskerAgent(BaseAgent):
    """Agent for handling task-based workflows"""

    @property
    def agent_type(self) -> str:
        return "tasker"

    async def process_workflow(
        self,
        context: AgentContext,
        workflow_data: WorkflowMetadataResult,
        responses: Optional[List[Tuple[str, str, str]]] = None
    ) -> Dict[str, Any]:
        """Process a workflow request"""
        try:

            # response processing
            if responses:
                for response in responses:
                    if response[0] == "code_change":
                        # code change response
                        pass
                    elif response[0] == "user_prompt":
                        # user prompt response
                        pass
                    else:
                        logger.warning(f"Unknown response type: {response[1]}")









            # Build initial context with workflow-specific instructions
            instructions = TASKER_INSTRUCTIONS





            # Add workflow-specific instructions if available
            if workflow_data.instructions:
                instructions += f"\n\n##Workflow Instructions:\n{workflow_data.instructions}"

            # Build context with combined instructions
            system_prompt, _ = await self.build_context(
                agent_instructions=instructions,
                required_xml_elements=["user_prompt"]
            )
            

            # Initial response based on user input
            response = await self.chat_completion(
                messages=[{"role": "user", "content": context.user_input}]
            )

            

            assistant_message = response.choices[0].message


            return {
                "response": assistant_message.content if assistant_message.content else "",
                "results": []
            }

        except Exception as e:
            logger.error(f"Error in process_workflow: {str(e)}")
            raise

================
File: engine/src/engine/config/context.py
================
from enum import Enum
from typing import Union, Dict, Any

class Role(Enum):
    USER = "user"
    ASSISTANT = "assistant"
    SYSTEM = "system"

class Context(str):
    """
    A string subclass that maintains context for AI chat messages.
    Behaves exactly like a string but with additional role information.
    """
    
    def __new__(cls, content: str, role: Union[Role, str] = Role.USER):
        # Create a new string instance
        instance = super().__new__(cls, content)
        
        # Convert string type to enum if necessary
        if isinstance(role, str):
            try:
                role = Role(role.lower())
            except ValueError:
                raise ValueError(f"Invalid role: {role}. Must be one of: {[r.value for r in Role]}")
        
        # Set the role
        instance._role = role
        return instance
    
    @property
    def role(self) -> Role:
        """Get the role."""
        return self._role
    
    def to_message(self) -> Dict[str, str]:
        """
        Convert the Context to a message format compatible with LiteLLM.
        Returns a dict with 'role' and 'content' keys.
        """
        return {
            "role": self.role.value,
            "content": str(self)
        }
    
    @classmethod
    def from_message(cls, message: Dict[str, str]) -> 'Context':
        """
        Create a Context instance from a LiteLLM-compatible message dict.
        
        Args:
            message: Dict containing 'role' and 'content' keys
        
        Returns:
            Context instance
        """
        if not isinstance(message, dict):
            raise ValueError("Message must be a dictionary")
        
        required_keys = {'role', 'content'}
        if not all(key in message for key in required_keys):
            raise ValueError(f"Message must contain keys: {required_keys}")
            
        return cls(message['content'], message['role'])
    
    def __add__(self, other):
        """
        Implement string concatenation while preserving role.
        Returns a new Context with the same role as the left operand.
        """
        if isinstance(other, (str, Context)):
            return Context(super().__add__(other), self.role)
        return NotImplemented
    
    def __repr__(self):
        return f'Context("{super().__str__()}", {self.role.value})'
    
    def __eq__(self, other):
        """
        Equal if both content and role match.
        """
        if isinstance(other, Context):
            return super().__eq__(other) and self.role == other.role
        return super().__eq__(other)

# Example usage and tests
# if __name__ == "__main__":
#     # Basic creation and role checking
#     user_ctx = Context("Hello!", Role.USER)
#     assert isinstance(user_ctx, str)
#     assert user_ctx.role == Role.USER
#     assert user_ctx == "Hello!"
    
#     # Test message conversion
#     message = user_ctx.to_message()
#     assert message == {"role": "user", "content": "Hello!"}
    
#     # Test creating from message
#     new_ctx = Context.from_message({"role": "assistant", "content": "Hi there!"})
#     assert new_ctx.role == Role.ASSISTANT
#     assert str(new_ctx) == "Hi there!"
    
#     # String operations
#     assistant_ctx = Context("How can I help?", "assistant")
#     combined = user_ctx + " " + assistant_ctx
#     assert isinstance(combined, Context)
#     assert combined.role == Role.USER  # Takes role from left operand
#     assert combined == "Hello! How can I help?"
    
#     # String methods work as expected
#     upper_ctx = user_ctx.upper()
#     assert isinstance(upper_ctx, str)  # Note: Built-in string methods return regular strings
#     assert upper_ctx == "HELLO!"
    
#     # Error handling
#     try:
#         invalid_ctx = Context("Test", "invalid_role")
#         assert False, "Should have raised ValueError"
#     except ValueError:
#         pass
        
#     # Test invalid message format
#     try:
#         Context.from_message({"invalid": "format"})
#         assert False, "Should have raised ValueError"
#     except ValueError:
#         pass
    
#     print("All tests passed!")

================
File: engine/src/engine/config/workflow_config.py
================
from dataclasses import dataclass, field
from typing import Callable, Dict, List, Optional, Set, Any

from engine.services.execution.state import StateService

@dataclass
class WorkflowAction:
    """Action configuration for a workflow"""
    name: str
    description: str
    schema: Dict[str, Any]
    function: Callable[..., Any]

@dataclass
class WorkflowConfig:
    """Complete configuration for a workflow"""
    workflow_type: str
    agent_type: str  # "tasker" or "coder"
    base_instructions: str  # Default instructions always included
    default_actions: List[WorkflowAction] = field(default_factory=list)  # Default actions available to this workflow
    allow_multiple: bool = False  # Whether multiple chat sessions are allowed


class WorkflowConfigurations:
    """Central configuration for all core workflows"""
    
    @staticmethod
    def get_default_configs() -> Dict[str, WorkflowConfig]:
        """Get default configurations for all workflows"""
        return {
            "initialize": WorkflowConfig(
                workflow_type="initialize",
                agent_type="", # Will be overridden by kit.yaml
                base_instructions="""Initialize the module and verify all requirements are met.
                Follow these steps:
                1. Verify environment setup
                2. Install dependencies
                3. Validate initial configuration""",
                allow_multiple=False
            ),
            
            "maintain": WorkflowConfig(
                workflow_type="maintain",
                agent_type="", # Will be overridden by kit.yaml
                base_instructions="""Monitor and maintain the module's operation.
                Keep the module healthy and running smoothly.""",
                allow_multiple=True
            ),
            
            "remove": WorkflowConfig(
                workflow_type="remove",
                agent_type="", # Will be overridden by kit.yaml
                base_instructions="""Safely remove the module and clean up resources.
                Ensure all dependencies and resources are properly handled.""",
                allow_multiple=False
            ),
            
            "edit": WorkflowConfig(
                workflow_type="edit",
                agent_type="", # Will be overridden by kit.yaml
                base_instructions="""Make code edits with minimal impact.
                Always explain changes and ensure stability.""",
                allow_multiple=True
            )
        }
    @staticmethod
    def get_default_actions(stage_state_service: StateService) -> Dict[str, List[WorkflowAction]]:
        return {
            "initialize": [],
            "remove": []
    }

    
class WorkflowConfigService:
    """Service for managing workflow configurations"""
    
    def __init__(self):
        self.default_configs = WorkflowConfigurations.get_default_configs()
        stage_state_service = StateService()
        self.default_actions: Dict[str, List[WorkflowAction]] = WorkflowConfigurations.get_default_actions(stage_state_service)
    
    def get_workflow_config(
        self, 
        workflow_type: str,
        kit_config: Optional[Dict] = None
    ) -> WorkflowConfig:
        """Get workflow configuration from defaults and kit.yaml"""
        if workflow_type not in self.default_configs:
            raise ValueError(f"Unknown workflow type: {workflow_type}")
            
        base_config = self.default_configs[workflow_type]
        default_actions = self.default_actions.get(workflow_type, [])

        # Start with base config
        config = WorkflowConfig(
            workflow_type=workflow_type,
            agent_type=base_config.agent_type,
            base_instructions=base_config.base_instructions,
            default_actions=default_actions,
            allow_multiple=base_config.allow_multiple
        )
        
        if kit_config:
            # Update from kit.yaml
            if "workflows" in kit_config:
                workflow_config = kit_config["workflows"].get(workflow_type, {})
                
                # Get workflow-specific agent
                agent = workflow_config.get("agent")
                if not agent:
                    # Try default agent from workflows root
                    agent = kit_config["workflows"].get("agent")
                    
                if agent:
                    # Validate agent exists in kit config
                    if agent not in {a["name"] for a in kit_config.get("agents", [])}:
                        raise ValueError(f"Agent '{agent}' not found in kit.yaml agents")
                    config.agent_type = agent
                
                # Merge instructions
                if "instruction" in workflow_config:
                    config.base_instructions = f"{config.base_instructions}\n\n{workflow_config['instruction']}"
                    
                # Allow workflow-specific multiple sessions
                if "allow_multiple" in workflow_config:
                    config.allow_multiple = workflow_config["allow_multiple"]
            
        return config

================
File: engine/src/engine/db/migrations/versions/04b136490796_add_realtion_type_tor_primary_key.py
================
"""add realtion_type tor primary key

Revision ID: 04b136490796
Revises: 1b860f044ac1
Create Date: 2025-01-31 22:02:19.998801

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '04b136490796'
down_revision: Union[str, None] = '1b860f044ac1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/159009b62982_cascade_delte_for_module.py
================
"""cascade delte for module

Revision ID: 159009b62982
Revises: 1d66c6f2b36b
Create Date: 2025-01-29 20:32:08.822956

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '159009b62982'
down_revision: Union[str, None] = '1d66c6f2b36b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/1b860f044ac1_add_cascade_delete_for_module.py
================
"""add cascade delete for module

Revision ID: 1b860f044ac1
Revises: 159009b62982
Create Date: 2025-01-29 20:34:42.928467

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1b860f044ac1'
down_revision: Union[str, None] = '159009b62982'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('agent_status_module_id_fkey', 'agent_status', type_='foreignkey')
    op.create_foreign_key(None, 'agent_status', 'modules', ['module_id'], ['module_id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'agent_status', type_='foreignkey')
    op.create_foreign_key('agent_status_module_id_fkey', 'agent_status', 'modules', ['module_id'], ['module_id'])
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/1d66c6f2b36b_add_relation_description.py
================
"""add_relation_description

Revision ID: 1d66c6f2b36b
Revises: 51944779d9a5
Create Date: 2025-01-26 20:10:15.063276

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1d66c6f2b36b'
down_revision: Union[str, None] = '51944779d9a5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('module_relations', sa.Column('description', sa.Text(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('module_relations', 'description')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/2cf6212c3cf7_add_initial_schema.py
================
"""add initial schema

Revision ID: 2cf6212c3cf7
Revises: b14ec2d2c63e
Create Date: 2025-01-25 06:26:34.683537

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2cf6212c3cf7'
down_revision: Union[str, None] = 'b14ec2d2c63e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key')
    )
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/4f8cb01d9da8_add_session_id_to_workflows.py
================
"""add session_id to workflows

Revision ID: 4f8cb01d9da8
Revises: 6948d3231316
Create Date: 2025-02-07 14:16:19.870929

"""
from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa
import uuid


# revision identifiers, used by Alembic.
revision: str = '4f8cb01d9da8'
down_revision: Union[str, None] = '6948d3231316'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Add column as nullable first
    op.add_column('chat_history', sa.Column('session_id', sa.String(), nullable=True))
    
    # Update existing rows with default value
    op.execute("UPDATE chat_history SET session_id = '00000000-0000-0000-0000-000000000000'")
    
    # Make column not nullable
    op.alter_column('chat_history', 'session_id',
                     existing_type=sa.String(),
                     nullable=False)
    
    # Update constraints
    op.drop_constraint('chat_history_module_id_section_timestamp_key', 'chat_history', type_='unique')
    op.create_unique_constraint(None, 'chat_history', ['module_id', 'section', 'timestamp', 'session_id'])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'chat_history', type_='unique')
    op.create_unique_constraint('chat_history_module_id_section_timestamp_key', 'chat_history', ['module_id', 'section', 'timestamp'])
    op.drop_column('chat_history', 'session_id')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/51944779d9a5_add_relation_description.py
================
"""add_relation_description

Revision ID: 51944779d9a5
Revises: 80a345d4c6d4
Create Date: 2025-01-26 20:06:14.484846

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '51944779d9a5'
down_revision: Union[str, None] = '80a345d4c6d4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    pass


def downgrade() -> None:
    pass

================
File: engine/src/engine/db/migrations/versions/53bcfdb9ee4d_create_initial_tables.py
================
"""create initial tables

Revision ID: 53bcfdb9ee4d
Revises: 2cf6212c3cf7
Create Date: 2025-01-25 06:30:59.371071

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '53bcfdb9ee4d'
down_revision: Union[str, None] = '2cf6212c3cf7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/6948d3231316_add_work_manifests_table.py
================
"""add_work_manifests_table

Revision ID: 6948d3231316
Revises: a0453eafb61d
Create Date: 2025-02-04 14:54:36.727892

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6948d3231316'
down_revision: Union[str, None] = 'a0453eafb61d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('work_manifests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('module_id', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['modules.module_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('work_manifests')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/6fc6692b69f7_change_tool_callstype.py
================
"""change tool_callstype

Revision ID: 6fc6692b69f7
Revises: dde76d5a3ca7
Create Date: 2025-02-13 17:50:57.922259

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6fc6692b69f7'
down_revision: Union[str, None] = 'dde76d5a3ca7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/77139f76018f_add_realtion_primary_key.py
================
"""add realtion primary key

Revision ID: 77139f76018f
Revises: 04b136490796
Create Date: 2025-01-31 22:11:05.467367

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '77139f76018f'
down_revision: Union[str, None] = '04b136490796'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/7e0a1909e829_add_module_name_field.py
================
"""add module_name field

Revision ID: 7e0a1909e829
Revises: 8e1b1c958c84
Create Date: 2025-01-25 16:18:30.065477

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7e0a1909e829'
down_revision: Union[str, None] = '8e1b1c958c84'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('modules', sa.Column('module_name', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('modules', 'module_name')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/80a345d4c6d4_add_relation_description.py
================
"""add_relation_description

Revision ID: 80a345d4c6d4
Revises: 7e0a1909e829
Create Date: 2025-01-26 19:38:12.116187

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '80a345d4c6d4'
down_revision: Union[str, None] = '7e0a1909e829'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    pass


def downgrade() -> None:
    pass

================
File: engine/src/engine/db/migrations/versions/82c5c646edb2_make_content_optional.py
================
"""make content optional

Revision ID: 82c5c646edb2
Revises: c10ed21756d1
Create Date: 2025-02-13 18:15:42.440317

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '82c5c646edb2'
down_revision: Union[str, None] = 'c10ed21756d1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('chat_history', 'content',
               existing_type=sa.TEXT(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('chat_history', 'content',
               existing_type=sa.TEXT(),
               nullable=False)
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/8e1b1c958c84_create_initial_tables.py
================
"""create initial tables

Revision ID: 8e1b1c958c84
Revises: a2b0c771ef91
Create Date: 2025-01-25 06:37:37.607844

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8e1b1c958c84'
down_revision: Union[str, None] = 'a2b0c771ef91'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chat_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('module_id', sa.String(), nullable=False),
    sa.Column('section', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('message_type', sa.String(), nullable=False),
    sa.Column('tool_data', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('module_id', 'section', 'timestamp')
    )
    op.create_index('idx_module_section', 'chat_history', ['module_id', 'section'], unique=False)
    op.create_table('modules',
    sa.Column('module_id', sa.String(), nullable=False),
    sa.Column('kit_id', sa.String(), nullable=False),
    sa.Column('owner', sa.String(), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('env_vars', sa.JSON(), nullable=False),
    sa.Column('repo_name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('module_id')
    )
    op.create_table('projects',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('agent_status',
    sa.Column('module_id', sa.String(), nullable=False),
    sa.Column('stage', sa.Enum('INITIALIZE', 'MAINTAIN', 'REMOVE', name='agent_stage'), nullable=False),
    sa.Column('state', sa.Enum('STANDBY', 'EXECUTING', name='agent_state'), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['modules.module_id'], ),
    sa.PrimaryKeyConstraint('module_id')
    )
    op.create_table('module_relations',
    sa.Column('source_id', sa.String(), nullable=False),
    sa.Column('target_id', sa.String(), nullable=False),
    sa.Column('relation_type', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['source_id'], ['modules.module_id'], ),
    sa.ForeignKeyConstraint(['target_id'], ['modules.module_id'], ),
    sa.PrimaryKeyConstraint('source_id', 'target_id')
    )
    op.create_table('project_module_mappings',
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('module_id', sa.String(), nullable=False),
    sa.Column('path', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['modules.module_id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('project_id', 'module_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('project_module_mappings')
    op.drop_table('module_relations')
    op.drop_table('agent_status')
    op.drop_table('projects')
    op.drop_table('modules')
    op.drop_index('idx_module_section', table_name='chat_history')
    op.drop_table('chat_history')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/a0453eafb61d_add_workfloe_statuses.py
================
"""add workfloe statuses

Revision ID: a0453eafb61d
Revises: b66afe5185f9
Create Date: 2025-02-01 00:40:31.948711

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a0453eafb61d'
down_revision: Union[str, None] = 'b66afe5185f9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('workflow_status',
    sa.Column('module_id', sa.String(), nullable=False),
    sa.Column('workflow_type', sa.String(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['modules.module_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('module_id', 'workflow_type')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('workflow_status')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/a2b0c771ef91_create_initial_tables.py
================
"""create initial tables

Revision ID: a2b0c771ef91
Revises: 53bcfdb9ee4d
Create Date: 2025-01-25 06:36:03.152810

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a2b0c771ef91'
down_revision: Union[str, None] = '53bcfdb9ee4d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/b14ec2d2c63e_create_users_table.py
================
"""Create users table

Revision ID: b14ec2d2c63e
Revises: 
Create Date: 2025-01-25 05:46:03.031183

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b14ec2d2c63e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/b3c6f4e02985_add_tool_call_id_and_name_to_chat_.py
================
"""add tool_call_id and name to chat history

Revision ID: b3c6f4e02985
Revises: 4f8cb01d9da8
Create Date: 2025-02-13 17:30:16.828564

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b3c6f4e02985'
down_revision: Union[str, None] = '4f8cb01d9da8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('chat_history', sa.Column('tool_call_id', sa.String(), nullable=True))
    op.add_column('chat_history', sa.Column('name', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('chat_history', 'name')
    op.drop_column('chat_history', 'tool_call_id')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/b66afe5185f9_add_realtion_primary_key.py
================
"""add realtion primary key

Revision ID: b66afe5185f9
Revises: 77139f76018f
Create Date: 2025-01-31 22:13:18.191155

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b66afe5185f9'
down_revision: Union[str, None] = '77139f76018f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Drop existing primary key
    op.drop_constraint('module_relations_pkey', 'module_relations', type_='primary')
    
    # Add new composite primary key
    op.create_primary_key(
        'module_relations_pkey',
        'module_relations',
        ['source_id', 'target_id', 'relation_type']
    )

def downgrade() -> None:
    # Drop new primary key
    op.drop_constraint('module_relations_pkey', 'module_relations', type_='primary')
    
    # Restore original primary key
    op.create_primary_key(
        'module_relations_pkey',
        'module_relations',
        ['source_id', 'target_id']
    )

================
File: engine/src/engine/db/migrations/versions/c10ed21756d1_make_content_optional.py
================
"""make content optional

Revision ID: c10ed21756d1
Revises: 6fc6692b69f7
Create Date: 2025-02-13 18:14:02.071309

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c10ed21756d1'
down_revision: Union[str, None] = '6fc6692b69f7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/versions/dde76d5a3ca7_rename_tool_data.py
================
"""rename tool_data

Revision ID: dde76d5a3ca7
Revises: b3c6f4e02985
Create Date: 2025-02-13 17:48:41.850333

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dde76d5a3ca7'
down_revision: Union[str, None] = 'b3c6f4e02985'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('chat_history', sa.Column('tool_calls', sa.JSON(), nullable=True))
    op.drop_column('chat_history', 'tool_data')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('chat_history', sa.Column('tool_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_column('chat_history', 'tool_calls')
    # ### end Alembic commands ###

================
File: engine/src/engine/db/migrations/env.py
================
import os
import sys
from pathlib import Path
from logging.config import fileConfig

from dotenv import load_dotenv
from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context
load_dotenv()

# Add src to Python path
src_path = Path(__file__).parent.parent.parent.parent.parent / "src"
sys.path.append(str(src_path))

# Import your models
from engine.db.base import Base
from engine.db.models import *

# this is the Alembic Config object
config = context.config

# Interpret the config file for Python logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

target_metadata = Base.metadata

def run_migrations_offline() -> None:
    url = config.get_main_option("sqlalchemy.url", os.getenv("DATABASE_URL"))
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, 
            target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

================
File: engine/src/engine/db/migrations/README
================
Generic single-database configuration.

================
File: engine/src/engine/db/migrations/script.py.mako
================
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision: str = ${repr(up_revision)}
down_revision: Union[str, None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    ${downgrades if downgrades else "pass"}

================
File: engine/src/engine/db/base.py
================
from sqlalchemy.orm import declarative_base
from sqlalchemy import create_engine
import os
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = os.getenv(
    "DATABASE_URL"
)

engine = create_engine(DATABASE_URL)
Base = declarative_base()

================
File: engine/src/engine/db/models.py
================
from datetime import datetime, UTC
from typing import Any, Dict, List, Optional
import uuid

from sqlalchemy import JSON, Boolean, Column, DateTime, Enum, ForeignKey, Integer, PrimaryKeyConstraint, String, Text, UniqueConstraint, text
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship


from engine.db.base import Base

class Base(DeclarativeBase):
    pass

class WorkManifest(Base):
    """Stores AI-generated work manifests explaining module state"""
    __tablename__ = "work_manifests"
    
    id: Mapped[int] = mapped_column(primary_key=True)
    module_id: Mapped[str] = mapped_column(String, ForeignKey('modules.module_id', ondelete='CASCADE'), nullable=False)
    content: Mapped[str] = mapped_column(Text, nullable=False)
    timestamp: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=text('CURRENT_TIMESTAMP'))
    
    # Relationship
    module: Mapped["Module"] = relationship(back_populates="manifests")


# From chat_history table in agent.py
class ChatHistory(Base):
    __tablename__ = "chat_history"
    
    id: Mapped[int] = mapped_column(primary_key=True)
    module_id: Mapped[str] = mapped_column(String, nullable=False)
    section: Mapped[str] = mapped_column(String, nullable=False)
    role: Mapped[str] = mapped_column(String, nullable=False)
    content: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    timestamp: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    message_type: Mapped[str] = mapped_column(String, nullable=False, default="text")
    tool_calls: Mapped[Optional[List]] = mapped_column(JSON, nullable=True)
    session_id: Mapped[str] = mapped_column(String, nullable=False, default=lambda: str(uuid.UUID(int=0)))
    tool_call_id: Mapped[Optional[str]] = mapped_column(String, nullable=True)
    name: Mapped[Optional[str]] = mapped_column(String, nullable=True)
    
    __table_args__ = (
        UniqueConstraint('module_id', 'section', 'timestamp', 'session_id'),
    )

# From modules, project_module_mappings, and module_relations tables in module.py
class Module(Base):
    __tablename__ = "modules"
    
    module_id: Mapped[str] = mapped_column(String, primary_key=True)
    module_name: Mapped[Optional[str]] = mapped_column(String, nullable=True)
    kit_id: Mapped[str] = mapped_column(String, nullable=False)
    owner: Mapped[str] = mapped_column(String, nullable=False)
    version: Mapped[str] = mapped_column(String, nullable=False)
    created_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    env_vars: Mapped[Dict] = mapped_column(JSON, nullable=False)
    repo_name: Mapped[str] = mapped_column(String, nullable=False)
    
    # Updated relationships with cascade
    project_mappings: Mapped[List["ProjectModuleMapping"]] = relationship(
        back_populates="module",
        cascade="all, delete-orphan"
    )
    source_relations: Mapped[List["ModuleRelation"]] = relationship(
        back_populates="source_module",
        foreign_keys="ModuleRelation.source_id",
        cascade="all, delete-orphan"
    )
    target_relations: Mapped[List["ModuleRelation"]] = relationship(
        back_populates="target_module",
        foreign_keys="ModuleRelation.target_id",
        cascade="all, delete-orphan"
    )
    # Add agent_status relationship with cascade
    agent_status: Mapped["AgentStatus"] = relationship(
        back_populates="module",
        cascade="all, delete-orphan",
        uselist=False
    )

    workflow_statuses: Mapped[List["WorkflowStatus"]] = relationship(
        back_populates="module",
        cascade="all, delete-orphan"
    )
    
    manifests: Mapped[List["WorkManifest"]] = relationship(
        back_populates="module", 
        cascade="all, delete-orphan"
    )


class ProjectModuleMapping(Base):
    __tablename__ = "project_module_mappings"
    
    project_id: Mapped[str] = mapped_column(String, ForeignKey('projects.id'), primary_key=True)
    module_id: Mapped[str] = mapped_column(String, ForeignKey('modules.module_id'), primary_key=True)
    path: Mapped[str] = mapped_column(String, nullable=False)
    created_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    updated_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    
    # Relationships
    module: Mapped[Module] = relationship(back_populates="project_mappings")
    project: Mapped["Project"] = relationship(back_populates="module_mappings")

class ModuleRelation(Base):
    __tablename__ = "module_relations"
    
    source_id: Mapped[str] = mapped_column(String, ForeignKey('modules.module_id'), primary_key=True)
    target_id: Mapped[str] = mapped_column(String, ForeignKey('modules.module_id'), primary_key=True)
    relation_type: Mapped[str] = mapped_column(String, primary_key=True)
    created_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    description: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    # Explicitly define primary key constraint
    __table_args__ = (
        PrimaryKeyConstraint('source_id', 'target_id', 'relation_type', name='module_relations_pkey'),
    )

    
    # Relationships
    source_module: Mapped[Module] = relationship(
        foreign_keys=[source_id],
        back_populates="source_relations"
    )
    target_module: Mapped[Module] = relationship(
        foreign_keys=[target_id],
        back_populates="target_relations"
    )

# From projects table in project.py
class Project(Base):
    __tablename__ = "projects"
    
    id: Mapped[str] = mapped_column(String, primary_key=True)
    name: Mapped[str] = mapped_column(String, nullable=False, unique=True)
    created_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    
    # Relationships
    module_mappings: Mapped[List[ProjectModuleMapping]] = relationship(back_populates="project")

# From agent_status table in state.py
class AgentStatus(Base):
    __tablename__ = "agent_status"
    
    module_id: Mapped[str] = mapped_column(String, ForeignKey('modules.module_id', ondelete='CASCADE'), primary_key=True)
    stage: Mapped[str] = mapped_column(
        Enum('INITIALIZE', 'MAINTAIN', 'REMOVE', name='agent_stage'),
        nullable=False
    )
    state: Mapped[str] = mapped_column(
        Enum('STANDBY', 'EXECUTING', name='agent_state'),
        nullable=False
    )
    last_updated: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    
    # Updated relationship with back_populates
    module: Mapped[Module] = relationship(back_populates="agent_status")



class WorkflowStatus(Base):
    """Tracks completion status of workflows for a module"""
    __tablename__ = "workflow_status"
    
    module_id: Mapped[str] = mapped_column(
        String, 
        ForeignKey('modules.module_id', ondelete='CASCADE'),
        primary_key=True
    )
    workflow_type: Mapped[str] = mapped_column(String, primary_key=True)
    is_completed: Mapped[bool] = mapped_column(Boolean, nullable=False, default=False)
    last_updated: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    
    # Relationship
    module: Mapped["Module"] = relationship(back_populates="workflow_statuses")



# Create indexes (these will be created by Alembic)
from sqlalchemy import Index

# Index for chat_history
Index('idx_module_section', ChatHistory.module_id, ChatHistory.section)

================
File: engine/src/engine/services/agents/agent_utils.py
================
from pathlib import Path
from typing import Dict, Optional, List
from engine.services.core.module import ModuleService
from engine.services.storage.repository import RepoService
from engine.services.agents.code_edit import CodeEdit, CodeEditResult, CodeBlockEditUtil
from loguru import logger

class AgentUtils:
    """Utility class for common agent operations"""

    def __init__(self, module_service: ModuleService, repo_service: RepoService, module_id: str, workflow: str):
        """
        Initialize AgentUtils for a specific module and workflow
        
        Args:
            module_service: Module service instance
            repo_service: Repository service instance
            module_id: Module ID this utils instance is for
            workflow: Workflow name this utils instance is for
        """
        self.module_service = module_service
        self.repo_service = repo_service
        self.module_id = module_id
        self.workflow = workflow

        # Get module metadata to access repo info
        self.module_metadata = self.module_service.get_module_metadata(module_id)
        self.repo_path = self.repo_service.get_repo_path(self.module_metadata.repo_name)

    def read_file(self, relative_path: str) -> Optional[str]:
        """
        Read contents of a file relative to the repository root
        
        Args:
            relative_path: Path relative to repository root
            
        Returns:
            str: File contents or None if file doesn't exist
            
        Raises:
            Exception: On read errors
        """
        try:
            file_path = Path(self.repo_path) / relative_path

            logger.debug(f"Reading file: {file_path}")
            if not file_path.exists():
                return None
                
            return file_path.read_text()
        except Exception as e:
            logger.error(f"Error reading file {relative_path}: {str(e)}")
            raise

    def write_file(self, relative_path: str, content: str) -> bool:
        """
        Write content to a file in the repository
        
        Args:
            relative_path: Path relative to repository root
            content: Content to write
            
        Returns:
            bool: True if successful
            
        Raises:
            Exception: On write errors
        """
        try:
            file_path = Path(self.repo_path) / relative_path
            file_path.parent.mkdir(parents=True, exist_ok=True)
            file_path.write_text(content)
            return True
        except Exception as e:
            logger.error(f"Error writing file {relative_path}: {str(e)}")
            raise

            
    def apply_code_changes(self, file_path: str, edits: List[Dict[str,str]]) -> CodeEditResult:
        """
        Apply multiple code edits to a file and return the result
        
        Args:
            file_path: Path to file relative to repository root
            edits: List of edits to apply, each with original/updated content
            
        Returns:
            CodeEditResult containing:
            - success: Whether all edits were applied successfully 
            - content: Modified content if successful
            - error: Error message if failed
            - similar: Similar blocks found if no exact match
            
        Example:
            edits = [{
                "original":"def old_code():", 
                "updated":"def new_code():"
            }]
            result = utils.apply_code_changes("src/file.py", edits)
        """
        try:
            abs_path = Path(self.repo_path) / file_path
            content = abs_path.read_text() if abs_path.exists() else ""
            edits = [CodeEdit(**edit) for edit in edits]
            editor = CodeBlockEditUtil()
            result = editor.apply_edits(content, edits)

                
            return result
            
        except Exception as e:
            logger.error(f"Error applying code changes to {file_path}: {str(e)}")
            return CodeEditResult(success=False, error=str(e))

================
File: engine/src/engine/services/agents/base_agent.py
================
from abc import ABC, abstractmethod
from dataclasses import dataclass
import re
from typing import Any, Dict, List, Optional, Tuple
import json
import xml.etree.ElementTree as ET
import xmltodict
from litellm import ChatCompletionMessageToolCall, Choices
from engine.services.core.kit import KitConfig
from engine.services.execution.action import FunctionMetadata
from engine.services.execution.model import ModelService
from engine.services.execution.state import StateService
from engine.services.execution.workflow import (
    EnhancedWorkflowAction,
    WorkflowExecutionResult,
    WorkflowService,
    WorkflowMetadataResult,
    ActionInfo
)
from engine.services.agents.chat_history import ChatHistoryManager
from engine.services.core.module import ModuleService, RelationType
from engine.services.storage.repository import RepoService
from engine.services.agents.agent_utils import AgentUtils
from loguru import logger
from dataclasses import dataclass
from typing import Optional, List, Dict

@dataclass
class GimlResponse:
    """Structured response for GIML elements"""
    id: str                  # ID of the GIML element
    giml_type: str          # Type of GIML element (select, code_diff, etc)
    response_value: Optional[str]  # User's response value if provided
    structured_giml: Dict    # Full GIML structure as dictionary


@dataclass
class AgentServices:
    """Essential services required by all agents"""
    model_service: ModelService     # For LLM interactions
    workflow_service: WorkflowService  # For workflow execution
    module_service: ModuleService   # For module management
    state_service: StateService     # For agent state management
    repo_service: RepoService       # For repository operations

@dataclass
class AgentContext:
    """Context for an agent operation"""
    module_id: str
    workflow: str
    user_input: str
    session_id: Optional[str] = None

class BaseAgent(ABC):
    """Next generation base agent with core functionality"""
    
    def __init__(self, services: AgentServices):
        """Initialize base agent with required services"""
        self.services = services
        self.history_manager = ChatHistoryManager()
        self.context: Optional[AgentContext] = None
        self.tag_elements = self.get_giml()
        self.tools: List[Dict[str, Any]] = []
        self.system_prompt: Optional[str] = None
        self._utils: Optional[AgentUtils] = None

    @property
    def utils(self) -> AgentUtils:
        """Get agent utils instance for current module and workflow context"""
        if not self.context:
            raise ValueError("No active context - utils cannot be accessed")
        if not self._utils or self._utils.module_id != self.context.module_id or self._utils.workflow != self.context.workflow:
            self._utils = AgentUtils(
                self.services.module_service,
                self.services.repo_service,
                self.context.module_id,
                self.context.workflow
            )
        return self._utils

    def get_giml(self) -> Dict[str, Dict[str, Any]]:
        """Get GIML (Generative Interface Markup Language) element schemas and descriptions"""
        return {
            "select": {
                "format": """
    <giml>
        <label  id="<unique id>">Your question here</label>
        <select id="<unique id>">
                <item description="Description of what this option means">Option text1</item>
                <item description="Description of what this second option means">Option text2</item>
                ....
        </select>
    </giml>""",
                "use": "Prompt the user with a question and multiple choice options",
                "schema": {
                    "children": {
                        "label": {
                            "attributes": ["id"],
                            "type": "text"
                        },
                        "select": {
                            "attributes": ["id"],
                            "children": {
                                "item": {
                                    "attributes": ["description"],
                                    "type": "text",
                                    "multiple": True
                                }
                            }
                        }
                    }
                }
            },
            "code_diff": {
                "format": """
    <giml>
        <code file="path/to/file" id="<unique id>">
            <original>Original code block</original>
            <updated>Updated code block</updated>
        </code>
    </giml>""",
                "use": "Show code changes with original and updated versions",
                "schema": {
                    "children": {
                        "code": {
                            "attributes": ["file", "id"],
                            "children": {
                                "original": {"type": "text"},
                                "updated": {"type": "text"}
                            }
                        }
                    }
                }
            }
        }

    async def build_context(
        self,
        agent_instructions: str = None,
        action_names: Optional[List[str]] = None,
        include_shared_actions: bool = False,
        required_xml_elements: List[str] = None,
        custom_instructions: Optional[str] = None
    ) -> tuple[str, List[Dict[str, Any]]]:
        """
        Build system prompt with selected actions as tools
        
        Args:
            workflow_instructions: Optional workflow-specific instructions
            action_names: List of action names to include, or None for all actions
            include_shared_actions: Whether to include shared actions as tools
            required_xml_elements: List of XML element templates to include
            custom_instructions: Additional instructions to append
            
        Returns:
            Tuple of (system prompt, list of tools)
        """
        if not self.context:
            raise ValueError("No active context")
            
        parts: Dict[str, str] = {"Agent Instructions": agent_instructions}
        tools = []

        # Get workflow metadata
        workflow_data: WorkflowMetadataResult = self.services.workflow_service.get_workflow_metadata(
            self.context.module_id,
            self.context.workflow
        )

        if action_names is None:
            tools: List[EnhancedWorkflowAction] = [
                {
                    "type": "function",
                    "function": {
                        "name": action.action.name,
                        "description": action.action.description,
                        "parameters": action.metadata.parameters if action.metadata else {}
                    }
                }
                for action in workflow_data.actions
            ]
        else:  # Include only specified actions
            tools = [
                {
                    "type": "function",
                    "function": {
                        "name": action.action.name,
                        "description": action.action.description,
                        "parameters": action.metadata.parameters if action.metadata else {}
                    }
                }
                for action in workflow_data.actions
                if action.action.name in action_names
            ]

        # Add tool descriptions to prompt
        workflow_tool_descriptions = []
        for tool in tools:
            workflow_tool_descriptions.append(
                f"- {tool['function']['name']}: {tool['function']['description']}"
            )

        if workflow_tool_descriptions:
            parts["Available tools"]= "\n".join(workflow_tool_descriptions)

        # Add XML element documentation
        if required_xml_elements:
            xml_docs = []
            for element in required_xml_elements:
                if element in self.tag_elements:
                    xml_docs.append(f"Element f{element}\n format: {self.tag_elements[element]['format']}\n use: {self.tag_elements[element]['use']}")
            if xml_docs:
                parts["Tag Elements"]= "\n\n".join(xml_docs)

        # Add custom instructions at the end if provided
        if custom_instructions:
            parts["Additional Instructions"]=custom_instructions

        final_instruction = ""
        for key, value in parts.items():
            if value:
                final_instruction += f"\n\n##{key}:\n{value}"
            
        self.tools = tools
        self.system_prompt = final_instruction
        return final_instruction, tools

    def add_to_history(
        self, 
        role: str,
        content: str,
        message_type: str = "text", 
        tool_calls: Optional[List[ChatCompletionMessageToolCall]] = None,
        tool_call_id: Optional[str] = None,
        tool_name: Optional[str] = None,
    ):
        """
        Add a message to chat history
        
        Args:
            role: The role of the message sender (user/assistant/tool)
            content: The message content
            message_type: Message type (text/tool_call/tool_result)
            tools_info: Optional list of tool info dictionaries
            tool_call_id: Optional ID of the tool call this message is responding to
            tool_name: Optional name of the tool this message is from
        """
        if not self.context:
            raise ValueError("No active context")


        self.history_manager.add_to_history(
            module_id=self.context.module_id,
            workflow=self.context.workflow,
            role=role,
            content=content,
            tool_call_id=tool_call_id,
            name=tool_name,
            message_type=message_type,
            tool_calls=tool_calls if tool_calls else None,
            session_id=self.context.session_id
        )

    def get_chat_history(self) -> List[Dict[str, Any]]:
        """Get complete chat history"""
        if not self.context:
            raise ValueError("No active context")
            
        chat_history = self.history_manager.get_chat_history(
            module_id=self.context.module_id,
            workflow=self.context.workflow,
            session_id=self.context.session_id
        )
        # Select only few attributes: role, content(optional), tool_call_id(optional), name(optional), tool calls(optional)
        formatted_history = []
        for msg in chat_history:
            formatted_msg = {k: v for k, v in msg.items() if k in ["role", "content", "tool_call_id", "name", "tool_calls"]}
            formatted_history.append(formatted_msg)
        return formatted_history

    def get_last_assistant_message(self, return_json: bool = False) -> Optional[Dict[str, Any]]:
        """
        Get the last message from the assistant in chat history
        
        Args:
            return_json: Whether to return tool calls as JSON rather than model instances
            
        Returns:
            Last assistant message as a dictionary, or None if no assistant messages found
            
        Raises:
            ValueError: If no active context
        """
        if not self.context:
            raise ValueError("No active context")
            
        return self.history_manager.get_last_assistant_message(
            module_id=self.context.module_id,
            workflow=self.context.workflow,
            session_id=self.context.session_id,
            return_json=return_json
        )

    async def execute_workflow_action(
        self,
        action_name: str,
        parameters: Dict[str, Any]
    ) -> Any:
        """Execute a workflow action"""
        try:
            if not self.context:
                raise ValueError("No active context")

            action_info = ActionInfo(
                module_id=self.context.module_id,
                workflow=self.context.workflow,
                name=action_name
            )

            result = self.services.workflow_service.execute_workflow_action(
                action_info=action_info,
                parameters=parameters
            )

            return result
        except Exception as e:
            logger.error(f"Error executing workflow action: {str(e)}")
            raise

    async def chat_completion(
        self,
        messages: List[Dict[str, str]],
        stream: bool = False,
        tool_choice: Optional[str] = "auto",
        save_messages: bool = True,
        process_response: bool = True,
        include_history: bool = True,
        **kwargs
    ):
        """Wrapper for model service chat completion that handles tools and history"""
        try:
            if not self.context:
                raise ValueError("No active context")

            # Get current chat history
            history = []
            if include_history:
                history = self.get_chat_history()

            # Always include system message first if we have one
            all_messages = []
            if self.system_prompt:
                all_messages.append({"role": "system", "content": self.system_prompt})

            if save_messages:
                for message in messages:
                    # Add user message to history
                    self.add_to_history(message["role"], message["content"])
            
            # Add history and new messages
            all_messages.extend(history + messages)

            logger.debug(f"Chat completion messages: {all_messages}")
            logger.debug(f"Chat completion tools: {self.tools}")
            
            # Execute chat completion with current tools
            response = await self.services.model_service.chat_completion(
                messages=all_messages,
                stream=stream,
                tools=self.tools if self.tools else None,
                tool_choice=tool_choice if self.tools else None,
                **kwargs
            )
            logger.debug(f"Chat completion response: {response}")

            if process_response:
                # Add response to history
                # check if response has tool calls
                assistant_message = response.choices[0].message
                
                if hasattr(assistant_message, "tool_calls") and assistant_message.tool_calls:
                    # Add assistant message with tool calls info
                    self.add_to_history(
                        "assistant",
                        None,
                        message_type="tool_calls",
                        tool_calls=assistant_message.tool_calls
                    )

                    for tool_call in assistant_message.tool_calls:
                        try:
                            # Parse parameters
                            parameters = json.loads(tool_call.function.arguments)

                            # Execute the workflow action
                            result = await self.execute_workflow_action(
                                tool_call.function.name,
                                parameters
                            )

                            # Add to history with tool call ID
                            self.add_to_history(
                                role="tool",
                                content=json.dumps(result),
                                message_type="tool_result",
                                tool_call_id=tool_call.id,
                                tool_name=tool_call.function.name
                            )

                        except Exception as e:
                            error_msg = str(e)
                            logger.error(f"Error executing tool {tool_call.function.name}: {error_msg}")










                elif assistant_message.content:
                    # Add regular assistant message to history
                   self.add_to_history("assistant", assistant_message.content)

            









            return response
        except Exception as e:
            logger.error(f"Chat completion failed: {str(e)}")
            raise

    async def process_request(self, context: AgentContext) -> Dict[str, Any]:
        """Process an agent request"""
        try:
            self.context = context
            # Get workflow metadata
            workflow_data: WorkflowMetadataResult =  self.services.workflow_service.get_workflow_metadata(
                context.module_id,
                context.workflow
            )

            # Get responses
            responses = self.get_response_values(context.user_input)

            logger.debug(f"Responses: {responses}")
            
            # Process workflow
            result = await self.process_workflow(context, workflow_data, responses)

            return result
        except Exception as e:
            logger.error(f"Error processing request: {str(e)}")
            raise
        finally:
            self.context = None  # Clear context


    def get_response_values(self, response_text: str) -> Optional[List[GimlResponse]]:
        """
        Extract GIML elements from last assistant message and match with responses
        
        Args:
            response_text: Text containing responses in GIML format
                Expected format:
                <giml>
                    <responses>
                        <response id="corresponding-id" value="Yes"/>
                    </responses>
                </giml>
                        
        Returns:
            List of GimlResponse objects containing:
            - id: ID of the GIML element
            - giml_type: Type of GIML element (select, code_diff, etc)
            - response_value: User's response value if provided
            - structured_giml: Full GIML structure as dictionary

        Example:
            For assistant message with multiple GIML blocks:
                Some text here
                <giml>
                    <label id="q1">First question</label>
                    <select id="s1">
                        <item description="desc1">Yes</item>
                        <item description="desc2">No</item>
                    </select>
                </giml>
                More text here
                <giml>
                    <label id="q2">Second question</label>
                    <select id="s2">
                        <item description="desc3">Option A</item>
                        <item description="desc4">Option B</item>
                    </select>
                </giml>
        """
        try:
            # Parse response GIML
            response_root = ET.fromstring(response_text)
            if response_root.tag != 'giml':
                return None

            # Get all response id/value pairs
            responses = {}
            for resp in response_root.findall(".//response"):
                resp_id = resp.get("id")
                resp_value = resp.get("value")
                if resp_id and resp_value:
                    responses[resp_id] = resp_value

            # Get assistant message
            message = self.get_last_assistant_message()
            if not message or 'content' not in message:
                return None

            result = []
            
            # Find all GIML blocks in the message
            message_content = message['content']
            giml_blocks = re.findall(r'<giml>.*?</giml>', message_content, re.DOTALL)
            
            for giml_block in giml_blocks:
                try:
                    # Parse each GIML block
                    giml_root = ET.fromstring(giml_block)
                    giml_dict = xmltodict.parse(giml_block)

                    # Check each GIML type we support
                    for giml_type in self.get_giml().keys():
                        for elem in giml_root.findall(f".//{giml_type}"):
                            elem_id = elem.get("id")
                            if elem_id:
                                result.append(GimlResponse(
                                    id=elem_id,
                                    giml_type=giml_type,
                                    response_value=responses.get(elem_id),
                                    structured_giml=giml_dict
                                ))

                except ET.ParseError:
                    logger.warning(f"Failed to parse GIML block: {giml_block}")
                    continue

            return result if result else None

        except ET.ParseError:
            return None
        except Exception as e:
            logger.error(f"Error processing GIML: {str(e)}")
            return None

    @property
    @abstractmethod
    def agent_type(self) -> str:
        """Return agent type identifier"""
        pass

    @abstractmethod
    async def   process_workflow(
        self,
        context: AgentContext,
        workflow_data: WorkflowMetadataResult,
        responses: Optional[List[GimlResponse]] = None
    ) -> Dict[str, Any]:
        """Process a workflow request"""
        pass

================
File: engine/src/engine/services/agents/chat_history.py
================
from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import datetime, UTC
from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Union
import importlib.util
import inspect
import json
import uuid
from litellm import ChatCompletionMessageToolCall
from sqlalchemy import JSON, select

from engine.db.models import ChatHistory
from engine.db.session import SessionLocal
from engine.services.execution.model import ModelService
from engine.services.execution.state import StateService, AgentState
from engine.services.core.module import ModuleService, RelationType
from engine.services.storage.repository import RepoService
from loguru import logger
from pathlib import Path


class AgentError(Exception):
    """Base exception for agent operations"""
    pass

class ChatHistoryManager:
    """Manages chat history operations"""
    
    def __init__(self):
        self._db = SessionLocal()
    
    def get_chat_history(
        self,
        module_id: str,
        workflow: str,
        session_id: Optional[str] = None,
        return_json: bool = False

    ) -> List[Dict[str, Any]]:
        """
        Get chat history for a module and workflow session
        
        Args:
            module_id: Module ID
            workflow: Workflow type
            session_id: Optional session ID. If not provided, returns default session (all zeros UUID)
        """
        try:
            with self._db as db:
                stmt = (
                    select(ChatHistory)
                    .where(
                        ChatHistory.module_id == module_id,
                        ChatHistory.section == workflow,
                        ChatHistory.session_id == (session_id or str(uuid.UUID(int=0)))
                    )
                    .order_by(ChatHistory.timestamp.asc())
                )
                messages = db.execute(stmt).scalars().all()

                history = [self._format_message(msg, return_json) for msg in messages]
                return history
        except Exception as e:
            raise AgentError(f"Failed to get chat history: {str(e)}")

    def add_to_history(
        self,
        module_id: str,
        workflow: str, 
        role: str,
        content: str,
        message_type: str = "text",
        tool_calls: Optional[List[ChatCompletionMessageToolCall]] = None,
        session_id: Optional[str] = None,
        tool_call_id: Optional[str] = None,
        name: Optional[str] = None,

    ):
        """
        Add message to chat history
        
        Args:
            module_id: Module ID
            workflow: Workflow type
            role: Message role (user/assistant)
            content: Message content
            message_type: Message type (text/tool_call/tool_result)
            tool_data: Optional tool data
            session_id: Optional session ID. If not provided, uses default session (all zeros UUID)
        """
        try:
            with self._db as db:
                logger.debug(f"tool_calls: {tool_calls}")
                chat_message = ChatHistory(
                    module_id=module_id,
                    section=workflow,
                    role=role,
                    content=content,
                    timestamp=datetime.now(UTC),
                    message_type=message_type,
                    tool_calls=[tool_call.model_dump_json() for tool_call in tool_calls] if tool_calls else None,
                    session_id=session_id or str(uuid.UUID(int=0)),
                    tool_call_id=tool_call_id,
                    name=name
                )
                db.add(chat_message)
                db.commit()
        except Exception as e:
            raise AgentError(f"Failed to add to history: {str(e)}")

    def _format_message(self, msg: ChatHistory, return_json: bool = False) -> Dict[str, Any]:
        """
        Format a ChatHistory message into a dictionary
        
        Args:
            msg: ChatHistory model instance
            return_json: Whether to return tool calls as JSON (True) or model instances (False)
            
        Returns:
            Formatted message dictionary
        """
        message = {
            "role": msg.role,
            "content": msg.content
        }
        
        if msg.tool_call_id:
            message["tool_call_id"] = msg.tool_call_id

        if msg.tool_calls:
            if return_json:
                message["tool_calls"] = [
                    json.loads(tool_call_json)
                    for tool_call_json in msg.tool_calls
                ]
            else:
                message["tool_calls"] = [
                    ChatCompletionMessageToolCall.model_validate_json(tool_call_json)
                    for tool_call_json in msg.tool_calls
                ]

        if msg.name:
            message["name"] = msg.name
            
        return message

    def get_last_assistant_message(
        self,
        module_id: str,
        workflow: str,
        session_id: Optional[str] = None,
        return_json: bool = False
    ) -> Optional[Dict[str, Any]]:
        """
        Get the last message from the assistant in chat history
        
        Args:
            module_id: Module ID
            workflow: Workflow type
            session_id: Optional session ID. If not provided, uses default session (all zeros UUID)
            return_json: Whether to return tool calls as JSON
            
        Returns:
            Last assistant message as a dictionary, or None if no assistant messages found
        """
        try:
            with self._db as db:
                stmt = (
                    select(ChatHistory)
                    .where(
                        ChatHistory.module_id == module_id,
                        ChatHistory.section == workflow,
                        ChatHistory.session_id == (session_id or str(uuid.UUID(int=0))),
                        ChatHistory.role == "assistant"
                    )
                    .order_by(ChatHistory.timestamp.desc())
                    .limit(1)
                )
                
                message = db.execute(stmt).scalar_one_or_none()
                return self._format_message(message, return_json) if message else None
                
        except Exception as e:
            raise AgentError(f"Failed to get last assistant message: {str(e)}")

================
File: engine/src/engine/services/agents/code_edit.py
================
from dataclasses import dataclass
from typing import List, Optional, Dict, Tuple, Any
from diff_match_patch import diff_match_patch
from loguru import logger

@dataclass
class CodeEdit:
    """Represents a code edit with original and updated content"""
    original: str
    updated: str

@dataclass
class CodeEditResult:
    """Result of code edit operation"""
    success: bool
    content: Optional[str] = None
    error: Optional[str] = None
    diff: Optional[str] = None
    patches: Optional[List[str]] = None
    failed_matches: Optional[List[str]] = None

class CodeBlockEditUtil:
    def __init__(self):
        self.dmp = diff_match_patch()
        # Configure diff_match_patch settings for better code matching
        self.dmp.Diff_Timeout = 2.0
        self.dmp.Match_Threshold = 0.5
        self.dmp.Match_Distance = 1000
        self.dmp.Patch_DeleteThreshold = 0.5

    def create_patch(self, original: str, updated: str) -> List[Any]:
        """Create a patch between original and updated text"""
        diffs = self.dmp.diff_main(original, updated)
        self.dmp.diff_cleanupSemantic(diffs)
        patches = self.dmp.patch_make(original, diffs)
        return patches

    def apply_single_edit(self, content: str, edit: CodeEdit) -> Tuple[str, bool, Optional[str]]:
        """Apply a single edit and return the result, success status, and error"""
        try:
            # Find the location of the original text
            location = content.find(edit.original)
            
            if location == -1:
                # If exact match fails, try fuzzy matching
                match_location = self.dmp.match_main(content, edit.original, 0)
                
                if match_location == -1:
                    return content, False, f"Could not find match for:\n{edit.original}"
                
                # Create and apply patch
                patches = self.create_patch(edit.original, edit.updated)
                new_content, results = self.dmp.patch_apply(patches, content)
                
                if not all(results):
                    return content, False, "Patch application failed"
                    
                return new_content, True, None
            
            # Direct replacement for exact matches
            new_content = content[:location] + edit.updated + content[location + len(edit.original):]
            return new_content, True, None
            
        except Exception as e:
            return content, False, str(e)

    def format_diff(self, original: str, updated: str) -> str:
        """Create a human-readable diff"""
        diffs = self.dmp.diff_main(original, updated)
        self.dmp.diff_cleanupSemantic(diffs)
        
        diff_text = []
        for op, text in diffs:
            if op == self.dmp.DIFF_INSERT:
                diff_text.append(f"+ {text}")
            elif op == self.dmp.DIFF_DELETE:
                diff_text.append(f"- {text}")
            elif op == self.dmp.DIFF_EQUAL:
                diff_text.append(f"  {text}")
        
        return "\n".join(diff_text)

    def apply_edits(self, content: str, edits: List[CodeEdit]) -> CodeEditResult:
        """
        Apply multiple code edits using Google's diff-match-patch
        """
        try:
            current_content = content
            failed_matches = []
            patches_applied = []
            has_changes = False
            
            for edit in edits:
                new_content, success, error = self.apply_single_edit(current_content, edit)
                
                if success:
                    if new_content != current_content:
                        has_changes = True
                        patches = self.create_patch(edit.original, edit.updated)
                        patches_applied.extend(str(p) for p in patches)
                    current_content = new_content
                else:
                    failed_matches.append(f"Failed edit: {error}")
            
            if not has_changes:
                return CodeEditResult(
                    success=False,
                    error="No changes were made",
                    content=content
                )
            
            if failed_matches:
                return CodeEditResult(
                    success=False,
                    content=current_content,
                    error="Some edits failed",
                    diff=self.format_diff(content, current_content),
                    patches=patches_applied,
                    failed_matches=failed_matches
                )
            
            return CodeEditResult(
                success=True,
                content=current_content,
                diff=self.format_diff(content, current_content),
                patches=patches_applied
            )
            
        except Exception as e:
            logger.error(f"Error applying code edits: {str(e)}")
            return CodeEditResult(success=False, error=str(e))

================
File: engine/src/engine/services/core/agent_loader.py
================
"""Agent plugin loader service."""
import importlib.util
import sys
from pathlib import Path
from typing import Dict, Type, Optional, Union

from engine.services.agents.base_agent import BaseAgent, AgentServices
from engine.config.workflow_config import WorkflowConfig
from loguru import logger
from engine.base.agents import __all__ as base_agents

class AgentLoaderError(Exception):
    """Base exception for agent loading errors"""
    pass

class AgentLoader:
    """Dynamically loads agent plugins from kits"""
    
    def __init__(self, agent_services: AgentServices):
        self.agent_services = agent_services
        self.loaded_agents: Dict[str, Type[BaseAgent]] = {}
        self._load_base_agents()

    def _load_base_agents(self):
        """Load built-in agents from base.agents"""
        try:
            from engine.base.agents import __all__ as agent_classes
            for agent_class in agent_classes:
                # Create instance to get agent_type
                agent = agent_class(self.agent_services)
                self.loaded_agents[agent.agent_type] = agent_class
        except Exception as e:
            logger.error(f"Failed to load base agents: {str(e)}")
            raise AgentLoaderError(f"Failed to load base agents: {str(e)}")

    def get_agent(self, kit_path: Path, agent_name: str, class_name: str) -> BaseAgent:
        """
        Get agent instance, loading if necessary.

        Args:
            kit_path: Path to kit root directory
            agent_name: Name of agent from kit.yaml
            class_name: Name of agent class to load

        Returns:
            BaseAgent: Agent instance
            
        Raises:
            AgentLoaderError: If agent cannot be loaded
        """
        try:
            # Check if it's a base agent first
            if agent_name in self.loaded_agents:
                agent_class = self.loaded_agents[agent_name]
                return agent_class(self.agent_services)

            # Load from kit
            agents_dir = kit_path / "agents"
            if not agents_dir.exists():
                raise AgentLoaderError(f"Agents directory not found: {agents_dir}")

            # Create cache key 
            cache_key = f"{kit_path}:{agent_name}"

            # Return cached agent class if available
            if cache_key in self.loaded_agents:
                agent_class = self.loaded_agents[cache_key]
                return agent_class(self.agent_services)

            # Import agent module from kit
            module_path = agents_dir / f"{agent_name}.py"
            if not module_path.exists():
                module_path = agents_dir / "__init__.py"

            if not module_path.exists():
                raise AgentLoaderError(f"No agent module found for {agent_name}")

            # Create module spec
            spec = importlib.util.spec_from_file_location(
                f"dynamic_agents_{kit_path.name}_{agent_name}",
                str(module_path)
            )
            if not spec or not spec.loader:
                raise AgentLoaderError(f"Failed to load module spec from {module_path}")

            # Load module
            module_name = f"dynamic_agents_{kit_path.name}_{agent_name}"
            module = importlib.util.module_from_spec(spec)
            sys.modules[module_name] = module
            spec.loader.exec_module(module)

            # Get agent class
            if not hasattr(module, class_name):
                raise AgentLoaderError(f"Agent class {class_name} not found in {module_path}")

            agent_class = getattr(module, class_name)
            if not issubclass(agent_class, BaseAgent):
                raise AgentLoaderError(f"{class_name} in {module_path} is not a BaseAgent subclass")
                
            # Create instance to get agent_type value
            agent_instance = agent_class(self.agent_services)
            if agent_instance.agent_type != agent_name:
                raise AgentLoaderError(f"Agent type mismatch: class {class_name} has agent_type '{agent_instance.agent_type}' but kit.yaml specifies '{agent_name}'")

            # Cache agent class
            self.loaded_agents[cache_key] = agent_class
            return agent_instance

        except Exception as e:
            raise AgentLoaderError(f"Failed to get agent {agent_name}: {str(e)}")

    def load_workflow_agent(
        self,
        kit_path: Path,
        workflow_name: str,
        workflow_config: Union[dict, WorkflowConfig]
    ) -> Optional[BaseAgent]:
        """
        Load agent for specific workflow based on kit.yaml config.

        Args:
            kit_path: Path to kit root directory
            workflow_name: Name of workflow
            workflow_config: Workflow configuration from kit.yaml

        Returns:
            Optional[BaseAgent]: Agent instance if agent is configured, None otherwise
            
        Raises:
            AgentLoaderError: If agent cannot be loaded
        """
        try:
            # Read kit.yaml
            with open(kit_path / "kit.yaml") as f:
                import yaml
                kit_config = yaml.safe_load(f)

            # Convert WorkflowConfig to dict if needed
            if isinstance(workflow_config, WorkflowConfig):
                workflow_config = {"agent": workflow_config.agent_type}
                
            # Get agent configs
            agents = {
                agent["name"]: agent
                for agent in kit_config.get("agents", [])
            }

            # Check workflow-specific agent
            agent_name = workflow_config.get("agent") 
            if not agent_name:
                # Check default agent at workflow root
                agent_name = kit_config.get("workflows", {}).get("agent")

            if not agent_name:
                raise AgentLoaderError(f"No agent specified for workflow {workflow_name}")
                
            # First try loading from base agents
            if agent_name in self.loaded_agents:
                return self.get_agent(kit_path, agent_name, agent_name)
                
            # Load from kit if not a base agent
            if agent_name not in agents:
                raise AgentLoaderError(f"Agent '{agent_name}' not found in kit.yaml agents")

            agent_config = agents[agent_name]
            return self.get_agent(
                kit_path=kit_path,
                agent_name=agent_name,
                class_name=agent_config["class"]
            )

        except Exception as e:
            raise AgentLoaderError(
                f"Failed to load workflow agent for {workflow_name}: {str(e)}"
            )

================
File: engine/src/engine/services/core/kit.py
================
import io
import json
import os
import re
import shutil
import tempfile
import zipfile
from urllib.parse import urljoin

import httpx
from dataclasses import dataclass, field
from datetime import datetime, UTC
from enum import Enum
from pathlib import Path
from typing import Any, BinaryIO, Dict, List, Optional, Union

import yaml

@dataclass
class EnvironmentVariable:
    """Environment variable definition"""
    name: str
    description: str
    required: bool = False
    default: Optional[str] = None

@dataclass
class Agent:
    """Agent configuration"""
    name: str
    class_name: str  # Maps to 'class' in YAML
    description: Optional[str] = None

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Agent':
        return cls(
            name=data['name'],
            class_name=data['class'],
            description=data.get('description')
        )

@dataclass
class InstructionItem:
    """Instruction item definition"""
    name: str
    path: str  # Original path from config
    description: Optional[str] = None
    full_path: str = ""  # Full filesystem path constructed as module_path/instructions/path

@dataclass
class Instructions:
    """Instructions configuration"""
    documentation: List[InstructionItem] = field(default_factory=list)
    specification: List[InstructionItem] = field(default_factory=list)

    @classmethod
    def from_dict(cls, data: Dict[str, Any], kit_path: Optional[Path] = None) -> 'Instructions':
        def create_instruction_item(item: Dict[str, Any]) -> InstructionItem:
            instruction = InstructionItem(
                name=item['name'],
                path=item['path'],
                description=item.get('description')
            )
            if kit_path:
                instruction.full_path = str(kit_path / "instructions" / item['path'])
            return instruction

        documentation = [
            create_instruction_item(item)
            for item in data.get('documentation', [])
        ]
        specification = [
            create_instruction_item(item)
            for item in data.get('specification', [])
        ]
        return cls(documentation=documentation, specification=specification)

@dataclass
class WorkflowAction:
    """Workflow action definition"""
    path: str  # Original path in format "module:function"
    name: str
    description: Optional[str] = None
    full_file_path: str = ""  # Full path to the action file
    function_name: str = ""  # Function name extracted from path

    def to_dict(self) -> Dict[str, Any]:
        return {
            "path": self.path,
            "name": self.name,
            "description": self.description,
            "full_file_path": self.full_file_path,
            "function_name": self.function_name
        }

@dataclass
class Workflow:
    """Workflow configuration"""
    agent: str
    instruction: str
    actions: List[WorkflowAction]
    instruction_file_path: str = ""  # Full path to instruction file
    instruction_content: str = ""  # Instruction content

    @classmethod
    def from_dict(cls, data: Dict[str, Any], kit_path: Optional[Path] = None) -> 'Workflow':
        def create_workflow_action(action: Dict[str, Any]) -> WorkflowAction:
            workflow_action = WorkflowAction(
                path=action['path'],
                name=action['name'],
                description=action.get('description')
            )
            action_file_path, func_name = action['path'].split(':')
            workflow_action.full_file_path = str(kit_path / "actions" / f"{action_file_path}.py")
            workflow_action.function_name = func_name
            return workflow_action

        instruction_file_path = str(kit_path / "instructions" / f"{data['instruction']}")
        with open(instruction_file_path) as f:
            instruction_content = f.read()
        return cls(
            agent=data['agent'],
            instruction=data['instruction'],
            actions=[create_workflow_action(action) for action in data.get('actions', [])],
            instruction_file_path=instruction_file_path,
            instruction_content=instruction_content
        )

@dataclass
class WorkspaceFile:
    """Workspace file definition"""
    path: str
    description: Optional[str] = None

@dataclass
class WorkspaceConfig:
    """Workspace configuration"""
    files: List[WorkspaceFile] = field(default_factory=list)
    ignore: List[str] = field(default_factory=list)

@dataclass
class KitConfig:
    """Complete kit configuration"""
    doc_version: str
    id: str
    version: str
    name: str
    owner: str
    environment: List[EnvironmentVariable]
    agents: List[Agent]
    instructions: Instructions
    workflows: Dict[str, Workflow]
    shared_actions: List[WorkflowAction]
    dependencies: List[str]
    workspace: WorkspaceConfig = field(default_factory=WorkspaceConfig)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'KitConfig':
        return cls(
            doc_version=data['docVersion'],
            id=data['id'],
            version=data['version'],
            name=data['name'],
            owner=data['owner'],
            environment=[
                EnvironmentVariable(**env) 
                for env in data.get('environment', [])
            ],
            agents=[Agent.from_dict(agent) for agent in data.get('agents', [])],
            instructions=Instructions.from_dict(data.get('instructions', {}), kit_path=data['kit_path']),
            workflows={
                name: Workflow.from_dict(workflow, kit_path=data['kit_path'])
                for name, workflow in data.get('workflows', {}).items()
            },
            shared_actions=[
                WorkflowAction(
                    path=action['path'],
                    name=action['name'],
                    description=action.get('description'),
                    full_file_path=str(data['kit_path'] / "actions" / f"{action['path'].split(':')[0]}.py"),
                    function_name=action['path'].split(':')[1]
                )
                for action in data.get('shared_actions', [])
            ],
            dependencies=data.get('dependencies', []),
            workspace=WorkspaceConfig(
                files=[WorkspaceFile(**f) for f in data.get('workspace', {}).get('files', [])],
                ignore=data.get('workspace', {}).get('ignore', [])
            )
        )



class KitError(Exception):
    """Base exception for kit management errors"""
    pass

class RegistryError(KitError):
    """Registry connection or download error"""
    pass

class KitNotFoundError(KitError):
    """Module or version not found"""
    pass

class VersionExistsError(KitError):
    """Version already exists"""
    pass

class InvalidVersionError(KitError):
    """Invalid semantic version"""
    pass



@dataclass
class KitMetadata:
    """Module version metadata"""
    name: str
    version: str
    created_at: str
    size: int
    owner: str = "default"
    doc_version: str = "v1"
    kit_id: str = ""
    environment: List[dict] = None

    def __post_init__(self):
        if self.environment is None:
            self.environment = []

class VersionSort(Enum):
    """Version sorting options"""
    ASCENDING = "asc"
    DESCENDING = "desc"



class KitService:
    """Core kit management service"""

    def __init__(self, base_path: str | Path):
        """
        Initialize kit service
        
        Args:
            base_path: Base directory for storing kits
        """
        self.base_path = Path(base_path)
        self.base_path.mkdir(exist_ok=True)


    def validate_semantic_version(self, version: str) -> bool:
        """
        Validate semantic versioning format (X.Y.Z)
        
        Args:
            version: Version string to validate
            
        Returns:
            bool: True if valid semantic version
        """
        pattern = r'^\d+\.\d+\.\d+$'
        return bool(re.match(pattern, version))

    def get_kit_path(self, owner: str, kit_id: str, version: Optional[str] = None) -> Path:
        """
        Get path for kit or specific version using owner/id/version structure
        
        Args:
            owner: Module owner
            kit_id: Module identifier
            version: Optional version
            
        Returns:
            Path: Module directory path
        """
        path = self.base_path / owner / kit_id
        if version:
            path = path / version
        return path



    def _get_metadata(self, kit_path: Path) -> Optional[KitMetadata]:
        """Get metadata for kit version"""
        try:
            stats = kit_path.stat()

            # Read kit.yaml if it exists
            kit_path = kit_path / "kit.yaml"
            kit_data = {}
            if kit_path.exists():
                with open(kit_path) as f:
                    kit_data = yaml.safe_load(f)

            return KitMetadata(
                name=kit_data.get('name', kit_path.parent.name),
                version=kit_data.get('version', kit_path.name),
                created_at=datetime.fromtimestamp(stats.st_ctime).isoformat(),
                size=stats.st_size,
                owner=kit_data.get('owner', kit_path.parent.parent.name),
                doc_version=kit_data.get('docVersion', 'v1'),
                kit_id=kit_data.get('id', ''),
                environment=kit_data.get('environment', [])
            )
        except Exception:
            return None


    def _extract_kit(self, zip_file: BinaryIO, extract_path: Path) -> None:
        """Extract kit contents"""
        with zipfile.ZipFile(zip_file, 'r') as zip_ref:
            zip_ref.extractall(extract_path)

    def install_kit(self, owner: str, kit_id: str, version: str = None) -> KitMetadata:
        """
        Install kit from registry
        
        Args:
            owner: Kit owner
            kit_id: Kit identifier  
            version: Optional specific version to install, otherwise latest
            
        Returns:
            KitMetadata: Installed kit metadata
            
        Raises:
            KitNotFoundError: If kit not found in registry
            InvalidVersionError: If version format invalid  
            RegistryError: If registry connection fails
            KitError: Other errors during installation
        """
        if not (base_url := os.getenv('REGISTRY_URL')):
            raise KitError("REGISTRY_URL environment variable not set")
            
        # Construct registry URL
        base_url = urljoin(base_url, "api/registry/")
        url = urljoin(base_url, f"kit?owner={owner}&id={kit_id}")

        if version:
            if not self.validate_semantic_version(version):
                raise InvalidVersionError(f"Invalid version format: {version}")
            url = urljoin(base_url, f"kit?owner={owner}&id={kit_id}&version={version}")
        # Download kit from registry
        try:
            with httpx.Client() as client:
                # First get kit metadata and download URL
                response = client.get(url)
                if response.status_code == 404:
                    raise KitNotFoundError(f"Kit not found in registry: {owner}/{kit_id}")
                response.raise_for_status()
                
                response_data = json.loads(response.content)
                kit_info = response_data.get("kitConfig", {})
                download_url = response_data.get("downloadURL")
                if not download_url:
                    raise KitError("Download URL not found in registry response")
                
                # Validate kit info
                required_fields = ["owner", "id", "version"]
                if not all(kit_info.get(field) for field in required_fields):
                    raise KitError("Missing required fields in kit metadata")
                
                # Download actual kit zip file
                download_response = client.get(download_url)
                download_response.raise_for_status()
                kit_data = io.BytesIO(download_response.content)
        except httpx.HTTPError as e:
            raise RegistryError(f"Failed to download kit from registry: {str(e)}")
            
        # Save downloaded kit
        return self.save_kit(kit_data)

    def save_kit(self, kit_data: BinaryIO) -> KitMetadata:
        """
        Save a new kit version by extracting info from kit.yaml
        
        Args:
            kit_data: Module zip file data
                
        Returns:
            ModuleMetadata: Metadata of saved kit
                
        Raises:
            ModuleError: If kit.yaml is missing or invalid
            InvalidVersionError: If version format is invalid
            VersionExistsError: If version already exists
        """
        # Create temporary directory to extract and inspect kit
        temp_dir = Path(tempfile.mkdtemp())
        try:
            # Extract to temp directory first
            self._extract_kit(kit_data, temp_dir)

            # Read kit.yaml
            kit_path = temp_dir / "kit.yaml"
            if not kit_path.exists():
                raise KitError("kit.yaml not found in kit root")

            with open(kit_path) as f:
                try:
                    data = yaml.safe_load(f)
                    owner = data.get("owner")
                    kit_id = data.get("id")
                    version = data.get("version")
                except Exception as e:
                    raise KitError(f"Invalid kit.yaml: {str(e)}")

            if not all([owner, kit_id, version]):
                raise KitError("Missing required fields in kit.yaml")


            # Get final kit path
            kit_path = self.get_kit_path(owner, kit_id, version)

            if kit_path.exists():
                raise VersionExistsError(
                    f"Version {version} already exists for {owner}/{kit_id}"
                )

            # Move from temp to final location
            kit_path.mkdir(parents=True)
            for item in temp_dir.iterdir():
                shutil.move(str(item), str(kit_path))

            # Get metadata
            stats = kit_path.stat()
            metadata = KitMetadata(
                name=data.get('name', kit_path.parent.name),
                version=version,
                created_at=datetime.fromtimestamp(stats.st_ctime).isoformat(),
                size=stats.st_size,
                owner=owner,
                doc_version=data.get('docVersion', 'v1'),
                kit_id=kit_id,
                environment=data.get('environment', [])
            )

            return metadata

        finally:
            # Clean up temp directory
            shutil.rmtree(temp_dir)
            
    def get_kit_config(self, owner: str, kit_id: str, version: str) -> KitConfig:
        """
        Get full kit configuration excluding metadata
        
        Args:
            owner: Kit owner
            kit_id: Kit identifier
            version: Kit version
            
        Returns:
            KitConfig: Complete kit configuration
            
        Raises:
            KitNotFoundError: If kit/version not found
            KitError: If kit.yaml is invalid or missing
        """
        kit_path = self.get_kit_path(owner, kit_id, version)
        config_path = kit_path / "kit.yaml"
        
        if not config_path.exists():
            raise KitError(f"kit.yaml not found in {kit_path}")
            
        try:
            with open(config_path) as f:
                config_data = yaml.safe_load(f)
                config_data['kit_path'] = kit_path
                return KitConfig.from_dict(config_data)
        except Exception as e:
            raise KitError(f"Failed to parse kit.yaml: {str(e)}")


    def get_all_kits(self, sort_by_name: bool = True) -> List[KitMetadata]:
        """
        Get all kit versions
        
        Args:
            sort_by_name: Sort results by kit name
            
        Returns:
            List[ModuleMetadata]: List of all kit versions
        """
        kits = []

        # Iterate through owner directories
        for owner_dir in self.base_path.iterdir():
            if owner_dir.is_dir():
                # Iterate through kit directories
                for kit_dir in owner_dir.iterdir():
                    if kit_dir.is_dir():
                        # Iterate through version directories
                        for version_dir in kit_dir.iterdir():
                            if version_dir.is_dir():
                                metadata = self._get_metadata(version_dir)
                                if metadata:
                                    kits.append(metadata)

        if sort_by_name:
            kits.sort(key=lambda x: (x.name, x.version))

        return kits

    def get_kit_versions(
        self,
        owner: str,
        kit_id: str,
        sort: VersionSort = VersionSort.ASCENDING
    ) -> List[str]:
        """
        Get all versions of a kit
        
        Args:
            owner: Module owner
            kit_id: Module identifier
            sort: Version sort order
            
        Returns:
            List[str]: List of versions
            
        Raises:
            ModuleNotFoundError: If kit doesn't exist
        """
        kit_path = self.get_kit_path(owner, kit_id)

        if not kit_path.exists():
            raise KitNotFoundError(f"Kit not found: {owner}/{kit_id}")

        versions = []
        for version_dir in kit_path.iterdir():
            if version_dir.is_dir() and self.validate_semantic_version(version_dir.name):
                versions.append(version_dir.name)

        # Sort versions by components
        versions.sort(
            key=lambda v: [int(x) for x in v.split('.')],
            reverse=(sort == VersionSort.DESCENDING)
        )

        return versions

    def get_kit_content_path(self, owner: str, kit_id: str, version: str) -> Path:
        """
        Get path to kit contents
        
        Args:
            owner: Module owner
            kit_id: Module identifier
            version: Module version
            
        Returns:
            Path: Path to kit contents
            
        Raises:
            ModuleNotFoundError: If kit/version not found
            InvalidVersionError: If version format invalid
        """
        if not self.validate_semantic_version(version):
            raise InvalidVersionError(f"Invalid version: {version}")

        path = self.get_kit_path(owner, kit_id, version)
        if not path.exists():
            raise KitNotFoundError(f"Module {owner}/{kit_id} version {version} not found")

        return path

    def delete_kit_version(self, owner: str, kit_id: str, version: str) -> None:
        """
        Delete specific kit version
        
        Args:
            owner: Module owner
            kit_id: Module identifier
            version: Version to delete
            
        Raises:
            ModuleNotFoundError: If kit/version not found
            InvalidVersionError: If version format invalid
        """
        if not self.validate_semantic_version(version):
            raise InvalidVersionError(f"Invalid version: {version}")

        kit_path = self.get_kit_path(owner, kit_id, version)

        if not kit_path.exists():
            raise KitNotFoundError(f"Module {owner}/{kit_id} version {version} not found")

        try:
            shutil.rmtree(kit_path)

            # Remove parent directories if empty
            kit_dir = kit_path.parent
            if not any(kit_dir.iterdir()):
                kit_dir.rmdir()
                owner_dir = kit_dir.parent
                if not any(owner_dir.iterdir()):
                    owner_dir.rmdir()

        except Exception as e:
            raise KitError(f"Failed to delete kit version: {str(e)}")

    def delete_kit(self, owner: str, kit_id: str) -> None:
        """
        Delete kit and all versions
        
        Args:
            owner: Module owner
            kit_id: Module identifier
            
        Raises:
            ModuleNotFoundError: If kit not found
        """
        kit_path = self.get_kit_path(owner, kit_id)

        if not kit_path.exists():
            raise KitNotFoundError(f"Kit not found: {owner}/{kit_id}")

        try:
            shutil.rmtree(kit_path)

            # Remove owner directory if empty
            owner_dir = kit_path.parent
            if not any(owner_dir.iterdir()):
                owner_dir.rmdir()

        except Exception as e:
            raise KitError(f"Failed to delete kit: {str(e)}")

================
File: engine/src/engine/services/core/module.py
================
import io
import os
import re
import uuid
import zipfile
from dataclasses import dataclass
from datetime import datetime, UTC
from enum import Enum
from pathlib import Path
from typing import Dict, List, Optional
from sqlalchemy import case, or_, select
from engine.db.models import Module, ModuleRelation, ProjectModuleMapping
from engine.db.session import SessionLocal
from sqlalchemy.orm import Session
import networkx as nx

from engine.services.storage.repository import (
    RepoNotFoundError,
    RepoService,
)
from engine.services.execution.state import StateService
from engine.services.core.kit import KitService, KitConfig
from engine.utils.file import extract_zip
from loguru import logger


class RelationType(Enum):
    CONNECTION = "connection"
    CONTEXT = "context"


class ModuleError(Exception):
    """Base exception for module errors"""
    pass

class ConnectionAccessError(ModuleError):
    """No connection access to target module"""
    pass


@dataclass
class ModuleMetadata:
    """Module metadata"""
    module_id: str
    module_name: Optional[str]  # New field
    project_id: str
    kit_id: str
    owner: str
    version: str
    created_at: str
    env_vars: Dict[str, str]
    repo_name: str
    path: str

    @classmethod
    def from_orm(cls, module: Module, project_mapping: Optional[ProjectModuleMapping] = None) -> 'ModuleMetadata':
        """Convert SQLAlchemy Module object to ModuleMetadata"""
        if project_mapping is None:
            project_mapping = module.project_mappings[0]
            
        return cls(
            module_id=module.module_id,
            module_name=module.module_name,  # New field
            project_id=project_mapping.project_id,
            kit_id=module.kit_id,
            owner=module.owner,
            version=module.version,
            created_at=module.created_at.isoformat(),
            env_vars=module.env_vars,
            repo_name=module.repo_name,
            path=project_mapping.path
        )



class ModuleService:
    """Service for managing modules and their relationships"""

    def __init__(
        self,
        workspace_base: str,
        module_base: str,
        repo_service: RepoService,
        stage_state_service: StateService,
        kit_service: KitService
    ):
        self.workspace_base = Path(workspace_base)
        self.repo_service = repo_service
        self.stage_state_service = stage_state_service
        self.module_base = module_base
        self.kit_service = kit_service


    def _get_db(self) -> Session:
        return SessionLocal()


    def _validate_path(self, path: str) -> bool:
        """
        Validate module path format (alphanumeric segments separated by dots)
        Example valid paths: "abc.123", "service.auth.v1", "backend.users"
        """
        path_pattern = r'^[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*$'
        return bool(re.match(path_pattern, path))

    def create_module(
        self,
        project_id: str,
        owner: str,
        kit_id: str,
        version: str,
        env_vars: Dict[str, str],
        path: str,
        module_name: Optional[str] = None  # New optional parameter
    ) -> ModuleMetadata:
        """Create module with path"""
        if not self._validate_path(path):
            raise ModuleError("Invalid path format. Path must be alphanumeric segments separated by dots")

        module_id = str(uuid.uuid4())
        repo_name = f"{module_id}"
        created_at = datetime.now(UTC).isoformat()

        try:
            # Get workspace path
            workspace_path = self.workspace_base / owner / kit_id / version / "workspace"
            if not workspace_path.exists():
                raise ModuleError(f"Workspace not found for {owner}/{kit_id} v{version}")

            # Create in-memory zip of workspace
            memory_zip = io.BytesIO()
            with zipfile.ZipFile(memory_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, _, files in os.walk(workspace_path):
                    for file in files:
                        file_path = Path(root) / file
                        arcname = file_path.relative_to(workspace_path)
                        zipf.write(file_path, arcname)

            memory_zip.seek(0)

            # Create repository
            self.repo_service.create_repository(
                repo_name=repo_name,
                content_file=memory_zip,
                filename="workspace.zip",
                extract_func=extract_zip
            )

            with self._get_db() as db:
                # Create module
                module = Module(
                    module_id=module_id,
                    kit_id=kit_id,
                    module_name=module_name or module_id,
                    owner=owner,
                    version=version,
                    created_at=created_at,
                    env_vars=env_vars,
                    repo_name=repo_name
                )
                db.add(module)

                # Create project mapping
                mapping = ProjectModuleMapping(
                    project_id=project_id,
                    module_id=module_id,
                    path=path,
                    created_at=created_at,
                    updated_at=created_at
                )
                db.add(mapping)
                
                db.commit()
                db.refresh(module)

                self.stage_state_service.initialize_module(module_id)
                logger.info(f"Created module {module_id} for {owner}/{kit_id} v{version}")

                return ModuleMetadata.from_orm(module, mapping)


        except Exception as e:
            # Cleanup on failure
            try:
                self.repo_service.delete_repository(repo_name)
            except:
                pass
            raise ModuleError(f"Failed to create module: {str(e)}")



    def update_module_path(self, module_id: str, project_id: str, new_path: str):
        """Update module path in a project"""
        if not self._validate_path(new_path):
            raise ModuleError("Invalid path format. Path must be alphanumeric segments separated by dots")

        try:
            with self._get_db() as db:
                mapping = db.query(ProjectModuleMapping).filter_by(
                    module_id=module_id,
                    project_id=project_id
                ).first()

                if not mapping:
                    raise ModuleError("Module not found in specified project")

                mapping.path = new_path
                mapping.updated_at = datetime.now(UTC)
                db.commit()

        except Exception as e:
            raise ModuleError(f"Failed to update module path: {str(e)}")

    def get_project_modules(self, project_id: str) -> List[ModuleMetadata]:
        """Get all modules for a project"""
        try:
            with self._get_db() as db:
                stmt = (
                    select(Module, ProjectModuleMapping)
                    .join(ProjectModuleMapping)
                    .where(ProjectModuleMapping.project_id == project_id)
                )
                results = db.execute(stmt).all()
                return [
                    ModuleMetadata.from_orm(module, mapping)
                    for module, mapping in results
                ]

        except Exception as e:
            raise ModuleError(f"Failed to get project modules: {str(e)}")


    def create_relation(
        self,
        source_id: str,
        target_id: str,
        relation_type: RelationType,
        description: Optional[str] = None  # Add description parameter
    ):
        """Create relationship between modules with optional description"""
        try:
            with self._get_db() as db:
                relation = ModuleRelation(
                    source_id=source_id,
                    target_id=target_id,
                    relation_type=relation_type.value,
                    created_at=datetime.now(UTC),
                    description=description  # Add description field
                )
                db.add(relation)
                db.commit()

        except Exception as e:
            raise ModuleError(f"Failed to create relation: {str(e)}")



    def update_relation_description(
        self,
        source_id: str,
        target_id: str,
        relation_type: RelationType,
        description: str
    ):
        """Update the description of an existing module relation"""
        try:
            with self._get_db() as db:
                relation = db.query(ModuleRelation).filter_by(
                    source_id=source_id,
                    target_id=target_id,
                    relation_type=relation_type.value
                ).first()
                
                if not relation:
                    raise ModuleError("Relation not found")
                    
                relation.description = description
                db.commit()

        except Exception as e:
            raise ModuleError(f"Failed to update relation description: {str(e)}")


    def delete_relation(self, source_id: str, target_id: str, relation_type: RelationType):
        """Delete relationship between modules"""
        try:
            with self._get_db() as db:
                db.query(ModuleRelation).filter_by(
                    source_id=source_id,
                    target_id=target_id,
                    relation_type=relation_type.value
                ).delete()
                db.commit()

        except Exception as e:
            raise ModuleError(f"Failed to delete relation: {str(e)}")


    def get_module_graph(self) -> nx.DiGraph:
        """Get NetworkX graph of module relationships"""
        graph = nx.MultiDiGraph()

        try:
            with self._get_db() as db:
                # Get all modules with their project mappings
                stmt = select(Module).join(ProjectModuleMapping)
                modules = db.execute(stmt).scalars().all()

                for module in modules:
                    graph.add_node(
                        module.module_id,
                        kit_id=module.kit_id,
                        owner=module.owner,
                        version=module.version,
                        module_name=module.module_name,
                        created_at=module.created_at,
                        env_vars=module.env_vars,
                        repo_name=module.repo_name,
                        project_id=module.project_mappings[0].project_id,
                        path=module.project_mappings[0].path
                    )

                # Get all relations
                relations = db.query(ModuleRelation).all()

                for relation in relations:
                    graph.add_edge(
                        relation.source_id,
                        relation.target_id,
                        key=f"{relation.source_id}_{relation.target_id}_{relation.relation_type}",
                        type=relation.relation_type,
                        created_at=relation.created_at,
                        description=relation.description
                    )

                return graph

        except Exception as e:
            raise ModuleError(f"Failed to build module graph: {str(e)}")


    def delete_module(self, module_id: str):
        """Delete module and its project mappings"""
        try:
            with self._get_db() as db:
                module = db.query(Module).filter_by(module_id=module_id).first()
                if not module:
                    return

                repo_name = module.repo_name

                # SQLAlchemy will handle cascading deletes based on relationships
                db.delete(module)
                db.commit()

                # Delete repository
                try:
                    self.repo_service.delete_repository(repo_name)
                except RepoNotFoundError:
                    pass

        except Exception as e:
            raise ModuleError(f"Failed to delete module: {str(e)}")



    def get_linked_modules(
        self,
        module_id: str,
        relation_type: Optional[RelationType] = None
    ) -> List[ModuleMetadata]:
        """
        Get modules linked to the specified module. Both CONNECTION and CONTEXT
        relations are bi-directional.
        """
        try:
            with self._get_db() as db:
                # First find the related module IDs
                relation_query = (
                    select(
                        case(
                            (ModuleRelation.source_id == module_id, ModuleRelation.target_id),
                            else_=ModuleRelation.source_id
                        ).label('related_module_id')
                    )
                    .where(or_(
                        ModuleRelation.source_id == module_id,
                        ModuleRelation.target_id == module_id
                    ))
                )

                if relation_type:
                    relation_query = relation_query.where(ModuleRelation.relation_type == relation_type.value)

                # Then get the modules
                stmt = (
                    select(Module, ProjectModuleMapping)
                    .join(ProjectModuleMapping)
                    .where(Module.module_id.in_(relation_query))
                )

                logger.info(f"Relation type: {relation_type}")
                logger.info(f"Query: {stmt}")

                results = db.execute(stmt).all()
                logger.info(f"Results: {results}")
                
                return [
                    ModuleMetadata.from_orm(module, mapping)
                    for module, mapping in results
                ]

        except Exception as e:
            logger.error(f"Error in get_linked_modules: {str(e)}", exc_info=True)
            raise ModuleError(f"Failed to get linked modules: {str(e)}")




    def verify_connection_access(self, source_id: str, target_id: str) -> bool:
        """
        Verify source module has CONNECTION relation with target
        
        Args:
            source_id: Source module ID
            target_id: Target module ID
            
        Returns:
            bool: True if connection exists
            
        Raises:
            ModuleError: On database errors
        """
        try:
            with self._get_db() as db:
                relation = db.query(ModuleRelation).filter_by(
                    source_id=source_id,
                    target_id=target_id,
                    relation_type=RelationType.CONNECTION.value
                ).first()
                return relation is not None
        except Exception as e:
            raise ModuleError(f"Failed to verify connection access: {str(e)}")

    def get_module_metadata(self, module_id: str) -> ModuleMetadata:
        """
        Get metadata for a module
        
        Args:
            module_id: module ID
            
        Returns:
            ModuleMetadata: Module metadata
            
        Raises:
            ModuleError: If module not found
        """
        try:
            with self._get_db() as db:
                result = (
                    db.execute(
                        select(Module, ProjectModuleMapping)
                        .join(ProjectModuleMapping)
                        .filter(Module.module_id == module_id)
                    ).first()
                )

                if not result:
                    raise ModuleError(f"Module {module_id} not found")

                module, mapping = result
                return ModuleMetadata.from_orm(module, mapping)

        except Exception as e:
            raise ModuleError(f"Failed to get module metadata: {str(e)}")


    def get_module_path(self, module_id: str) -> Path:
        """Get module path"""

        module_info = self.get_module_metadata(module_id)

        return Path(self.module_base) / module_info.owner / module_info.kit_id / module_info.version



    def update_module_name(self, module_id: str, new_name: str):
        """
        Update module name
        
        Args:
            module_id: Module ID
            new_name: New module name
            
        Raises:
            ModuleError: If module not found or update fails
        """
        try:
            with self._get_db() as db:
                module = db.query(Module).filter_by(module_id=module_id).first()

                
                if not module:
                    raise ModuleError(f"Module {module_id} not found")
                    
                module.module_name = new_name
                module.updated_at = datetime.now(UTC)  # Add this if you want to track updates
                db.commit()
                
                logger.info(f"Updated name for module {module_id} to: {new_name}")
                
                return ModuleMetadata.from_orm(module, module.project_mappings[0])
                
        except Exception as e:
            raise ModuleError(f"Failed to update module name: {str(e)}")
        


    def update_module_env_var(
        self,
        module_id: str,
        env_var_name: str,
        env_var_value: str
    ):
        """
        Update/set environment variable for a module
        
        Args:
            module_id: Module ID
            env_var_name: Environment variable name
            env_var_value: Environment variable value
            
        Raises:
            ModuleError: If module not found or update fails
        """
        try:
            with self._get_db() as db:
                module = db.query(Module).filter_by(module_id=module_id).first()
                
                if not module:
                    raise ModuleError(f"Module {module_id} not found")
                    
                # Get current env vars and update
                env_vars = module.env_vars.copy()
                env_vars[env_var_name] = env_var_value
                
                # Assign the whole dict back to trigger SQLAlchemy change detection
                module.env_vars = env_vars
                module.updated_at = datetime.now(UTC)
                db.commit()
                db.refresh(module)  # Refresh to ensure we have latest state
                
                logger.info(f"Updated env var {env_var_name} for module {module_id}")
                
                return ModuleMetadata.from_orm(module, module.project_mappings[0])
                
        except Exception as e:
            raise ModuleError(f"Failed to update module env var: {str(e)}")

    def get_module_kit_config(self, module_id: str) -> KitConfig:
        """
        Get kit configuration for a module
        
        Args:
            module_id: Module ID
            
        Returns:
            KitConfig: Complete kit configuration
            
        Raises:
            ModuleError: If module not found or kit config cannot be retrieved
        """
        try:
            metadata = self.get_module_metadata(module_id)
            return self.kit_service.get_kit_config(
                owner=metadata.owner,
                kit_id=metadata.kit_id,
                version=metadata.version
            )
        except Exception as e:
            raise ModuleError(f"Failed to get kit config: {str(e)}")

    def get_relation_description(
        self,
        source_id: str,
        target_id: str,
        relation_type: RelationType
    ) -> Optional[str]:
        """Get the description of a module relation"""
        try:
            with self._get_db() as db:
                relation = db.query(ModuleRelation).filter_by(
                    source_id=source_id,
                    target_id=target_id,
                    relation_type=relation_type.value
                ).first()
                
                if not relation:
                    raise ModuleError("Relation not found")
                    
                return relation.description
        except Exception as e:
            raise ModuleError(f"Failed to get relation description: {str(e)}")

================
File: engine/src/engine/services/core/project.py
================
import uuid
from dataclasses import dataclass
from datetime import datetime, UTC
from typing import List, Optional

from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import Session

from engine.db.models import Project
from engine.db.session import SessionLocal


@dataclass
class ProjectMetadata:
    """Project metadata"""
    id: str
    name: str
    created_at: str

    @classmethod
    def from_orm(cls, project: Project) -> 'ProjectMetadata':
        """Convert SQLAlchemy Project object to ProjectMetadata"""
        return cls(
            id=project.id,
            name=project.name,
            created_at=project.created_at.isoformat()
        )


class ProjectError(Exception):
    """Base exception for project errors"""
    pass


class ProjectService:
    """Service for managing projects"""

    def __init__(self):
        """Initialize project service"""
        self._ensure_default_project()

    def _get_db(self) -> Session:
        return SessionLocal()

    def _ensure_default_project(self):
        """Ensure default project exists"""
        try:
            with self._get_db() as db:
                # Check if default project exists
                default_project = db.query(Project).filter_by(name="default").first()
                
                if not default_project:
                    # Create default project
                    default_id = "00000000-0000-0000-0000-000000000000"
                    default_project = Project(
                        id=default_id,
                        name="default",
                        created_at=datetime.now(UTC)
                    )
                    db.add(default_project)
                    db.commit()

        except Exception as e:
            raise ProjectError(f"Failed to ensure default project: {str(e)}")

    def create_project(self, name: str) -> ProjectMetadata:
        """Create new project"""
        try:
            project_id = str(uuid.uuid4())
            
            with self._get_db() as db:
                project = Project(
                    id=project_id,
                    name=name,
                    created_at=datetime.now(UTC)
                )
                db.add(project)
                db.commit()
                db.refresh(project)
                
                return ProjectMetadata.from_orm(project)

        except IntegrityError:
            raise ProjectError(f"Project with name '{name}' already exists")
        except Exception as e:
            raise ProjectError(f"Failed to create project: {str(e)}")

    def get_project(self, project_id: str) -> Optional[ProjectMetadata]:
        """Get project by ID"""
        try:
            with self._get_db() as db:
                stmt = select(Project).where(Project.id == project_id)
                project = db.execute(stmt).scalar_one_or_none()
                
                if project:
                    return ProjectMetadata.from_orm(project)
                return None

        except Exception as e:
            raise ProjectError(f"Failed to get project: {str(e)}")

    def get_all_projects(self) -> List[ProjectMetadata]:
        """Get all projects"""
        try:
            with self._get_db() as db:
                stmt = select(Project)
                projects = db.execute(stmt).scalars().all()
                return [ProjectMetadata.from_orm(project) for project in projects]

        except Exception as e:
            raise ProjectError(f"Failed to get projects: {str(e)}")

================
File: engine/src/engine/services/execution/action.py
================
import ast
import hashlib
import json
import os
import subprocess
import sys
import venv
import inspect
from pathlib import Path
from typing import Any, Dict, List, Set, Callable, Optional, Type, Union, get_args, get_origin, Literal
from types import UnionType

import cloudpickle
from pydantic import BaseModel, create_model

from engine.services.storage.repository import RepoService
from loguru import logger


class FunctionMetadata(BaseModel):
    """Function metadata in OpenAI function calling format"""
    name: str
    description: str
    parameters: Dict[str, Any]
    is_async: bool
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert metadata to dictionary format"""
        return {
            "name": self.name,
            "description": self.description, 
            "parameters": self.parameters,
            "is_async": self.is_async
        }

class FunctionParser(ast.NodeVisitor):
    """AST parser to extract function information in OpenAI schema format"""
    def __init__(self, function_name: str):
        self.function_name = function_name
        self.description = ""
        self.parameters: Dict[str, Any] = {
            "type": "object",
            "properties": {},
            "required": [],
            "additionalProperties": False
        }
        self.found = False
        self.is_async = False

    def _get_type_schema(self, annotation) -> Dict[str, Any]:
        """Convert Python type annotation to JSON schema"""
        if annotation is None:
            return {"type": "object"}

        if isinstance(annotation, ast.Name):
            type_map = {
                "str": {"type": "string"},
                "int": {"type": "integer"},
                "float": {"type": "number"},
                "bool": {"type": "boolean"},
                "list": {"type": "array"},
                "Dict": {"type": "object"},  # Handle Dict as a name directly
                "dict": {"type": "object"},
                "Any": {"type": "object"}
            }
            return type_map.get(annotation.id, {"type": "object"})

        elif isinstance(annotation, ast.Subscript):
            if isinstance(annotation.value, ast.Name):
                if annotation.value.id == "Dict":
                    # For Dict type, we specify it's an object that can have additional properties
                    return {
                        "type": "object",
                        "additionalProperties": True
                    }
                elif annotation.value.id == "List":
                    return {
                        "type": "array",
                        "items": self._get_type_schema(annotation.slice)
                    }
                elif annotation.value.id == "Tuple":
                    # For tuples, represent as array with fixed items
                    if isinstance(annotation.slice, ast.Tuple):
                        return {
                            "type": "array",
                            "items": [self._get_type_schema(item) for item in annotation.slice.elts],
                            "minItems": len(annotation.slice.elts),
                            "maxItems": len(annotation.slice.elts)
                        }
                    else:
                        return {"type": "array"}
                elif annotation.value.id == "Optional":
                    type_schema = self._get_type_schema(annotation.slice)
                    if isinstance(type_schema["type"], list):
                        if "null" not in type_schema["type"]:
                            type_schema["type"].append("null")
                    else:
                        type_schema["type"] = [type_schema["type"], "null"]
                    return type_schema
                elif annotation.value.id == "Union":
                    if isinstance(annotation.slice, ast.Tuple):
                        types = []
                        for elt in annotation.slice.elts:
                            type_schema = self._get_type_schema(elt)
                            if "type" in type_schema:
                                if isinstance(type_schema["type"], list):
                                    types.extend(type_schema["type"])
                                else:
                                    types.append(type_schema["type"])
                        return {"type": list(set(types))} if types else {"type": "object"}
        
        # Default fallback
        return {"type": "object"}
        
    def visit_FunctionDef(self, node: ast.FunctionDef):
        """Visit a function definition"""
        if node.name == self.function_name:
            self.found = True
            
            # Get docstring
            docstring = ast.get_docstring(node)
            self.description = docstring or ""
            
            # Process parameters
            for arg in node.args.args:
                if arg.arg == 'self':  # Skip self parameter
                    continue
                    
                # Get type annotation if available
                annotation = arg.annotation
                param_schema = self._get_type_schema(annotation)
                
                # Add description from docstring
                if docstring:
                    param_docs = [
                        line.strip()
                        for line in docstring.split("\n")
                        if f":param {arg.arg}:" in line
                    ]
                    if param_docs:
                        param_desc = param_docs[0].split(":", 2)[-1].strip()
                        param_schema["description"] = param_desc

                self.parameters["properties"][arg.arg] = param_schema
                
                # If no default value, parameter is required
                defaults_offset = len(node.args.defaults)
                args_offset = len(node.args.args) - defaults_offset
                if node.args.args.index(arg) < args_offset:
                    self.parameters["required"].append(arg.arg)

    def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef):
        """Visit an async function definition"""
        self.is_async = True
        self.visit_FunctionDef(node)

class ActionError(Exception):
    """Base exception for action errors"""
    pass



class ActionService:
    """Service for executing Python functions with shared environment"""

    def __init__(self, repo_service: RepoService, venv_base_path: str = ".data/.venvs"  ):
        self.venv_base_path = Path(venv_base_path)
        self.venv_base_path.mkdir(exist_ok=True)
        self.installed_packages: Dict[str, Set[str]] = {}
        self.repo_service = repo_service

    def _get_venv_path(self, folder_path: str) -> Path:
        """Get virtual environment path for a folder"""
        folder_hash = hashlib.md5(str(folder_path).encode()).hexdigest()[:8]
        return self.venv_base_path / f"venv_{folder_hash}"

    def _get_python_path(self, folder_path: str) -> Path:
        """Get Python executable path for a folder's virtual environment"""
        venv_path = self._get_venv_path(folder_path)
        return venv_path / ('Scripts' if os.name == 'nt' else 'bin') / ('python.exe' if os.name == 'nt' else 'python')

    def _get_pip_path(self, folder_path: str) -> Path:
        """Get pip executable path for a folder's virtual environment"""
        venv_path = self._get_venv_path(folder_path)
        return venv_path / ('Scripts' if os.name == 'nt' else 'bin') / ('pip.exe' if os.name == 'nt' else 'pip')

    def setup_environment(
        self,
        folder_path: str,
        requirements: List[str]
    ) -> Path:
        """Set up or update virtual environment for a folder"""
        try:
            folder_path = str(Path(folder_path).resolve())
            python_path = self._get_python_path(folder_path)

            # Create virtual environment if it doesn't exist
            if not python_path.exists():
                print(f"Creating new virtual environment for {folder_path}")
                venv.create(self._get_venv_path(folder_path), with_pip=True)
                self.installed_packages[folder_path] = set(['cloudpickle'])

                # Install cloudpickle by default
                subprocess.run(
                    [str(self._get_pip_path(folder_path)), 'install', 'cloudpickle'],
                    check=True,
                    capture_output=True,
                    text=True
                )

                # Add folder to Python path
                site_packages = self._get_venv_path(folder_path) / 'Lib' / 'site-packages' if os.name == 'nt' else self._get_venv_path(folder_path) / 'lib' / f'python{sys.version_info.major}.{sys.version_info.minor}' / 'site-packages'
                with open(site_packages / 'folder_path.pth', 'w') as f:
                    f.write(folder_path)

            # Install any missing requirements
            if folder_path not in self.installed_packages:
                self.installed_packages[folder_path] = set(['cloudpickle'])

            missing_packages = set(requirements) - self.installed_packages[folder_path]
            if missing_packages:
                print(f"Installing missing packages: {missing_packages}")
                try:
                    subprocess.run(
                        [str(self._get_pip_path(folder_path)), 'install'] + list(missing_packages),
                        check=True, 
                        capture_output=True,
                        text=True
                    )
                    logger.info(f"Installed missing packages: {missing_packages}")
                    self.installed_packages[folder_path].update(missing_packages)
                    logger.info(f"Installed missing packages: {missing_packages}")
                except subprocess.CalledProcessError as e:
                    raise ActionError(f"Failed to install requirements: {e.stderr}")

            return python_path

        except Exception as e:
            raise ActionError(f"Error setting up environment: {str(e)}")

    def get_function_metadata(
        self,
        folder_path: str,
        file_path: str,
        function_name: str
    ) -> FunctionMetadata:
        """Get function metadata in OpenAI function calling format"""
        logger.info(f"Getting metadata for function {function_name} in {file_path}")
        
        try:
            full_path = Path(folder_path) / file_path
            logger.debug(f"Full path: {full_path}")

            # Read the source code
            with open(full_path, 'r') as f:
                source = f.read()

            # Parse using AST
            tree = ast.parse(source)
            parser = FunctionParser(function_name)
            parser.visit(tree)

            if not parser.found:
                raise ActionError(f"Function {function_name} not found in {file_path}")

            return FunctionMetadata(
                name=function_name,
                description=parser.description,
                parameters=parser.parameters,
                is_async=parser.is_async
            )

        except Exception as e:
            logger.error(f"Error analyzing function: {str(e)}")
            raise ActionError(f"Error analyzing function: {str(e)}")



    def execute_function(
            self,
            folder_path: str,
            file_path: str,
            function_name: str,
            parameters: Dict[str, Any],
            requirements: List[str],
            env_vars: Dict[str, str],
            repo_name: str
        ) -> Any:
            """Execute a function in the shared environment"""
            try:
                # Convert to absolute paths
                venv_base = Path(self.venv_base_path).resolve()
                repo_path = Path(self.repo_service.get_repo_path(repo_name)).resolve()
                actions_path = Path(folder_path).resolve()
                
                # Setup/update virtual environment
                python_path = self.setup_environment(str(actions_path), requirements)

                logger.info(f"Executing function {function_name} in {file_path}")
                logger.info(f"Repository path: {repo_path}")
                logger.info(f"Actions folder path: {actions_path}")
                logger.info(f"Venv base path: {venv_base}")

                # Create venv directories if they don't exist
                venv_base.mkdir(parents=True, exist_ok=True)

                exec_script = f"""
import sys
import json
import cloudpickle
import os
from pathlib import Path
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    # Set environment variables
    env_vars = {env_vars}
    for key, value in env_vars.items():
        os.environ[key] = str(value)

    # Convert paths to Path objects
    repo_path = Path(r'{repo_path}')
    action_path = Path(r'{actions_path}')
    
    logger.info(f"Repository path: {{repo_path}}")
    logger.info(f"Action path: {{action_path}}")
    
    # Add paths to sys.path
    if str(repo_path) not in sys.path:
        sys.path.insert(0, str(repo_path))
    if str(action_path) not in sys.path:
        sys.path.insert(0, str(action_path))
    
    # Set current working directory to repo path
    os.chdir(repo_path)
    
    # Get absolute path to the module file
    module_file = action_path / r'{file_path}'
    logger.info(f"Loading module from: {{module_file}}")
    
    if not module_file.exists():
        raise FileNotFoundError(f"Module file not found: {{module_file}}")
    
    # Import the module
    import importlib.util
    spec = importlib.util.spec_from_file_location('dynamic_module', str(module_file))
    if spec is None:
        raise ImportError(f"Could not find module: {{module_file}}")
        
    module = importlib.util.module_from_spec(spec)
    if spec.loader is None:
        raise ImportError(f"Could not load module: {{module_file}}")
        
    spec.loader.exec_module(module)
    
    # Get and execute the function
    if not hasattr(module, '{function_name}'):
        raise AttributeError(f"Function {{function_name}} not found in {{module_file}}")
        
    func = getattr(module, '{function_name}')
    
    # Load parameters from absolute path
    params_file = Path(r'{venv_base}/params.json')
    with open(params_file, 'r') as f:
        parameters = json.load(f)
    
    # Execute
    result = func(**parameters)
    
    # Save result to absolute path
    result_file = Path(r'{venv_base}/result.json')
    with open(result_file, 'wb') as f:
        cloudpickle.dump(result, f)
        
except Exception as e:
    import traceback
    error_file = Path(r'{venv_base}/error.txt')
    error_file.write_text(traceback.format_exc())
    raise
"""
                # Use absolute paths for all files
                exec_path = (venv_base / "exec.py").resolve()
                params_path = (venv_base / "params.json").resolve()
                result_path = (venv_base / "result.json").resolve()
                error_path = (venv_base / "error.txt").resolve()

                try:
                    # Write execution script
                    logger.info(f"Writing execution script to {exec_path}")
                    exec_path.write_text(exec_script)
                    
                    # Save parameters
                    logger.info(f"Writing parameters to {params_path}")
                    with open(params_path, 'w') as f:
                        json.dump(parameters, f)
                    

                    process_env = {}
                    process_env.update({key: str(value) for key, value in env_vars.items()})

                    # Execute
                    try:
                        process = subprocess.run(
                            [str(python_path), str(exec_path)],
                            check=True,
                            capture_output=True,
                            text=True,
                            env=process_env
                        )
                    except subprocess.CalledProcessError as e:
                        error_msg = f"Process failed with exit code {e.returncode}\nSTDOUT:\n{e.stdout}\nSTDERR:\n{e.stderr}"
                        raise ActionError(f"Error executing function: {error_msg}")

                    if process.returncode != 0:
                        logger.info(process.stdout)
                        logger.info(process.stderr)

                    # Check for errors
                    if error_path.exists():
                        error_msg = error_path.read_text()
                        raise ActionError(f"Function execution failed: {error_msg}")

                    # Load result
                    with open(result_path, "rb") as f:
                        result = cloudpickle.load(f)

                    return result

                finally:
                    # Cleanup
                    for path in [exec_path, params_path, result_path, error_path]:
                        try:
                            if path.exists():
                                path.unlink()
                        except:
                            pass

            except Exception as e:
                raise ActionError(f"Error executing function: {str(e)}")

# # Example test code demonstrating function metadata parsing capabilities
# if __name__ == "__main__":
#     from enum import Enum
#     from typing import List, Optional, Union, Literal
#     from pydantic import BaseModel, Field
    
#     # Example enum and Pydantic models
#     class UserRole(str, Enum):
#         ADMIN = "admin"
#         USER = "user"
#         GUEST = "guest"
    
#     class UserProfile(BaseModel):
#         """User profile information"""
#         name: str = Field(..., description="User's full name")
#         age: Optional[int] = Field(None, description="User's age")
#         roles: List[UserRole] = Field(default_factory=list, description="User's roles")
    
#     class TeamSettings(BaseModel):
#         """Team configuration settings"""
#         team_name: str = Field(..., description="Name of the team")
#         max_members: int = Field(default=10, description="Maximum number of team members")
#         features: List[str] = Field(default_factory=list, description="Enabled features")
    
#     # Example function with various type hints
#     async def create_team(
#         profile: UserProfile,
#         team_config: TeamSettings,
#         team_type: Literal["public", "private", "internal"],
#         metadata: Optional[Dict[str, Any]] = None,
#         sync_data: Union[bool, List[str]] = False
#     ) -> Dict[str, Any]:
#         """Create a new team with the given configuration.
        
#         Args:
#             profile: User profile creating the team
#             team_config: Team configuration settings
#             team_type: Type of team to create
#             metadata: Optional metadata for the team
#             sync_data: Whether to sync data or list of data types to sync
            
#         Returns:
#             Dictionary with team creation result
#         """
#         pass  # Function implementation not needed for schema generation example
    
#     # Example usage
#     try:
#         logger.info("Generating schema for example function...")
#         schema = function_to_schema(create_team)
#         logger.info("Generated schema:")
#         logger.info(json.dumps(schema, indent=2))
        
#         # The schema will include:
#         # - Complex types from Pydantic models (UserProfile, TeamSettings)
#         # - Literal types with specific allowed values
#         # - Optional parameters with defaults
#         # - Union types
#         # - Async function detection
#         # - Parameter descriptions from docstrings
        
#     except Exception as e:
#         logger.error(f"Error in example: {str(e)}")

================
File: engine/src/engine/services/execution/model.py
================
from typing import Any, Dict, List, Optional, Union
import os

from litellm import completion
import litellm

from loguru import logger

litellm.suppress_debug_info = True

# Model mappings by provider and their required env vars
MODEL_CONFIGS = {
    "openai": {
        "env_var": "OPENAI_API_KEY",
        "models": [
            "o1-mini", "o1-preview", "gpt-4o-mini", "gpt-4o-mini-2024-07-18",
            "gpt-4o", "gpt-4o-2024-08-06", "gpt-4o-2024-05-13", "gpt-4-turbo",
            "gpt-4-0125-preview", "gpt-4-1106-preview", "gpt-3.5-turbo-1106",
            "gpt-3.5-turbo", "gpt-3.5-turbo-0301", "gpt-3.5-turbo-0613",
            "gpt-3.5-turbo-16k", "gpt-3.5-turbo-16k-0613", "gpt-4",
            "gpt-4-0314", "gpt-4-0613", "gpt-4-32k", "gpt-4-32k-0314",
            "gpt-4-32k-0613"
        ]
    },
    "anthropic": {
        "env_var": "ANTHROPIC_API_KEY",
        "models": [
            "claude-3-5-sonnet-20241022",   "claude-3-5-sonnet-20240620", "claude-3-haiku-20240307",
            "claude-3-opus-20240229"
        ]
    },
    "mistral": {
        "env_var": "MISTRAL_API_KEY",
        "models": [
            "mistral/mistral-small-latest", "mistral/mistral-medium-latest",
            "mistral/mistral-large-2407", "mistral/mistral-large-latest",
            "mistral/open-mistral-7b", "mistral/open-mixtral-8x7b",
            "mistral/open-mixtral-8x22b", "mistral/codestral-latest",
            "mistral/open-mistral-nemo", "mistral/open-mistral-nemo-2407",
            "mistral/open-codestral-mamba", "mistral/codestral-mamba-latest"
        ]
    },
    "deepseek": {
        "env_var": "DEEPSEEK_API_KEY",
        "models": [
            "deepseek/deepseek-chat", "deepseek/deepseek-coder",
            "deepseek/deepseek-reasoner"
        ]
    },
    "groq": {
        "env_var": "GROQ_API_KEY",
        "models": [
            "groq/llama-3.1-8b-instant", "groq/llama-3.1-70b-versatile",
            "groq/llama3-8b-8192", "groq/llama3-70b-8192",
            "groq/llama2-70b-4096", "groq/mixtral-8x7b-32768",
            "groq/gemma-7b-it"
        ]
    }
}

class ModelService:
    def get_available_models(self) -> Dict[str, List[str]]:
        """
        Get list of available models based on environment variables
        
        Returns:
            Dictionary of provider: list of available models
        """
        available_models = {}
        
        for provider, config in MODEL_CONFIGS.items():
            if os.environ.get(config["env_var"]):
                available_models[provider] = config["models"]
                
        return available_models

    """Simple service for managing LLM interactions"""

    def __init__(self, model_name: str = "claude-3-5-sonnet-20240620"):
        self.model_name = model_name
    
    def set_model(self, model_name: str) -> str:
        """
        Set the model name
        
        Args:
            model_name: Name of the model to use
            
        Returns:
            The new model name
        """
        self.model_name = model_name
        return self.model_name

    def get_current_model(self) -> str:
        """
        Get the currently selected model name
        
        Returns:
            The current model name
        """
        return self.model_name

    async def chat_completion(
        self,
        messages: List[Dict[str, str]],
        stream: bool = False,
        tools: Optional[List[Dict[str, Any]]] = None,
        tool_choice: Optional[Union[str, Dict[str, str]]] = None,
        **kwargs
    ):
        """
        Get chat completion from model
        
        Args:
            messages: List of chat messages
            stream: Whether to stream the response
            tools: Optional list of tools/functions
            tool_choice: Optional tool choice configuration
            **kwargs: Additional arguments to pass to completion
        """


        try:
            response = completion(
                model=self.model_name,
                messages=messages,
                stream=stream,
                tools=tools,
                tool_choice=tool_choice,
                **kwargs
            )
            return response
        except Exception as e:
            raise Exception(f"Chat completion failed: {str(e)}")

================
File: engine/src/engine/services/execution/state.py
================
from datetime import datetime, UTC
from enum import Enum
from typing import Any, Dict

from sqlalchemy import select, update
from sqlalchemy.orm import Session

from engine.db.models import AgentStatus, WorkflowStatus
from engine.db.session import SessionLocal




class AgentState(Enum):
    STANDBY = "STANDBY"
    EXECUTING = "EXECUTING"

class InvalidTransition(Exception):
    """Exception for invalid stage/state transitions"""
    pass

class StateService:
    def _get_db(self) -> Session:
        return SessionLocal()


    def initialize_module(self, module_id: str):
        """Set up initial stage and state for new module"""
        with self._get_db() as db:
            status = AgentStatus(
                module_id=module_id,
                stage="INITIALIZE",
                state=AgentState.STANDBY.value,
                last_updated=datetime.now(UTC)
            )
            db.merge(status)  # merge instead of add to handle both insert and update
            db.commit()

    def get_status(self, module_id: str) -> tuple[Any, AgentState]:
        """Get current stage and state"""
        with self._get_db() as db:
            stmt = select(AgentStatus).where(AgentStatus.module_id == module_id)
            status = db.execute(stmt).scalar_one_or_none()

            if status is None:
                # Initialize if not exists
                self.initialize_module(module_id)
                return "INITIALIZE", AgentState.STANDBY

            return "INITIALIZE", AgentState(status.state)


    def set_executing(self, module_id: str):
        """Set state to executing"""
        with self._get_db() as db:
            status = db.query(AgentStatus).filter_by(module_id=module_id).first()
            if status:
                status.state = AgentState.EXECUTING.value
                status.last_updated = datetime.now(UTC)
                db.commit()

    def set_standby(self, module_id: str):
        """Set state back to standby"""
        with self._get_db() as db:
            status = db.query(AgentStatus).filter_by(module_id=module_id).first()
            if status:
                status.state = AgentState.STANDBY.value
                status.last_updated = datetime.now(UTC)
                db.commit()

    def get_last_updated(self, module_id: str) -> str:
        """Get timestamp of last status update"""
        with self._get_db() as db:
            stmt = select(AgentStatus).where(AgentStatus.module_id == module_id)
            status = db.execute(stmt).scalar_one_or_none()
            
            if status is None:
                self.initialize_module(module_id)
                return datetime.now(UTC).isoformat()
            
            return status.last_updated.isoformat()


    def complete_workflow(self, module_id: str, workflow_type: str) -> Dict[str, Any]:
        """Mark a workflow as completed"""

        with SessionLocal() as db:
            # Try to update existing record
            stmt = (
                update(WorkflowStatus)
                .where(
                    WorkflowStatus.module_id == module_id,
                    WorkflowStatus.workflow_type == workflow_type
                )
                .values(
                    is_completed=True,
                    last_updated=datetime.now(UTC)
                )
            )
            result = db.execute(stmt)
            
            # If no record exists, insert new one
            if result.rowcount == 0:
                workflow_status = WorkflowStatus(
                    module_id=module_id,
                    workflow_type=workflow_type,
                    is_completed=True,
                    last_updated=datetime.now(UTC)
                )
                db.add(workflow_status)
            
            db.commit()
            
            return {
                "status": "success", 
                "message": f"Workflow {workflow_type} marked as completed"
            }
            
    def get_workflow_status(self, module_id: str, workflow_type: str) -> bool:
        """Get completion status for a workflow"""
        with self._get_db() as db:
            stmt = select(WorkflowStatus).where(
                WorkflowStatus.module_id == module_id,
                WorkflowStatus.workflow_type == workflow_type
            )
            status = db.execute(stmt).scalar_one_or_none()
            
            return bool(status and status.is_completed)

================
File: engine/src/engine/services/execution/workflow.py
================
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Optional, TypedDict, NotRequired

import yaml
import os
from engine.services.storage.repository import RepoService
from engine.utils.yaml import YAMLUtils
from pydantic import BaseModel
from engine.services.core.kit import KitConfig, KitService

from engine.services.execution.action import ActionError, ActionService, FunctionMetadata
from engine.services.core.module import ModuleError, ModuleService, RelationType
from engine.services.storage.resource import ResourceService
from loguru import logger
from engine.services.core.kit import WorkflowAction

class EnhancedWorkflowAction(BaseModel):
    """Enhanced workflow action that wraps WorkflowAction with additional metadata"""
    action: WorkflowAction
    module_id: str
    workflow: Optional[str] = None  # Workflow name if part of workflow
    metadata: Optional[FunctionMetadata] = None
    error: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary representation"""
        action_dict = self.action.to_dict()
        return {
            "action":action_dict,
            "module_id": self.module_id,
            "workflow": self.workflow,
            "metadata": self.metadata.dict() if self.metadata else None,
            "error": self.error
        }

class WorkflowMetadataResult(BaseModel):
    """Pydantic model for complete workflow metadata response"""
    instructions: str
    actions: List[EnhancedWorkflowAction]
    requirements: List[str]

@dataclass
class ActionInfo:
    """Stores information about an action"""
    module_id: str
    workflow: str
    name: str
    description: Optional[str] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert ActionInfo to dictionary"""
        return {
            "module_id": self.module_id,
            "workflow": self.workflow,
            "action_path": self.action_path,
            "name": self.name,
            "description": self.description
        }



class Workflow(BaseModel):
    """Workflow metadata"""
    instruction: Optional[str] = None
    actions: List[WorkflowAction] = []  # Make actions optional with empty default

class WorkflowExecutionResult(BaseModel):
    """Pydantic model for workflow execution result"""
    status: str
    message: str 
    result: Any

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary representation"""
        return {
            "status": self.status,
            "message": self.message,
            "result": self.result
        }

class WorkflowError(Exception):
    """Base exception for workflow actions"""
    pass

class WorkflowService:
    """Service for managing module workflows"""

    def __init__(
        self,
        workspace_base: str | Path,
        module_base: str | Path,
        module_service: ModuleService,
        action_service: ActionService,
        resource_service: ResourceService,
        repo_service: RepoService,
        kit_service: KitService
    ):
        self.workspace_base = Path(workspace_base)
        self.module_base = Path(module_base)
        self.module_service = module_service
        self.action_service = action_service
        self.resource_service = resource_service
        self.repo_service = repo_service
        self.kit_service = kit_service



    def get_workflow_metadata(self, module_id: str, workflow: str) -> WorkflowMetadataResult:
        """Get workflow metadata including instructions and steps"""
        try:
            # Get kit config which has all paths resolved and content loaded
            kit_config = self.module_service.get_module_kit_config(module_id)
            
            if workflow not in kit_config.workflows:
                logger.error(f"Workflow '{workflow}' not found in kit config")
                raise WorkflowError(f"Workflow '{workflow}' not found")

            workflow_data = kit_config.workflows[workflow]
            
            # Get function metadata for each action
            steps_metadata: List[EnhancedWorkflowAction] = []
            for action in workflow_data.actions:
                try:
                    # Extract file info from pre-resolved paths
                    actions_dir = str(Path(action.full_file_path).parent)
                    file_path = Path(action.full_file_path).name
                    
                    # Get function metadata
                    metadata: FunctionMetadata = self.action_service.get_function_metadata(
                        folder_path=actions_dir,
                        file_path=file_path,
                        function_name=action.function_name
                    )
                    steps_metadata.append(EnhancedWorkflowAction(
                        action=action,
                        module_id=module_id,
                        workflow=workflow,
                        metadata=metadata
                    ))


                except (ActionError, WorkflowError) as e:
                    logger.error(f"Failed to get metadata for action {action.name}: {str(e)}")
                    # Add error information but continue processing other actions
               

            result = WorkflowMetadataResult(
                instructions=workflow_data.instruction_content,
                actions=steps_metadata,
                requirements=kit_config.dependencies
            )
            logger.info(f"Got workflow metadata for {workflow}:\n{result}")
            return result

        except (ModuleError, WorkflowError) as e:
            raise WorkflowError(str(e))
        except Exception as e:
            logger.error(f"Unexpected error getting workflow metadata: {str(e)}")
            raise WorkflowError(f"Failed to get workflow metadata: {str(e)}")


    def get_shared_actions_metadata(self, module_id: str) -> WorkflowMetadataResult:
        """Get metadata for all shared actions from this module and context modules"""
        try:
            # Get all modules with CONTEXT relation (including this module)
            context_modules = self.module_service.get_linked_modules(
                module_id=module_id,
                relation_type=RelationType.CONTEXT
            )

            steps_metadata: List[EnhancedWorkflowAction] = []
            all_requirements = set()

            for module in context_modules:
                try:
                    # Get kit config for module
                    kit_config = self.module_service.get_module_kit_config(module.module_id)
                    
                    # Add any requirements
                    all_requirements.update(kit_config.dependencies)

                    # Get actions from this module
                    for action in kit_config.shared_actions:
                        try:
                            # Extract file info from paths
                            actions_dir = self.kit_service.get_kit_path(module.module_id) / "actions"
                            file_path = str(Path(action.path))

                            # Get function metadata
                            metadata = self.action_service.get_function_metadata(
                                folder_path=actions_dir,
                                file_path=file_path,
                                function_name=action.function_name
                            )

                            steps_metadata.append(EnhancedWorkflowAction(
                                action=action,
                                module_id=module.module_id,
                                workflow=None,  # Shared actions don't belong to a workflow
                                metadata=metadata
                            ))
                        except (ActionError, WorkflowError) as e:
                            logger.error(f"Failed to get metadata for shared action {action.name} in module {module.module_id}: {str(e)}")

                except Exception as e:
                    logger.error(f"Failed to process shared actions for module {module.module_id}: {str(e)}")
                    continue

            return WorkflowMetadataResult(
                instructions="",  # Shared actions don't have instructions
                actions=steps_metadata,
                requirements=list(all_requirements)  # Convert set back to list
            )

        except (ModuleError, WorkflowError) as e:
            raise WorkflowError(str(e))
        except Exception as e:
            logger.error(f"Unexpected error getting shared actions metadata: {str(e)}")
            raise WorkflowError(f"Failed to get shared actions metadata: {str(e)}")

    def execute_shared_action(
        self,
        module_id: str,
        action_info: ActionInfo,
        parameters: Dict[str, Any]
    ) -> WorkflowExecutionResult:
        """Execute a shared action from any accessible module"""
        try:
            # Get target module metadata
            target_module = self.module_service.get_module_metadata(action_info.module_id)

            # Get kit config for target module
            kit_config = self.module_service.get_module_kit_config(action_info.module_id)
            
            # Verify action exists
            action = next(
                (a for a in kit_config.shared_actions if a.name == action_info.name),
                None
            )
            if not action:
                raise WorkflowError(f"Shared action '{action_info.name}' not found")

            # Get action path info
            actions_dir = self.kit_service.get_kit_path(action_info.module_id) / "actions"
            file_path = str(Path(action.path))

            # Execute function using module context
            result = self.action_service.execute_function(
                folder_path=str(actions_dir),
                file_path=file_path,
                function_name=action.function_name,
                parameters=parameters,
                requirements=kit_config.dependencies,
                env_vars=target_module.env_vars,
                repo_name=target_module.repo_name
            )

            return WorkflowExecutionResult(
                status="success",
                message=f"Successfully executed shared action {action_info.name} from module {action_info.module_id}",
                result=result
            )

        except (ModuleError, ActionError, WorkflowError) as e:
            raise WorkflowError(str(e))

    def execute_workflow_action(
        self,
        action_info: ActionInfo,
        parameters: Dict[str, Any]
    ) -> Any:
        """Execute a workflow action with full context."""
        try:
            module_path = self.module_service.get_module_path(action_info.module_id)
            # Get kit config which has all paths resolved
            kit_config = self.module_service.get_module_kit_config(action_info.module_id)
            module_metadata = self.module_service.get_module_metadata(action_info.module_id)

            logger.info(f"Executing action {action_info.name} in workflow {action_info.workflow}")
            
            if action_info.workflow not in kit_config.workflows:
                raise WorkflowError(f"Workflow '{action_info.workflow}' not found")

            workflow_data = kit_config.workflows[action_info.workflow]
            logger.info(f"""Executing action '{action_info.name}' in workflow {action_info.workflow}
            Config: {workflow_data}
            """)

            # Find the action in workflow
            action = next(
                (a for a in workflow_data.actions if a.name == action_info.name), 
                None
            )
            
            if not action:
                raise WorkflowError(
                    f"Action '{action_info.name}' not found in workflow '{action_info.workflow}'"
                )

            # Extract file info from pre-resolved paths
            actions_dir = str(module_path / "actions")
            file_path = str(Path(action.path.split(":")[0]+".py"))

            logger.info(f"Folder Path: {actions_dir}, File Path: {file_path}, Function Name: {action.function_name}, Parameters: {parameters}, Requirements: {kit_config.dependencies}, Env Vars: {module_metadata.env_vars}, Repo Name: {module_metadata.repo_name}")

            # Execute function using resolved paths
            result = self.action_service.execute_function(
                folder_path=actions_dir,
                file_path=file_path,
                function_name=action.function_name,
                parameters=parameters,
                requirements=kit_config.dependencies,
                env_vars=module_metadata.env_vars,
                repo_name=module_metadata.repo_name
            )

            return result

        except (ModuleError, ActionError, WorkflowError) as e:
            raise WorkflowError(str(e))

================
File: engine/src/engine/services/storage/repository.py
================
import re
import shutil
from dataclasses import dataclass
from datetime import datetime, UTC
from pathlib import Path
from typing import List, Optional

from git import Actor, GitCommandError, Repo
from git.repo import Repo


@dataclass
class CommitInfo:
    commit_message: str
    author_name: Optional[str] = None
    author_email: Optional[str] = None

@dataclass
class MatchPosition:
    line_number: int
    start_char: int
    end_char: int
    line_content: str
    score: float

@dataclass
class SearchResult:
    file_path: str
    matches: List[MatchPosition]
    total_matches: int
    file_score: float

class RepositoryError(Exception):
    """Base exception for repository operations"""
    pass

class RepoNotFoundError(RepositoryError):
    """Repository not found"""
    pass

class RepoExistsError(RepositoryError):
    """Repository already exists"""
    pass

class RepoService:
    """Service for managing Git repositories"""

    def __init__(
        self,
        base_path: str | Path
    ):
        """
        Initialize repository service
        
        Args:
            base_path: Base directory for storing repositories
            create_index_func: Function to create search index
        """
        self.base_path = Path(base_path)


        # Create necessary directories
        self.base_path.mkdir(parents=True, exist_ok=True)

    def get_repo_path(self, repo_name: str) -> Path:
        """Get repository path"""
        return self.base_path / repo_name



    def _init_git_repo(self, repo_path: Path) -> Repo:
        """Initialize git repository with default configuration"""
        repo = Repo.init(repo_path)

        with repo.config_writer() as git_config:
            if not git_config.has_section('core'):
                git_config.add_section('core')
            git_config.set_value('core', 'worktree', str(repo_path.absolute()).replace('\\', '/'))

            if not git_config.has_section('user'):
                git_config.add_section('user')
            git_config.set_value('user', 'name', 'FastAPI Git Service')
            git_config.set_value('user', 'email', 'fastapi@localhost')

        return repo

    def create_repository(
        self,
        repo_name: str,
        content_file,
        filename: str,
        extract_func
    ) -> dict:
        """
        Create a new repository from uploaded content
        
        Args:
            repo_name: Name of the repository
            content_file: File-like object containing repository content
            filename: Original filename
            extract_func: Function to extract zip files
            
        Returns:
            dict: Repository creation info
            
        Raises:
            RepoExistsError: If repository already exists
        """
        repo_path = self.get_repo_path(repo_name)

        if repo_path.exists():
            raise RepoExistsError(f"Repository {repo_name} already exists")

        try:
            # Create repository directory
            repo_path.mkdir(parents=True)
            temp_file = repo_path / filename

            # Save uploaded file
            with temp_file.open("wb") as buffer:
                shutil.copyfileobj(content_file, buffer)

            # Extract if zip file
            if filename.endswith('.zip'):
                extract_func(temp_file, repo_path)
                temp_file.unlink()

            # Initialize git repository
            try:
                repo = self._init_git_repo(repo_path)
                repo.git.add(A=True)
                repo.index.commit("Initial commit")
            except Exception as e:
                print(f"Git initialization error: {str(e)}")


            return {
                "repo_name": repo_name,
                "created_at": datetime.now().isoformat(),
                "status": "success"
            }

        except Exception as e:
            if repo_path.exists():
                shutil.rmtree(repo_path)
            raise RepositoryError(f"Failed to create repository: {str(e)}")

    def list_repositories(self) -> List[str]:
        """List all repositories"""
        return [d.name for d in self.base_path.iterdir() if d.is_dir()]

    def list_files(self, repo_name: str) -> List[str]:
        """
        List all files in a repository
        
        Args:
            repo_name: Repository name
            
        Returns:
            List[str]: List of file paths
            
        Raises:
            RepoNotFoundError: If repository doesn't exist
        """
        repo_path = self.get_repo_path(repo_name)

        if not repo_path.exists():
            raise RepoNotFoundError(f"Repository {repo_name} not found")

        files = []
        for file_path in repo_path.rglob("*"):
            if file_path.is_file() and not file_path.name.startswith('.'):
                files.append(str(file_path.relative_to(repo_path)))

        return files

    def delete_repository(self, repo_name: str) -> None:
        """
        Delete a repository and its search index
        
        Args:
            repo_name: Repository to delete
            
        Raises:
            RepoNotFoundError: If repository doesn't exist
        """
        repo_path = self.get_repo_path(repo_name)
        index_path = self._get_index_path(repo_name)

        if not repo_path.exists():
            raise RepoNotFoundError(f"Repository {repo_name} not found")

        try:
            shutil.rmtree(repo_path)
            if index_path.exists():
                shutil.rmtree(index_path)
        except Exception as e:
            raise RepositoryError(f"Failed to delete repository: {str(e)}")

    def commit_changes(
        self,
        repo_name: str,
        commit_info: CommitInfo
    ) -> dict:
        """
        Stage and commit changes in repository
        
        Args:
            repo_name: Repository name
            commit_info: Commit information
            
        Returns:
            dict: Commit result info
            
        Raises:
            RepoNotFoundError: If repository doesn't exist
        """
        repo_path = self.get_repo_path(repo_name)

        if not repo_path.exists():
            raise RepoNotFoundError(f"Repository {repo_name} not found")

        try:
            # Get or initialize repository
            try:
                repo = Repo(repo_path)
            except Exception:
                repo = self._init_git_repo(repo_path)

            # Check for changes
            status = repo.git.status(porcelain=True)
            if not status:
                return {
                    "status": "success",
                    "message": "No changes to commit",
                    "committed": False
                }

            # Stage changes
            repo.git.add(A=True)

            # Create commit
            author = Actor(
                commit_info.author_name or "FastAPI Git Service",
                commit_info.author_email or "fastapi@localhost"
            )

            commit = repo.index.commit(
                commit_info.commit_message,
                author=author,
                committer=author
            )

            # Get changed files
            changed_files = []
            if commit.parents:
                for diff in commit.parents[0].diff(commit):
                    if diff.a_path:
                        changed_files.append(diff.a_path)
                    if diff.b_path and diff.b_path not in changed_files:
                        changed_files.append(diff.b_path)
            else:
                changed_files = [item.path for item in commit.tree.traverse()
                               if item.type == 'blob']

            return {
                "status": "success",
                "message": "Changes committed successfully",
                "committed": True,
                "commit_hash": commit.hexsha,
                "commit_message": commit_info.commit_message,
                "files_changed": changed_files
            }

        except GitCommandError as e:
            raise RepositoryError(f"Git error: {str(e)}")
        except Exception as e:
            raise RepositoryError(f"Failed to commit changes: {str(e)}")


    def update_file(
        self,
        repo_name: str,
        file_path: str,
        content: str,
        path_validator
    ) -> dict:
        """
        Update file content in repository
        
        Args:
            repo_name: Repository name
            file_path: Path to file
            content: New file content
            path_validator: Function to validate file path
            
        Returns:
            dict: Update result info
            
        Raises:
            RepoNotFoundError: If repository doesn't exist
        """
        repo_path = self.get_repo_path(repo_name)

        if not repo_path.exists():
            raise RepoNotFoundError(f"Repository {repo_name} not found")

        if not path_validator(repo_path, file_path):
            raise RepositoryError("Invalid file path")

        try:
            full_file_path = (repo_path / file_path).resolve()
            full_file_path.parent.mkdir(parents=True, exist_ok=True)

            # Create backup if file exists
            backup_path = None
            if full_file_path.exists():
                backup_path = full_file_path.with_suffix(full_file_path.suffix + '.bak')
                shutil.copy2(full_file_path, backup_path)

            # Update file
            with open(full_file_path, 'w', encoding='utf-8') as f:
                f.write(content)


            # Remove backup if successful
            if backup_path and backup_path.exists():
                backup_path.unlink()

            return {
                "status": "success",
                "message": f"File {'updated' if backup_path else 'created'} successfully",
                "file_path": file_path,
                "updated_at": datetime.now().isoformat()
            }

        except Exception as e:
            # Restore from backup if exists
            if backup_path and backup_path.exists():
                shutil.copy2(backup_path, full_file_path)
                backup_path.unlink()
            raise RepositoryError(f"Failed to update file: {str(e)}")

================
File: engine/src/engine/services/storage/resource.py
================
import glob
from pathlib import Path
from typing import List, Optional
from datetime import datetime, UTC
import glob
from sqlalchemy import desc

import yaml
from engine.services.execution.model import ModelService
from engine.utils.yaml import YAMLUtils
from pydantic import BaseModel
from sqlalchemy.orm import Session

from engine.services.core.module import ModuleError, ModuleService
from loguru import logger
from engine.db.models import WorkManifest, ChatHistory
from engine.db.session import get_db


class Resource(BaseModel):
    """Resource metadata"""
    path: str  # Full path including folders e.g. "folder1/folder2/file.txt"
    name: str  # Just the file name e.g. "file.txt"
    content: str
    description: Optional[str] = None

class ResourceError(Exception):
    """Base exception for resource operations"""
    pass

class ResourceService:
    """Service for managing module resources"""

    def __init__(
        self,
        workspace_base: str | Path,
        module_base: str | Path,
        repo_base: str | Path,
        module_service: ModuleService,
        model_service: ModelService
    ):
        self.workspace_base = Path(workspace_base)
        self.module_base = Path(module_base)
        self.repo_base = Path(repo_base)
        self.module_service = module_service
        self.model_service = model_service



    def _read_file_content(self, file_path: Path) -> str:
        """Read file content safely"""
        try:
            with open(file_path, 'r') as f:
                return f.read()
        except Exception as e:
            raise ResourceError(f"Failed to read file {file_path}: {str(e)}")

    def get_workspace_resources(self, module_id: str) -> List[Resource]:
        """Get workspace resources"""
        try:
            module_info = self.module_service.get_module_metadata(module_id)
            module_path = self.module_service.get_module_path(module_id)
            logger.info(f"Getting workspace resources for module {module_info}")

            logger.info(f"Reading kit.yaml from {module_path}")

            kit = YAMLUtils.read_kit(module_path)

            if not kit.get('workspace', {}).get('files'):
                return []

            workspace_path = self.repo_base / module_info.repo_name

            if not workspace_path.exists():
                return []

            resources = []
            for file_spec in kit['workspace']['files']:
                pattern = file_spec['path']
                matched_files = glob.glob(str(workspace_path / pattern), recursive=True)

                for file_path in matched_files:
                    relative_path = Path(file_path).relative_to(workspace_path).as_posix()
                    resources.append(Resource(
                        path=relative_path,
                        name=Path(file_path).name,
                        content=self._read_file_content(Path(file_path)),
                        description=file_spec.get('description')
                    ))

            return resources

        except (ModuleError, ResourceError) as e:
            raise ResourceError(str(e))

    def get_documentation_resources(self, module_id: str) -> List[Resource]:
        """Get documentation resources"""
        try:
            # Get kit config with full paths populated
            kit_config = self.module_service.get_module_kit_config(module_id)
            
            # Early return if no documentation
            if not kit_config.instructions or not kit_config.instructions.documentation:
                return []

            resources = []
            # Process each documentation resource
            for doc in kit_config.instructions.documentation:
                file_path = Path(doc.full_path)
                if file_path.exists():
                    resources.append(Resource(
                        path=doc.path,
                        name=file_path.name,
                        content=self._read_file_content(file_path),
                        description=doc.description
                    ))

            return resources

        except (ModuleError, ResourceError) as e:
            raise ResourceError(str(e))

    def get_specification_resources(self, module_id: str) -> List[Resource]:
        """Get specification resources"""
        try:
            # Get kit config with full paths populated
            kit_config = self.module_service.get_module_kit_config(module_id)
            
            # Early return if no specifications
            if not kit_config.instructions or not kit_config.instructions.specification:
                return []

            resources = []
            # Process each specification resource
            for spec in kit_config.instructions.specification:
                file_path = Path(spec.full_path)
                if file_path.exists():
                    resources.append(Resource(
                        path=spec.path,
                        name=file_path.name,
                        content=self._read_file_content(file_path),
                        description=spec.description
                    ))

            return resources

        except (ModuleError, ResourceError) as e:
            raise ResourceError(str(e))
            
    def _get_recent_chat_history(self, module_id: str, db: Session, limit: int = 10) -> str:
        """Get recent chat history across all workflows"""
        try:
            messages = (
                db.query(ChatHistory)
                .filter(ChatHistory.module_id == module_id)
                .order_by(desc(ChatHistory.timestamp))
                .limit(limit)
                .all()
            )
            
            # Format chat history
            formatted_messages = []
            for msg in reversed(messages):  # Show in chronological order
                formatted_messages.append(
                    f"[{msg.timestamp.strftime('%Y-%m-%d %H:%M:%S')} - {msg.section}]\n"
                    f"{msg.role}: {msg.content}\n"
                )
                
            return "\n".join(formatted_messages)
        except Exception as e:
            logger.warning(f"Error getting chat history: {str(e)}")
            return ""
            
    async def generate_work_manifest(self, module_id: str, db: Session) -> Optional[Resource]:
        """Generate and store a work manifest for the module"""
        try:
            # Get workspace files content
            workspace_files = self.get_workspace_resources(module_id)
            files_content = "\n\n".join([f"File: {res.path}\n{res.content}" for res in workspace_files])
            
            # Get recent chat history
            chat_history = self._get_recent_chat_history(module_id, db)
            
            # Prepare prompt for the model
            prompt = f"""Based on the following repository files and recent chat history, generate a markdown document 
            that explains the current state of the module. Focus on:
            1. Key files and their purposes
            2. Recent changes and their impact
            3. Current development status
            4. Potential next steps

            Repository files:
            {files_content}

            Recent chat history:
            {chat_history}
            """
            
            # Generate manifest using model
            if not self.model_service:
                raise ResourceError("Model service not initialized")
                
            response = await self.model_service.chat_completion(
                messages=[{
                    "role": "system",
                    "content": "You are a technical documentation expert responsible for generating clear and concise module state descriptions."
                },
                {
                    "role": "user",
                    "content": prompt
                }]
            )
            
            manifest_content = response.choices[0].message.content
            
            # Store in database
            manifest = WorkManifest(
                module_id=module_id,
                content=manifest_content,
                timestamp=datetime.now(UTC)
            )
            db.add(manifest)
            db.commit()
            
            # Return as resource
            timestamp = manifest.timestamp.strftime("%Y%m%d_%H%M%S")
            return Resource(
                path=f"manifest_{timestamp}.md",
                name=f"Manifest {timestamp}.md",
                content=manifest_content,
                description="AI-generated work manifest describing current module state"
            )
            
        except Exception as e:
            raise ResourceError(f"Failed to generate work manifest: {str(e)}")
            
    def get_manifest_resources(self, module_id: str, db: Session) -> List[Resource]:
        """Get all work manifests for a module"""
        try:
            manifests = (
                db.query(WorkManifest)
                .filter(WorkManifest.module_id == module_id)
                .order_by(desc(WorkManifest.timestamp))
                .all()
            )
            
            return [
                Resource(
                    path=f"manifest_{m.timestamp.strftime('%Y%m%d_%H%M%S')}.md",
                    name=f"Manifest {m.timestamp.strftime('%Y-%m-%d %H:%M:%S')}.md", 
                    content=m.content,
                    description="AI-generated work manifest describing module state"
                )
                for m in manifests
            ]
            
        except Exception as e:
            raise ResourceError(f"Failed to get work manifests: {str(e)}")

================
File: engine/src/engine/utils/file.py
================
import os
import zipfile
from pathlib import Path


def is_safe_path(base_path: Path, file_path: str) -> bool:
    """
    Check if the file path is safe and within the repository
    """
    try:
        # Normalize path (convert windows paths, remove redundant separators)
        norm_path = os.path.normpath(file_path)

        # Check for absolute paths or path traversal attempts
        if (norm_path.startswith('/') or
            norm_path.startswith('\\') or
            norm_path.startswith('..') or
            '..' in norm_path.split(os.sep)):
            return False

        # Ensure the resolved path is within the base path
        full_path = (base_path / norm_path).resolve()
        return full_path.is_file() or not full_path.exists() and full_path.parent.exists()
    except Exception:
        return False









def extract_zip(zip_path: Path, extract_path: Path):
    """Extract zip file to specified path"""
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_path)

================
File: engine/src/engine/utils/logging.py
================
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

================
File: engine/src/engine/utils/xml_prompts.py
================
"""Utilities for generating XML-formatted prompts for agent user interactions"""

from typing import List, Optional, Tuple

def create_option(text: str, description: Optional[str] = None) -> str:
    """Create an XML option element"""
    if description:
        return f'<option description="{description}">{text}</option>'
    return f'<option>{text}</option>'

def create_user_prompt(question: str, options: List[Tuple[str, Optional[str]]] = None) -> str:
    """
    Create a complete XML user prompt with question and options
    
    Args:
        question: The question to display
        options: List of (text, description) tuples for each option
                Description is optional and can be None
    
    Returns:
        XML formatted prompt string
    """
    xml = f"<user_prompt>\n<question>{question}</question>\n"
    
    if options:
        xml += "<options>\n"
        for text, desc in options:
            xml += create_option(text, desc) + "\n"
        xml += "</options>\n"
        
    xml += "</user_prompt>"
    return xml

def create_confirmation_prompt(
    action: str,
    yes_desc: str = "Continue with the operation",
    no_desc: str = "Cancel the operation"
) -> str:
    """
    Create a standard confirmation prompt
    
    Args:
        action: The action being confirmed
        yes_desc: Description for the Yes option
        no_desc: Description for the No option
    
    Returns:
        XML formatted confirmation prompt
    """
    question = f"Would you like to {action}?"
    options = [
        ("Yes", yes_desc),
        ("No", no_desc)
    ]
    return create_user_prompt(question, options)

# Common prompts that can be reused
CONFIRM_PROCEED = create_user_prompt(
    "Would you like to proceed?",
    [
        ("Yes", "Continue with the operation"),
        ("No", "Cancel the operation")
    ]
)

CONFIRM_CHANGES = create_user_prompt(
    "Would you like me to apply these changes?",
    [
        ("Yes", "Apply the proposed changes"),
        ("No", "Cancel and make no changes")
    ]
)

================
File: engine/src/engine/utils/yaml.py
================
from pathlib import Path
import yaml
from typing import Dict, Any

class YAMLError(Exception):
    """Base exception for YAML operations"""
    pass

class YAMLUtils:
    """Utility class for YAML operations"""
    
    @staticmethod
    def read_kit(module_path: Path) -> Dict[str, Any]:
        """
        Read and parse kit.yaml from a module path
        
        Args:
            module_path: Path to module directory containing kit.yaml
            
        Returns:
            dict: Parsed kit.yaml content
            
        Raises:
            YAMLError: If file not found or parsing fails
        """
        kit_path = module_path / "kit.yaml"
        
        if not kit_path.exists():
            raise YAMLError("kit.yaml not found")
            
        try:
            with open(kit_path) as f:
                return yaml.safe_load(f)
        except Exception as e:
            raise YAMLError(f"Failed to parse kit.yaml: {str(e)}")

================
File: engine/src/engine/main.py
================
import os
import logging
import time
import traceback
from pathlib import Path
from typing import Any, Dict
import secrets
from base64 import b64decode

from dotenv import load_dotenv
from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from loguru import logger
from starlette.middleware.base import BaseHTTPMiddleware

from engine.apis.action import ActionRouter
# from engine.apis.agent import AgentRouter

# Import routers
from engine.apis.chat import ChatRouter
from engine.apis.kit import KitRouter

# Import utilities
from engine.apis.model import ModelRouter
from engine.apis.module import ModuleRouter
from engine.apis.project import ProjectRouter
from engine.apis.repository import RepositoryRouter
from engine.apis.resource import ResourceRouter  # New import
from engine.apis.workflow import WorkflowRouter
from engine.services.agents.base_agent import AgentServices
from engine.services.execution.action import ActionService

# Import services
from engine.services.core.kit import KitService
from engine.services.execution.model import ModelService
from engine.services.core.module import ModuleService
from engine.services.core.project import ProjectService
from engine.services.storage.repository import RepoService
from engine.services.storage.resource import ResourceService  # New import
from engine.services.execution.state import StateService  # Add this import
from engine.services.execution.workflow import WorkflowService

load_dotenv()



# Basic auth configuration
security = HTTPBasic()

class LogMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        start_time = time.time()
        
        try:
            logger.info(f"{request.method} {request.url.path}")
            
            # Try to log request body for debugging if needed
            if request.method in ["POST", "PUT", "PATCH"]:
                try:
                    body = await request.body()
                    logger.debug(f"Request body: {body.decode()}")
                except:
                    pass
                    
            response = await call_next(request)
            
            process_time = time.time() - start_time
            logger.info(f"Completed {request.method} {request.url.path} in {process_time:.2f}s")
            
            return response
            
        except Exception as e:
            # Enhanced error logging
            logger.error(f"""
REQUEST FAILED!
URL: {request.url.path}
Method: {request.method}
Error: {str(e)}
Stack Trace:
{traceback.format_exc()}
            """)
            
            # Return error response with stack trace in development
            if os.getenv("DEBUG"):
                return JSONResponse(
                    status_code=500,
                    content={
                        "error": str(e),
                        "stack_trace": traceback.format_exc().split('\n')
                    }
                )
            raise


def get_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = os.getenv("API_USERNAME")
    correct_password = os.getenv("API_PASSWORD")
    
    if not secrets.compare_digest(credentials.username, correct_username) or \
       not secrets.compare_digest(credentials.password, correct_password):
        raise HTTPException(
            status_code=401,
            detail="Invalid credentials",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username

# Create FastAPI app with exception handlers
app = FastAPI(
    title="Repository and Module Management API",
    debug=True,  # Enable debug mode for detailed error responses
    dependencies=[Depends(get_current_user)]  # Apply basic auth to all routes
)
app.add_middleware(LogMiddleware)

# Configuration
BASE_DATA_DIR = Path(os.getenv("DATA_DIR"))
REPO_BASE_DIR = BASE_DATA_DIR / "repositories"
KIT_BASE_DIR = BASE_DATA_DIR / "kit"

# Create necessary directories
BASE_DATA_DIR.mkdir(exist_ok=True)
REPO_BASE_DIR.mkdir(exist_ok=True)
KIT_BASE_DIR.mkdir(exist_ok=True)

# Initialize services
repo_service = RepoService(
    base_path=REPO_BASE_DIR
)

kit_service = KitService(base_path=KIT_BASE_DIR)

project_service = ProjectService()

# Add after other service initializations
state_service = StateService()

module_service = ModuleService(
    workspace_base=str(KIT_BASE_DIR),
    module_base=str(KIT_BASE_DIR),
    repo_service=repo_service,
    stage_state_service=state_service,
    kit_service=kit_service
)

model_service = ModelService()

resource_service = ResourceService(
    workspace_base=str(KIT_BASE_DIR),
    module_base=str(KIT_BASE_DIR),
    repo_base=str(REPO_BASE_DIR),  # Add repo base directory
    module_service=module_service,
    model_service=model_service
)

action_service = ActionService(repo_service=repo_service)

# Add this with other service initializations
workflow_service = WorkflowService(
    workspace_base=str(KIT_BASE_DIR),
    module_base=str(KIT_BASE_DIR),
    module_service=module_service,
    action_service=action_service,
    resource_service=resource_service,
    repo_service=repo_service,
    kit_service=kit_service
)

# Initialize routers
kit_router = KitRouter(
   kit_service=kit_service,
    prefix="/kit"
)

repo_router = RepositoryRouter(
    repo_service=repo_service,
    prefix="/repository"
)

project_router = ProjectRouter(
    project_service=project_service,
    prefix="/project"
)

module_router = ModuleRouter(
    module_service=module_service,
    prefix="/module"
)

# Initialize resource router
resource_router = ResourceRouter(
    resource_service=resource_service,
    prefix="/resource"
)

# Initialize router
model_router = ModelRouter(model_service)

# Add to router initialization
operation_router = ActionRouter(
    action_service=action_service,
    prefix="/action"
)

# Add this with other router initializations
workflow_router = WorkflowRouter(
    workflow_service=workflow_service,
    prefix="/workflow"
)

# Include routers
app.include_router(kit_router.router)
app.include_router(module_router.router)
app.include_router(repo_router.router)
app.include_router(project_router.router)
app.include_router(resource_router.router)  # Add resource router
app.include_router(model_router.router)
app.include_router(operation_router.router)
app.include_router(workflow_router.router)

agent_services = AgentServices(
    model_service=model_service,
    workflow_service=workflow_service,
    state_service=state_service,
    module_service=module_service,
    repo_service=repo_service
)

chat_router = ChatRouter(
    agent_services=agent_services
)

# Include the router
app.include_router(chat_router.router)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Startup event to initialize database
@app.on_event("startup")
async def startup_event():
    """Initialize database on startup"""
    pass

if __name__ == "__main__":
    import uvicorn
    
    # Configure uvicorn logging
    uvicorn_config = uvicorn.Config(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="debug",
        access_log=True,
        reload=True
    )

    server = uvicorn.Server(uvicorn_config)
    server.run()

================
File: engine/tests/services/agents/test_base_agent.py
================
import asyncio
import uuid
from typing import Dict, Any, List
from unittest.mock import Mock, AsyncMock

import pytest
from engine.services.agents.base_agent import BaseAgent, AgentContext, AgentServices
from engine.services.execution.action import FunctionMetadata
from engine.services.execution.workflow import WorkflowExecutionResult

class TestAgent(BaseAgent):
    """Test implementation of NextBaseAgent"""
    
    @property
    def agent_type(self) -> str:
        return "test_agent"
        
    async def process_workflow(self, context: AgentContext, workflow_data: Any) -> Dict[str, Any]:
        return {"status": "success"}

def create_mock_services():
    return AgentServices(
        model_service=Mock(),
        workflow_service=AsyncMock(),
        module_service=Mock()
    )

@pytest.mark.asyncio
async def test_chat_history():
    # Create test agent
    agent = TestAgent(create_mock_services())
    
    # Generate unique IDs
    module_id = str(uuid.uuid4())
    session_id = str(uuid.uuid4())
    
    # Set context
    agent.context = AgentContext(
        module_id=module_id,
        workflow="test_workflow",
        user_input="test input",
        session_id=session_id
    )
    
    # Test adding regular message
    agent.add_to_history("user", "Hello!")
    
    # Test function tool
    function_metadata = {
        "name": "get_weather",
        "description": "Get weather for location",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {"type": "string"},
                "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]}
            },
            "required": ["location"]
        }
    }
    
    # Add function call
    agent.add_to_history(
        role="assistant",
        content="Checking weather...",
        message_type="tool_call",
        tool_calls=[{
            "type": "function",
            "data": FunctionMetadata(**function_metadata)
        }]
    )
    
    # Add function result
    agent.add_to_history(
        role="tool",
        content="Weather retrieved",
        message_type="tool_result", 
        tool_calls=[{
            "type": "workflow",
            "data": WorkflowExecutionResult(
                status="success",
                message="Got weather",
                result={"temperature": 72, "conditions": "sunny"}
            )
        }]
    )
    
    # Get history
    history = agent.get_chat_history()
    
    # Verify all messages are present
    assert len(history) == 3
    
    # Verify regular message
    assert history[0]["role"] == "user"
    assert history[0]["content"] == "Hello!"
    assert history[0]["message_type"] == "text"
    
    # Verify function call
    assert history[1]["role"] == "assistant"
    assert history[1]["message_type"] == "tool_call"
    tool_data = history[1]["tool_data"]
    assert len(tool_data) == 1
    assert tool_data[0]["type"] == "function"
    assert tool_data[0]["function"]["name"] == "get_weather"
    
    # Verify function result
    assert history[2]["role"] == "tool" 
    assert history[2]["message_type"] == "tool_result"
    result_data = history[2]["tool_data"]
    assert len(result_data) == 1
    assert result_data[0]["type"] == "workflow"
    assert result_data[0]["status"] == "success"
    assert result_data[0]["result"]["temperature"] == 72

if __name__ == "__main__":
    asyncio.run(test_chat_history())

================
File: engine/tests/services/core/test_agent_loader.py
================
"""Tests for AgentLoader service."""
import pytest
from pathlib import Path
from typing import List, Dict, Any
from unittest.mock import MagicMock

from engine.services.core.agent_loader import AgentLoader, AgentLoaderError
from engine.services.agents.base_agent import (
    Action,
    AgentContext,
    AgentServices,
    BaseAgent
)

def test_load_workflow_agent_from_kit(tmp_path):
    """Should load workflow agent from kit config"""
    # Setup test kit
    kit_path = tmp_path / "test-kit"
    agents_dir = kit_path / "agents"
    agents_dir.mkdir(parents=True)
    
    # Create agent file
    with open(agents_dir / "mock.py", "w") as f:
        f.write("""
from engine.services.agents.base_agent import BaseAgent

class MockAgent(BaseAgent):
    @property
    def agent_type(self) -> str:
        return "mock"
    
    def _get_base_instructions(self) -> str:
        return "Mock agent instructions"

    @property
    def default_actions(self) -> List[Action]:
        return []

    async def _process_workflow(
        self,
        context: AgentContext,
        messages: List[Dict[str, str]],
        tools: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        return {}
""")
    
    # Create kit.yaml
    with open(kit_path / "kit.yaml", "w") as f:
        f.write("""
docVersion: v1
id: test-kit
version: "0.1.0"

agents:
  - name: "mock"
    class: "MockAgent"
    description: "Mock agent for testing"

workflows:
  agent: "mock"
  
  test:
    agent: "mock"
    actions: []
""")

    # Create agent loader
    loader = AgentLoader(AgentServices(
        model_service=MagicMock(),
        workflow_service=MagicMock(),
        stage_state_service=MagicMock(),
        repo_service=MagicMock(),
        module_service=MagicMock()
    ))

    # Load workflow agent
    workflow_config = {"agent": "mock"}
    agent = loader.load_workflow_agent(
        kit_path,
        "test",
        workflow_config
    )

    # Verify agent
    assert agent is not None
    assert agent.agent_type == "mock"

def test_load_workflow_agent_from_base(tmp_path):
    """Should load workflow agent from base.agents if not in kit"""
    # Setup test kit
    kit_path = tmp_path / "test-kit"
    agents_dir = kit_path / "agents"
    agents_dir.mkdir(parents=True)

    # Create empty __init__.py
    (agents_dir / "__init__.py").touch()

    # Create kit.yaml
    with open(kit_path / "kit.yaml", "w") as f:
        f.write("""
docVersion: v1
id: test-kit
version: "0.1.0"

agents:
  - name: "tasker"
    class: "TaskerAgent"
    description: "Tasker agent for testing"

workflows:
  agent: "tasker"
  
  test:
    agent: "tasker"
    actions: []
""")

    # Create agent loader
    loader = AgentLoader(AgentServices(
        model_service=MagicMock(),
        workflow_service=MagicMock(),
        stage_state_service=MagicMock(),
        repo_service=MagicMock(),
        module_service=MagicMock()
    ))

    # Load workflow agent
    workflow_config = {"agent": "tasker"}
    agent = loader.load_workflow_agent(
        kit_path,
        "test",
        workflow_config
    )

    # Verify agent loaded from base.agents
    assert agent is not None
    assert agent.agent_type == "tasker"

================
File: engine/tests/services/core/test_kit_service.py
================
# tests/services/core/test_kit_service.py
import io
import pytest
import yaml
from datetime import datetime, UTC
from pathlib import Path
from zipfile import ZipFile
from engine.services.core.kit import (
    KitService, KitMetadata, KitError, KitNotFoundError,
    VersionExistsError, InvalidVersionError, VersionSort
)

@pytest.fixture
def kit_service(temp_dir):
    return KitService(base_path=temp_dir)

@pytest.fixture
def sample_kit_structure():
    """Create a sample kit structure in memory"""
    kit_files = {
        'kit.yaml': {
            'name': 'test-kit',
            'owner': 'test-owner',
            'id': 'test-kit-id',
            'version': '1.0.0',
            'docVersion': 'v1',
            'environment': [{'name': 'TEST_ENV', 'value': 'test'}]
        },
        'instructions/readme.md': '# Test Kit\nThis is a test kit.',
        'instructions/docs/usage.md': '## Usage\nHow to use this kit.',
        'actions/main.py': 'print("Hello, World!")',
        'workspace/example.txt': 'Example content'
    }
    return kit_files

@pytest.fixture
def kit_zip_file(sample_kit_structure):
    """Create a ZIP file with the kit structure"""
    zip_buffer = io.BytesIO()
    with ZipFile(zip_buffer, 'w') as zip_file:
        for file_path, content in sample_kit_structure.items():
            if isinstance(content, dict):
                content = yaml.dump(content)
            zip_file.writestr(file_path, content)
    zip_buffer.seek(0)
    return zip_buffer

class TestKitService:
    def test_validate_semantic_version(self, kit_service):
        """Test version validation"""
        assert kit_service.validate_semantic_version("1.0.0")
        assert not kit_service.validate_semantic_version("1.0")
        assert not kit_service.validate_semantic_version("v1.0.0")

    def test_save_kit(self, kit_service, kit_zip_file, sample_kit_structure):
        """Test saving a new kit"""
        metadata = kit_service.save_kit(kit_zip_file)
        
        assert isinstance(metadata, KitMetadata)
        assert metadata.name == sample_kit_structure['kit.yaml']['name']
        assert metadata.version == sample_kit_structure['kit.yaml']['version']
        assert metadata.owner == sample_kit_structure['kit.yaml']['owner']
        
        # Verify directory structure
        kit_path = kit_service._get_kit_path(metadata.owner, metadata.kit_id, metadata.version)
        assert kit_path.exists()
        assert (kit_path / "kit.yaml").exists()
        assert (kit_path / "instructions").exists()
        assert (kit_path / "actions").exists()
        assert (kit_path / "workspace").exists()

    def test_save_kit_version_exists(self, kit_service, kit_zip_file):
        """Test saving a kit version that already exists"""
        kit_service.save_kit(kit_zip_file)
        kit_zip_file.seek(0)
        
        with pytest.raises(VersionExistsError):
            kit_service.save_kit(kit_zip_file)

    def test_get_kit_versions(self, kit_service, kit_zip_file, sample_kit_structure):
        """Test getting kit versions"""
        # Save initial version
        kit_service.save_kit(kit_zip_file)
        
        # Create and save another version
        kit_data = sample_kit_structure['kit.yaml'].copy()
        kit_data['version'] = '2.0.0'
        
        new_zip = io.BytesIO()
        with ZipFile(new_zip, 'w') as zip_file:
            zip_file.writestr('kit.yaml', yaml.dump(kit_data))
        new_zip.seek(0)
        
        kit_service.save_kit(new_zip)
        
        # Test version listing
        versions = kit_service.get_kit_versions(
            owner=kit_data['owner'],
            kit_id=kit_data['id']
        )
        assert len(versions) == 2
        assert versions == ['1.0.0', '2.0.0']  # Ascending order by default

    def test_delete_kit_version(self, kit_service, kit_zip_file, sample_kit_structure):
        """Test deleting a specific kit version"""
        metadata = kit_service.save_kit(kit_zip_file)
        
        kit_service.delete_kit_version(
            owner=metadata.owner,
            kit_id=metadata.kit_id,
            version=metadata.version
        )
        
        kit_path = kit_service._get_kit_path(metadata.owner, metadata.kit_id, metadata.version)
        assert not kit_path.exists()

    def test_delete_kit(self, kit_service, kit_zip_file):
        """Test deleting entire kit"""
        metadata = kit_service.save_kit(kit_zip_file)
        
        kit_service.delete_kit(
            owner=metadata.owner,
            kit_id=metadata.kit_id
        )
        
        kit_path = kit_service._get_kit_path(metadata.owner, metadata.kit_id)
        assert not kit_path.exists()

    def test_get_all_kits(self, kit_service, kit_zip_file, sample_kit_structure):
        """Test getting all kits"""
        # Save initial version
        kit_service.save_kit(kit_zip_file)
        
        # Create and save another kit
        kit_data = sample_kit_structure['kit.yaml'].copy()
        kit_data['id'] = 'another-kit'
        kit_data['name'] = 'Another Kit'
        
        new_zip = io.BytesIO()
        with ZipFile(new_zip, 'w') as zip_file:
            zip_file.writestr('kit.yaml', yaml.dump(kit_data))
        new_zip.seek(0)
        
        kit_service.save_kit(new_zip)
        
        # Get all kits
        kits = kit_service.get_all_kits()
        assert len(kits) == 2
        assert sorted([k.name for k in kits]) == ['Another Kit', 'test-kit']

    def test_invalid_kit_yaml(self, kit_service):
        """Test handling invalid kit.yaml"""
        zip_buffer = io.BytesIO()
        with ZipFile(zip_buffer, 'w') as zip_file:
            zip_file.writestr('kit.yaml', 'invalid: yaml: content')
        zip_buffer.seek(0)
        
        with pytest.raises(KitError, match="Invalid kit.yaml"):
            kit_service.save_kit(zip_buffer)

    def test_missing_required_fields(self, kit_service):
        """Test handling missing required fields"""
        zip_buffer = io.BytesIO()
        with ZipFile(zip_buffer, 'w') as zip_file:
            zip_file.writestr('kit.yaml', yaml.dump({'name': 'test'}))
        zip_buffer.seek(0)
        
        with pytest.raises(KitError, match="Missing required fields"):
            kit_service.save_kit(zip_buffer)

================
File: engine/tests/services/core/test_module_service.py
================
import pytest
from datetime import datetime, UTC
from unittest.mock import Mock, patch
from engine.services.core.module import ModuleService, ModuleError, ModuleMetadata, RelationType

@pytest.fixture
def workspace_structure(temp_dir):
    """Create workspace directory structure"""
    owner = "test-owner"
    kit_id = "test-kit"
    version = "1.0.0"
    
    # Create workspace path
    workspace_path = temp_dir / owner / kit_id / version / "workspace"
    workspace_path.mkdir(parents=True, exist_ok=True)
    
    # Create a dummy file in workspace
    (workspace_path / "test.txt").write_text("test content")
    
    return {
        "owner": owner,
        "kit_id": kit_id,
        "version": version,
        "workspace_path": workspace_path
    }

@pytest.fixture
def module_service(temp_dir, mock_repo_service, mock_stage_state_service):
    return ModuleService(
        workspace_base=str(temp_dir),
        module_base=str(temp_dir),
        repo_service=mock_repo_service,
        stage_state_service=mock_stage_state_service
    )

def test_validate_path(module_service):
    # Test valid paths
    assert module_service._validate_path("abc.123")
    assert module_service._validate_path("service.auth.v1")
    assert module_service._validate_path("backend.users")

    # Test invalid paths
    assert not module_service._validate_path("abc..123")
    assert not module_service._validate_path(".abc.123")
    assert not module_service._validate_path("abc.123.")
    assert not module_service._validate_path("abc-123")


def test_get_linked_modules(module_service, mock_db_session):
    module_id = "test-module"
    
    mock_module = Mock()
    mock_mapping = Mock()
    mock_results = [(mock_module, mock_mapping)]
    
    with patch('engine.services.core.module.SessionLocal', return_value=mock_db_session):
        mock_db_session.execute.return_value.all.return_value = mock_results
        
        results = module_service.get_linked_modules(
            module_id=module_id,
            relation_type=RelationType.CONNECTION
        )
        
        assert isinstance(results, list)
        assert len(results) == 1

# Add more test cases for error conditions
def test_create_module_invalid_path(module_service, workspace_structure):
    """Test creating module with invalid path"""
    with pytest.raises(ModuleError, match="Invalid path format"):
        module_service.create_module(
            project_id="test-project",
            owner=workspace_structure["owner"],
            kit_id=workspace_structure["kit_id"],
            version=workspace_structure["version"],
            env_vars={},
            path="invalid..path"
        )

def test_create_module_repo_error(module_service, mock_db_session, workspace_structure):
    """Test creating module with repository error"""
    # Setup
    module_service.repo_service.create_repository.side_effect = Exception("Repo error")
    
    with pytest.raises(ModuleError, match="Failed to create module: Repo error"):
        module_service.create_module(
            project_id="test-project",
            owner=workspace_structure["owner"],
            kit_id=workspace_structure["kit_id"],
            version=workspace_structure["version"],
            env_vars={},
            path="test.path"
        )

================
File: engine/tests/services/core/test_project_service.py
================
import pytest
from datetime import datetime, UTC
from unittest.mock import Mock, patch
from sqlalchemy.exc import IntegrityError

from engine.services.core.project import ProjectService, ProjectMetadata, ProjectError
from engine.db.models import Project

@pytest.fixture
def mock_db_session():
    session = Mock()
    session.__enter__ = Mock(return_value=session)
    session.__exit__ = Mock(return_value=None)
    return session

@pytest.fixture
def project_service():
    with patch('engine.services.core.project.SessionLocal') as mock_session:
        service = ProjectService()
        yield service

@pytest.fixture
def mock_project():
    return Project(
        id="test-id",
        name="test-project",
        created_at=datetime.now(UTC)
    )

class TestProjectService:
    def test_ensure_default_project_exists(self, mock_db_session):
        """Test default project creation when it doesn't exist"""
        mock_db_session.query.return_value.filter_by.return_value.first.return_value = None
        
        with patch('engine.services.core.project.SessionLocal', return_value=mock_db_session):
            ProjectService()
            
            # Verify default project was created
            mock_db_session.add.assert_called_once()
            mock_db_session.commit.assert_called_once()
            
            # Verify correct default project data
            project = mock_db_session.add.call_args[0][0]
            assert project.id == "00000000-0000-0000-0000-000000000000"
            assert project.name == "default"

    def test_ensure_default_project_already_exists(self, mock_db_session):
        """Test default project is not created when it already exists"""
        default_project = Project(
            id="00000000-0000-0000-0000-000000000000",
            name="default",
            created_at=datetime.now(UTC)
        )
        mock_db_session.query.return_value.filter_by.return_value.first.return_value = default_project
        
        with patch('engine.services.core.project.SessionLocal', return_value=mock_db_session):
            ProjectService()
            mock_db_session.add.assert_not_called()
            mock_db_session.commit.assert_not_called()

    def test_create_project(self, project_service, mock_db_session, mock_project):
        """Test successful project creation"""
        mock_db_session.add = Mock()
        mock_db_session.commit = Mock()
        mock_db_session.refresh = Mock()
        
        with patch('engine.services.core.project.SessionLocal', return_value=mock_db_session):
            with patch('uuid.uuid4', return_value=mock_project.id):
                result = project_service.create_project("test-project")
                
                assert isinstance(result, ProjectMetadata)
                assert result.name == "test-project"
                assert result.id == mock_project.id
                
                mock_db_session.add.assert_called_once()
                mock_db_session.commit.assert_called_once()

    def test_create_project_duplicate_name(self, project_service, mock_db_session):
        """Test project creation with duplicate name"""
        mock_db_session.add = Mock()
        mock_db_session.commit = Mock(side_effect=IntegrityError(None, None, None))
        
        with patch('engine.services.core.project.SessionLocal', return_value=mock_db_session):
            with pytest.raises(ProjectError, match="Project with name 'test-project' already exists"):
                project_service.create_project("test-project")

    def test_get_project(self, project_service, mock_db_session, mock_project):
        """Test getting project by ID"""
        mock_db_session.execute.return_value.scalar_one_or_none.return_value = mock_project
        
        with patch('engine.services.core.project.SessionLocal', return_value=mock_db_session):
            result = project_service.get_project(mock_project.id)
            
            assert isinstance(result, ProjectMetadata)
            assert result.id == mock_project.id
            assert result.name == mock_project.name

    def test_get_project_not_found(self, project_service, mock_db_session):
        """Test getting non-existent project"""
        mock_db_session.execute.return_value.scalar_one_or_none.return_value = None
        
        with patch('engine.services.core.project.SessionLocal', return_value=mock_db_session):
            result = project_service.get_project("non-existent-id")
            assert result is None

    def test_get_all_projects(self, project_service, mock_db_session, mock_project):
        """Test getting all projects"""
        mock_db_session.execute.return_value.scalars.return_value.all.return_value = [mock_project]
        
        with patch('engine.services.core.project.SessionLocal', return_value=mock_db_session):
            results = project_service.get_all_projects()
            
            assert isinstance(results, list)
            assert len(results) == 1
            assert all(isinstance(r, ProjectMetadata) for r in results)
            assert results[0].id == mock_project.id
            assert results[0].name == mock_project.name



    def test_project_metadata_from_orm(self, mock_project):
        """Test ProjectMetadata.from_orm conversion"""
        metadata = ProjectMetadata.from_orm(mock_project)
        
        assert isinstance(metadata, ProjectMetadata)
        assert metadata.id == mock_project.id
        assert metadata.name == mock_project.name
        assert metadata.created_at == mock_project.created_at.isoformat()

================
File: engine/tests/services/execution/test_state_service.py
================
# tests/services/execution/test_stage_state.py
import pytest
from datetime import datetime, UTC
from unittest.mock import Mock, patch
from engine.services.execution.stage_state import (
    StateService, AgentStage, AgentState, InvalidTransition
)

@pytest.fixture
def mock_db_session():
    session = Mock()
    session.__enter__ = Mock(return_value=session)
    session.__exit__ = Mock(return_value=None)
    return session

@pytest.fixture
def stage_service():
    return StateService()

def test_validate_stage_transition(stage_service):
    """Test basic stage transition validation"""
    # Valid transitions
    assert stage_service._validate_stage_transition(AgentStage.INITIALIZE, AgentStage.MAINTAIN)
    assert stage_service._validate_stage_transition(AgentStage.MAINTAIN, AgentStage.REMOVE)
    
    # Invalid transitions
    assert not stage_service._validate_stage_transition(AgentStage.INITIALIZE, AgentStage.REMOVE)
    assert not stage_service._validate_stage_transition(AgentStage.REMOVE, AgentStage.MAINTAIN)

def test_initialize_module(stage_service, mock_db_session):
    """Test module initialization"""
    with patch('engine.services.execution.stage_state.SessionLocal', return_value=mock_db_session):
        stage_service.initialize_module("test-module")
        mock_db_session.merge.assert_called_once()
        mock_db_session.commit.assert_called_once()

def test_promote_stage(stage_service, mock_db_session):
    """Test stage promotion"""
    mock_status = Mock(stage=AgentStage.INITIALIZE.value)
    mock_db_session.query.return_value.filter_by.return_value.first.return_value = mock_status
    
    with patch('engine.services.execution.stage_state.SessionLocal', return_value=mock_db_session):
        # Set up get_status mock
        with patch.object(stage_service, 'get_status', return_value=(AgentStage.INITIALIZE, AgentState.STANDBY)):
            stage_service.promote_stage("test-module", AgentStage.MAINTAIN)
            assert mock_status.stage == AgentStage.MAINTAIN.value

def test_invalid_promotion(stage_service, mock_db_session):
    """Test invalid stage promotion"""
    with patch('engine.services.execution.stage_state.SessionLocal', return_value=mock_db_session):
        with patch.object(stage_service, 'get_status', return_value=(AgentStage.INITIALIZE, AgentState.STANDBY)):
            with pytest.raises(InvalidTransition):
                stage_service.promote_stage("test-module", AgentStage.REMOVE)

def test_set_executing(stage_service, mock_db_session):
    """Test setting executing state"""
    mock_status = Mock(state=AgentState.STANDBY.value)
    mock_db_session.query.return_value.filter_by.return_value.first.return_value = mock_status
    
    with patch('engine.services.execution.stage_state.SessionLocal', return_value=mock_db_session):
        stage_service.set_executing("test-module")
        assert mock_status.state == AgentState.EXECUTING.value

================
File: engine/tests/services/storage/test_repo_service.py
================
# tests/services/storage/test_repo_service.py
import io
import pytest
from pathlib import Path
from unittest.mock import Mock, patch
from engine.services.storage.repository import (
    RepoService, RepoNotFoundError, RepoExistsError, CommitInfo
)

@pytest.fixture
def repo_service(temp_dir):
    return RepoService(
        base_path=temp_dir / "repos",
        search_index_path=temp_dir / "indices"
    )

@pytest.fixture
def sample_file():
    content = io.BytesIO(b"test content")
    return content

@pytest.fixture
def mock_extract_func():
    return Mock()

def test_create_repository(repo_service, sample_file, mock_extract_func):
    """Test repository creation"""
    result = repo_service.create_repository(
        repo_name="test-repo",
        content_file=sample_file,
        filename="test.txt",
        extract_func=mock_extract_func
    )
    
    assert result["repo_name"] == "test-repo"
    assert result["status"] == "success"
    assert (repo_service.base_path / "test-repo").exists()

def test_create_existing_repository(repo_service, sample_file, mock_extract_func):
    """Test creating repository that already exists"""
    repo_service.create_repository("test-repo", sample_file, "test.txt", mock_extract_func)
    
    with pytest.raises(RepoExistsError):
        repo_service.create_repository("test-repo", sample_file, "test.txt", mock_extract_func)

def test_list_repositories(repo_service, sample_file, mock_extract_func):
    """Test listing repositories"""
    repo_service.create_repository("repo1", sample_file, "test.txt", mock_extract_func)
    repo_service.create_repository("repo2", sample_file, "test.txt", mock_extract_func)
    
    repos = repo_service.list_repositories()
    assert len(repos) == 2
    assert "repo1" in repos
    assert "repo2" in repos

def test_list_files(repo_service, sample_file, mock_extract_func):
    """Test listing files in repository"""
    repo_service.create_repository("test-repo", sample_file, "test.txt", mock_extract_func)
    
    files = repo_service.list_files("test-repo")
    assert "test.txt" in files

def test_list_files_nonexistent_repo(repo_service):
    """Test listing files in non-existent repository"""
    with pytest.raises(RepoNotFoundError):
        repo_service.list_files("nonexistent-repo")

def test_delete_repository(repo_service, sample_file, mock_extract_func):
    """Test repository deletion"""
    repo_service.create_repository("test-repo", sample_file, "test.txt", mock_extract_func)
    
    repo_service.delete_repository("test-repo")
    assert not (repo_service.base_path / "test-repo").exists()

def test_delete_nonexistent_repository(repo_service):
    """Test deleting non-existent repository"""
    with pytest.raises(RepoNotFoundError):
        repo_service.delete_repository("nonexistent-repo")

def test_commit_changes(repo_service, sample_file, mock_extract_func):
    """Test committing changes"""
    # Create repository with initial content
    repo_service.create_repository("test-repo", sample_file, "test.txt", mock_extract_func)
    
    # Make some changes
    repo_path = repo_service._get_repo_path("test-repo")
    (repo_path / "new_file.txt").write_text("new content")
    
    commit_info = CommitInfo(
        commit_message="Test commit",
        author_name="Test Author",
        author_email="test@example.com"
    )
    
    result = repo_service.commit_changes("test-repo", commit_info)
    assert result["status"] == "success"
    assert result["committed"] is True
    assert "commit_hash" in result



def test_update_file_invalid_path(repo_service, sample_file, mock_extract_func):
    """Test updating file with invalid path"""
    repo_service.create_repository("test-repo", sample_file, "test.txt", mock_extract_func)
    
    def mock_validator(repo_path, file_path):
        return False
    
    with pytest.raises(Exception, match="Invalid file path"):
        repo_service.update_file(
            repo_name="test-repo",
            file_path="../test.txt",
            content="updated content",
            path_validator=mock_validator
        )

================
File: engine/tests/services/storage/test_resource_service.py
================
# tests/services/storage/test_resource_service.py
import pytest
from pathlib import Path
from unittest.mock import Mock, patch
from engine.services.storage.resource import ResourceService, Resource, ResourceError

@pytest.fixture
def mock_module_service():
    service = Mock()
    mock_metadata = Mock(repo_name="test-repo")
    service.get_module_metadata.return_value = mock_metadata
    return service

@pytest.fixture
def resource_service(temp_dir, mock_module_service):
    return ResourceService(
        workspace_base=temp_dir / "workspace",
        module_base=temp_dir / "modules",
        repo_base=temp_dir / "repos",
        module_service=mock_module_service
    )

def test_get_documentation_resources(resource_service, temp_dir):
    # Create module path and set mock to return it
    module_path = temp_dir / "modules" / "test-module"
    resource_service.module_service.get_module_path.return_value = module_path
    
    # Create the instruction directory and file
    instruction_path = module_path / "instructions"
    instruction_path.mkdir(parents=True)
    doc_file = instruction_path / "docs" / "readme.md"
    doc_file.parent.mkdir(parents=True)
    doc_file.write_text("# README")

    # Mock the kit.yaml content
    with patch('engine.utils.yaml.YAMLUtils.read_kit') as mock_read_kit:
        mock_read_kit.return_value = {
            "instructions": {
                "documentation": [
                    {
                        "path": "docs/readme.md",
                        "description": "README"
                    }
                ]
            }
        }
        
        # Get resources
        resources = resource_service.get_documentation_resources("test-module")
        
        # Verify results
        assert len(resources) == 1
        assert resources[0].name == "readme.md"
        assert resources[0].content == "# README"
        assert resources[0].path == "docs/readme.md"

def test_get_specification_resources(resource_service, temp_dir):
    # Create module path and set mock to return it
    module_path = temp_dir / "modules" / "test-module"
    resource_service.module_service.get_module_path.return_value = module_path
    
    # Create the instruction directory and file
    instruction_path = module_path / "instructions"
    instruction_path.mkdir(parents=True)
    spec_file = instruction_path / "specs" / "api.yaml"
    spec_file.parent.mkdir(parents=True)
    spec_file.write_text("openapi: 3.0.0")

    # Mock the kit.yaml content
    with patch('engine.utils.yaml.YAMLUtils.read_kit') as mock_read_kit:
        mock_read_kit.return_value = {
            "instructions": {
                "specification": [
                    {
                        "path": "specs/api.yaml",
                        "description": "API Spec"
                    }
                ]
            }
        }
        
        # Get resources
        resources = resource_service.get_specification_resources("test-module")
        
        # Verify results
        assert len(resources) == 1
        assert resources[0].name == "api.yaml"
        assert resources[0].content == "openapi: 3.0.0"
        assert resources[0].path == "specs/api.yaml"

# Rest of the tests remain the same...

def test_get_workspace_resources(resource_service, temp_dir):
    # Setup
    repo_path = temp_dir / "repos" / "test-repo"
    repo_path.mkdir(parents=True)
    test_file = repo_path / "test.txt"
    test_file.write_text("test content")
    
    with patch('engine.utils.yaml.YAMLUtils.read_kit') as mock_read_kit:
        mock_read_kit.return_value = {
            "workspace": {
                "files": [
                    {"path": "*.txt", "description": "Text files"}
                ]
            }
        }
        
        resources = resource_service.get_workspace_resources("test-module")
        
        assert len(resources) == 1
        assert resources[0].name == "test.txt"
        assert resources[0].content == "test content"

def test_module_error_handling(resource_service):
    # Configure mock to raise ModuleError
    resource_service.module_service.get_module_metadata.side_effect = ResourceError("Module error")
    
    with pytest.raises(ResourceError, match="Module error"):
        resource_service.get_workspace_resources("test-module")

def test_resource_not_found(resource_service, temp_dir):
    # Update mock_module_service to return the temp_dir path
    resource_service.module_service.get_module_path.return_value = temp_dir
    
    with patch('engine.utils.yaml.YAMLUtils.read_kit') as mock_read_kit:
        mock_read_kit.return_value = {}
        
        assert resource_service.get_workspace_resources("test-module") == []
        assert resource_service.get_documentation_resources("test-module") == []
        assert resource_service.get_specification_resources("test-module") == []

def test_read_file_error(resource_service):
    with pytest.raises(ResourceError, match="Failed to read file"):
        resource_service._read_file_content(Path("/nonexistent/file.txt"))

================
File: engine/tests/conftest.py
================
import pytest
from pathlib import Path
from unittest.mock import Mock

# Enable PDM pytest plugins
pytest_plugins = ["pdm.pytest"]

@pytest.fixture
def temp_dir(tmp_path):
    return tmp_path

@pytest.fixture
def mock_db_session():
    session = Mock()
    session.__enter__ = Mock(return_value=session)
    session.__exit__ = Mock(return_value=None)
    return session

@pytest.fixture
def mock_repo_service():
    return Mock()

@pytest.fixture
def mock_stage_state_service():
    return Mock()

# Add project-specific fixtures using PDM's project fixture
@pytest.fixture
def engine_project(project):
    """Initialize a PDM project with our engine package"""
    project.pyproject.settings["project"] = {
        "name": "engine",
        "version": "0.1.0",
        "dependencies": [],
    }
    return project

================
File: engine/alembic.ini
================
# A generic, single database configuration.

[alembic]
# path to migration scripts
# Use forward slashes (/) also on windows to provide an os agnostic path
script_location = src/engine/db/migrations

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
# version_path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.
version_path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = 


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

================
File: engine/pdm.lock
================
# This file is @generated by PDM.
# It is not intended for manual editing.

[metadata]
groups = ["default", "dev"]
strategy = ["inherit_metadata"]
lock_version = "4.5.0"
content_hash = "sha256:d5d553692bcc2001933c6271b1f6a4522edc3e249899083e53bb670ef4e7298d"

[[metadata.targets]]
requires_python = "==3.12.*"

[[package]]
name = "aider-install"
version = "0.1.3"
requires_python = ">=3.8"
summary = "Installer for the aider AI pair programming CLI tool."
groups = ["default"]
dependencies = [
    "uv>=0.5.0",
]
files = [
    {file = "aider_install-0.1.3-py3-none-any.whl", hash = "sha256:798ce100ed1032c7679d520392c0042e8254bd942a9020759a17683ee66192a5"},
    {file = "aider_install-0.1.3.tar.gz", hash = "sha256:7981fd8e2a1ef3acb0383c75d3846e8095fbfcccb623b5e0d1091c983269d694"},
]

[[package]]
name = "aiohappyeyeballs"
version = "2.4.4"
requires_python = ">=3.8"
summary = "Happy Eyeballs for asyncio"
groups = ["default"]
files = [
    {file = "aiohappyeyeballs-2.4.4-py3-none-any.whl", hash = "sha256:a980909d50efcd44795c4afeca523296716d50cd756ddca6af8c65b996e27de8"},
    {file = "aiohappyeyeballs-2.4.4.tar.gz", hash = "sha256:5fdd7d87889c63183afc18ce9271f9b0a7d32c2303e394468dd45d514a757745"},
]

[[package]]
name = "aiohttp"
version = "3.11.11"
requires_python = ">=3.9"
summary = "Async http client/server framework (asyncio)"
groups = ["default"]
dependencies = [
    "aiohappyeyeballs>=2.3.0",
    "aiosignal>=1.1.2",
    "async-timeout<6.0,>=4.0; python_version < \"3.11\"",
    "attrs>=17.3.0",
    "frozenlist>=1.1.1",
    "multidict<7.0,>=4.5",
    "propcache>=0.2.0",
    "yarl<2.0,>=1.17.0",
]
files = [
    {file = "aiohttp-3.11.11-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:e595c591a48bbc295ebf47cb91aebf9bd32f3ff76749ecf282ea7f9f6bb73886"},
    {file = "aiohttp-3.11.11-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:3ea1b59dc06396b0b424740a10a0a63974c725b1c64736ff788a3689d36c02d2"},
    {file = "aiohttp-3.11.11-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:8811f3f098a78ffa16e0ea36dffd577eb031aea797cbdba81be039a4169e242c"},
    {file = "aiohttp-3.11.11-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:bd7227b87a355ce1f4bf83bfae4399b1f5bb42e0259cb9405824bd03d2f4336a"},
    {file = "aiohttp-3.11.11-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d40f9da8cabbf295d3a9dae1295c69975b86d941bc20f0a087f0477fa0a66231"},
    {file = "aiohttp-3.11.11-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ffb3dc385f6bb1568aa974fe65da84723210e5d9707e360e9ecb51f59406cd2e"},
    {file = "aiohttp-3.11.11-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a8f5f7515f3552d899c61202d99dcb17d6e3b0de777900405611cd747cecd1b8"},
    {file = "aiohttp-3.11.11-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3499c7ffbfd9c6a3d8d6a2b01c26639da7e43d47c7b4f788016226b1e711caa8"},
    {file = "aiohttp-3.11.11-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:8e2bf8029dbf0810c7bfbc3e594b51c4cc9101fbffb583a3923aea184724203c"},
    {file = "aiohttp-3.11.11-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:b6212a60e5c482ef90f2d788835387070a88d52cf6241d3916733c9176d39eab"},
    {file = "aiohttp-3.11.11-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:d119fafe7b634dbfa25a8c597718e69a930e4847f0b88e172744be24515140da"},
    {file = "aiohttp-3.11.11-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:6fba278063559acc730abf49845d0e9a9e1ba74f85f0ee6efd5803f08b285853"},
    {file = "aiohttp-3.11.11-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:92fc484e34b733704ad77210c7957679c5c3877bd1e6b6d74b185e9320cc716e"},
    {file = "aiohttp-3.11.11-cp312-cp312-win32.whl", hash = "sha256:9f5b3c1ed63c8fa937a920b6c1bec78b74ee09593b3f5b979ab2ae5ef60d7600"},
    {file = "aiohttp-3.11.11-cp312-cp312-win_amd64.whl", hash = "sha256:1e69966ea6ef0c14ee53ef7a3d68b564cc408121ea56c0caa2dc918c1b2f553d"},
    {file = "aiohttp-3.11.11.tar.gz", hash = "sha256:bb49c7f1e6ebf3821a42d81d494f538107610c3a705987f53068546b0e90303e"},
]

[[package]]
name = "aiosignal"
version = "1.3.2"
requires_python = ">=3.9"
summary = "aiosignal: a list of registered asynchronous callbacks"
groups = ["default"]
dependencies = [
    "frozenlist>=1.1.0",
]
files = [
    {file = "aiosignal-1.3.2-py2.py3-none-any.whl", hash = "sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5"},
    {file = "aiosignal-1.3.2.tar.gz", hash = "sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54"},
]

[[package]]
name = "alembic"
version = "1.14.1"
requires_python = ">=3.8"
summary = "A database migration tool for SQLAlchemy."
groups = ["default"]
dependencies = [
    "Mako",
    "SQLAlchemy>=1.3.0",
    "importlib-metadata; python_version < \"3.9\"",
    "importlib-resources; python_version < \"3.9\"",
    "typing-extensions>=4",
]
files = [
    {file = "alembic-1.14.1-py3-none-any.whl", hash = "sha256:1acdd7a3a478e208b0503cd73614d5e4c6efafa4e73518bb60e4f2846a37b1c5"},
    {file = "alembic-1.14.1.tar.gz", hash = "sha256:496e888245a53adf1498fcab31713a469c65836f8de76e01399aa1c3e90dd213"},
]

[[package]]
name = "annotated-types"
version = "0.7.0"
requires_python = ">=3.8"
summary = "Reusable constraint types to use with typing.Annotated"
groups = ["default"]
dependencies = [
    "typing-extensions>=4.0.0; python_version < \"3.9\"",
]
files = [
    {file = "annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53"},
    {file = "annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89"},
]

[[package]]
name = "anyio"
version = "4.8.0"
requires_python = ">=3.9"
summary = "High level compatibility layer for multiple asynchronous event loop implementations"
groups = ["default", "dev"]
dependencies = [
    "exceptiongroup>=1.0.2; python_version < \"3.11\"",
    "idna>=2.8",
    "sniffio>=1.1",
    "typing-extensions>=4.5; python_version < \"3.13\"",
]
files = [
    {file = "anyio-4.8.0-py3-none-any.whl", hash = "sha256:b5011f270ab5eb0abf13385f851315585cc37ef330dd88e27ec3d34d651fd47a"},
    {file = "anyio-4.8.0.tar.gz", hash = "sha256:1d9fe889df5212298c0c0723fa20479d1b94883a2df44bd3897aa91083316f7a"},
]

[[package]]
name = "attrs"
version = "24.3.0"
requires_python = ">=3.8"
summary = "Classes Without Boilerplate"
groups = ["default"]
files = [
    {file = "attrs-24.3.0-py3-none-any.whl", hash = "sha256:ac96cd038792094f438ad1f6ff80837353805ac950cd2aa0e0625ef19850c308"},
    {file = "attrs-24.3.0.tar.gz", hash = "sha256:8f5c07333d543103541ba7be0e2ce16eeee8130cb0b3f9238ab904ce1e85baff"},
]

[[package]]
name = "bigtree"
version = "0.23.1"
requires_python = ">=3.8"
summary = "Tree Implementation and Methods for Python, integrated with list, dictionary, pandas and polars DataFrame."
groups = ["default"]
files = [
    {file = "bigtree-0.23.1-py3-none-any.whl", hash = "sha256:6faa15db08ff27908d291b8a2655c46e840deac86a75d51a67865b74836723bb"},
    {file = "bigtree-0.23.1.tar.gz", hash = "sha256:d01a0b89a59e2d6bc1afd023d7968d9e7f25f09517f0e0b702c77f93b19176ef"},
]

[[package]]
name = "blinker"
version = "1.9.0"
requires_python = ">=3.9"
summary = "Fast, simple object-to-object and broadcast signaling"
groups = ["dev"]
files = [
    {file = "blinker-1.9.0-py3-none-any.whl", hash = "sha256:ba0efaa9080b619ff2f3459d1d500c57bddea4a6b424b60a91141db6fd2f08bc"},
    {file = "blinker-1.9.0.tar.gz", hash = "sha256:b4ce2265a7abece45e7cc896e98dbebe6cead56bcf805a3d23136d145f5445bf"},
]

[[package]]
name = "certifi"
version = "2024.12.14"
requires_python = ">=3.6"
summary = "Python package for providing Mozilla's CA Bundle."
groups = ["default", "dev"]
files = [
    {file = "certifi-2024.12.14-py3-none-any.whl", hash = "sha256:1275f7a45be9464efc1173084eaa30f866fe2e47d389406136d332ed4967ec56"},
    {file = "certifi-2024.12.14.tar.gz", hash = "sha256:b650d30f370c2b724812bee08008be0c4163b163ddaec3f2546c1caf65f191db"},
]

[[package]]
name = "charset-normalizer"
version = "3.4.1"
requires_python = ">=3.7"
summary = "The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet."
groups = ["default"]
files = [
    {file = "charset_normalizer-3.4.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:73d94b58ec7fecbc7366247d3b0b10a21681004153238750bb67bd9012414545"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dad3e487649f498dd991eeb901125411559b22e8d7ab25d3aeb1af367df5efd7"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c30197aa96e8eed02200a83fba2657b4c3acd0f0aa4bdc9f6c1af8e8962e0757"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2369eea1ee4a7610a860d88f268eb39b95cb588acd7235e02fd5a5601773d4fa"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bc2722592d8998c870fa4e290c2eec2c1569b87fe58618e67d38b4665dfa680d"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ffc9202a29ab3920fa812879e95a9e78b2465fd10be7fcbd042899695d75e616"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:804a4d582ba6e5b747c625bf1255e6b1507465494a40a2130978bda7b932c90b"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:0f55e69f030f7163dffe9fd0752b32f070566451afe180f99dbeeb81f511ad8d"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c4c3e6da02df6fa1410a7680bd3f63d4f710232d3139089536310d027950696a"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:5df196eb874dae23dcfb968c83d4f8fdccb333330fe1fc278ac5ceeb101003a9"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:e358e64305fe12299a08e08978f51fc21fac060dcfcddd95453eabe5b93ed0e1"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-win32.whl", hash = "sha256:9b23ca7ef998bc739bf6ffc077c2116917eabcc901f88da1b9856b210ef63f35"},
    {file = "charset_normalizer-3.4.1-cp312-cp312-win_amd64.whl", hash = "sha256:6ff8a4a60c227ad87030d76e99cd1698345d4491638dfa6673027c48b3cd395f"},
    {file = "charset_normalizer-3.4.1-py3-none-any.whl", hash = "sha256:d98b1668f06378c6dbefec3b92299716b931cd4e6061f3c875a71ced1780ab85"},
    {file = "charset_normalizer-3.4.1.tar.gz", hash = "sha256:44251f18cd68a75b56585dd00dae26183e102cd5e0f9f1466e6df5da2ed64ea3"},
]

[[package]]
name = "click"
version = "8.1.8"
requires_python = ">=3.7"
summary = "Composable command line interface toolkit"
groups = ["default"]
dependencies = [
    "colorama; platform_system == \"Windows\"",
    "importlib-metadata; python_version < \"3.8\"",
]
files = [
    {file = "click-8.1.8-py3-none-any.whl", hash = "sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2"},
    {file = "click-8.1.8.tar.gz", hash = "sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a"},
]

[[package]]
name = "cloudpickle"
version = "3.1.1"
requires_python = ">=3.8"
summary = "Pickler class to extend the standard pickle.Pickler functionality"
groups = ["default"]
files = [
    {file = "cloudpickle-3.1.1-py3-none-any.whl", hash = "sha256:c8c5a44295039331ee9dad40ba100a9c7297b6f988e50e87ccdf3765a668350e"},
    {file = "cloudpickle-3.1.1.tar.gz", hash = "sha256:b216fa8ae4019d5482a8ac3c95d8f6346115d8835911fd4aefd1a445e4242c64"},
]

[[package]]
name = "colorama"
version = "0.4.6"
requires_python = "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7"
summary = "Cross-platform colored terminal text."
groups = ["default", "dev"]
marker = "sys_platform == \"win32\" or platform_system == \"Windows\""
files = [
    {file = "colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6"},
    {file = "colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44"},
]

[[package]]
name = "dep-logic"
version = "0.4.10"
requires_python = ">=3.8"
summary = "Python dependency specifications supporting logical operations"
groups = ["dev"]
dependencies = [
    "packaging>=22",
]
files = [
    {file = "dep_logic-0.4.10-py3-none-any.whl", hash = "sha256:5be313254e8fb7cbbc45f6d3c525373fdff174b601c8383234b449c0d12a6c75"},
    {file = "dep_logic-0.4.10.tar.gz", hash = "sha256:d2fe0626ae5700c5d3788f7105015a291bd1f4e4ae83287e7094e2feb503f859"},
]

[[package]]
name = "diff-match-patch"
version = "20241021"
requires_python = ">=3.7"
summary = "Repackaging of Google's Diff Match and Patch libraries."
groups = ["default"]
files = [
    {file = "diff_match_patch-20241021-py3-none-any.whl", hash = "sha256:93cea333fb8b2bc0d181b0de5e16df50dd344ce64828226bda07728818936782"},
    {file = "diff_match_patch-20241021.tar.gz", hash = "sha256:beae57a99fa48084532935ee2968b8661db861862ec82c6f21f4acdd6d835073"},
]

[[package]]
name = "distlib"
version = "0.3.9"
summary = "Distribution utilities"
groups = ["dev"]
files = [
    {file = "distlib-0.3.9-py2.py3-none-any.whl", hash = "sha256:47f8c22fd27c27e25a65601af709b38e4f0a45ea4fc2e710f65755fa8caaaf87"},
    {file = "distlib-0.3.9.tar.gz", hash = "sha256:a60f20dea646b8a33f3e7772f74dc0b2d0772d2837ee1342a00645c81edf9403"},
]

[[package]]
name = "distro"
version = "1.9.0"
requires_python = ">=3.6"
summary = "Distro - an OS platform information API"
groups = ["default"]
files = [
    {file = "distro-1.9.0-py3-none-any.whl", hash = "sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2"},
    {file = "distro-1.9.0.tar.gz", hash = "sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed"},
]

[[package]]
name = "faiss-cpu"
version = "1.9.0.post1"
requires_python = ">=3.9"
summary = "A library for efficient similarity search and clustering of dense vectors."
groups = ["default"]
dependencies = [
    "numpy<3.0,>=1.25.0",
    "packaging",
]
files = [
    {file = "faiss_cpu-1.9.0.post1-cp312-cp312-macosx_10_14_x86_64.whl", hash = "sha256:ae3fbe0f26c05bef26c626f9e293cc4dd0e685ec02d64100c686276a8c14bf88"},
    {file = "faiss_cpu-1.9.0.post1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:3b4d5e79643a09d91d339ba7609fb2e9b3ce6de3cd069b9183e97a843261e0e8"},
    {file = "faiss_cpu-1.9.0.post1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5bd1a0412528202e4a4cc38953f81bb7d9b9a783881fa06d822b717a1b090bdd"},
    {file = "faiss_cpu-1.9.0.post1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d4a499aa20b00266c78b9768de962e6a8dd2e2b2eb3d02aa4c41af4c6913eeba"},
    {file = "faiss_cpu-1.9.0.post1-cp312-cp312-win_amd64.whl", hash = "sha256:d6920f2db8581eb6dcd519c024120061d7d68bc075d494e59b1b2af9a1729d03"},
    {file = "faiss_cpu-1.9.0.post1.tar.gz", hash = "sha256:920725d485aab05dd87d34ef63257332441e9b53d382069f034996465827143a"},
]

[[package]]
name = "fastapi"
version = "0.115.6"
requires_python = ">=3.8"
summary = "FastAPI framework, high performance, easy to learn, fast to code, ready for production"
groups = ["default"]
dependencies = [
    "pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4",
    "starlette<0.42.0,>=0.40.0",
    "typing-extensions>=4.8.0",
]
files = [
    {file = "fastapi-0.115.6-py3-none-any.whl", hash = "sha256:e9240b29e36fa8f4bb7290316988e90c381e5092e0cbe84e7818cc3713bcf305"},
    {file = "fastapi-0.115.6.tar.gz", hash = "sha256:9ec46f7addc14ea472958a96aae5b5de65f39721a46aaf5705c480d9a8b76654"},
]

[[package]]
name = "filelock"
version = "3.17.0"
requires_python = ">=3.9"
summary = "A platform independent file lock."
groups = ["default", "dev"]
files = [
    {file = "filelock-3.17.0-py3-none-any.whl", hash = "sha256:533dc2f7ba78dc2f0f531fc6c4940addf7b70a481e269a5a3b93be94ffbe8338"},
    {file = "filelock-3.17.0.tar.gz", hash = "sha256:ee4e77401ef576ebb38cd7f13b9b28893194acc20a8e68e18730ba9c0e54660e"},
]

[[package]]
name = "findpython"
version = "0.6.2"
requires_python = ">=3.8"
summary = "A utility to find python versions on your system"
groups = ["dev"]
dependencies = [
    "packaging>=20",
]
files = [
    {file = "findpython-0.6.2-py3-none-any.whl", hash = "sha256:bda62477f858ea623ef2269f5e734469a018104a5f6c0fd9317ba238464ddb76"},
    {file = "findpython-0.6.2.tar.gz", hash = "sha256:e0c75ba9f35a7f9bb4423eb31bd17358cccf15761b6837317719177aeff46723"},
]

[[package]]
name = "frozenlist"
version = "1.5.0"
requires_python = ">=3.8"
summary = "A list-like structure which implements collections.abc.MutableSequence"
groups = ["default"]
files = [
    {file = "frozenlist-1.5.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:31115ba75889723431aa9a4e77d5f398f5cf976eea3bdf61749731f62d4a4a21"},
    {file = "frozenlist-1.5.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:7437601c4d89d070eac8323f121fcf25f88674627505334654fd027b091db09d"},
    {file = "frozenlist-1.5.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:7948140d9f8ece1745be806f2bfdf390127cf1a763b925c4a805c603df5e697e"},
    {file = "frozenlist-1.5.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:feeb64bc9bcc6b45c6311c9e9b99406660a9c05ca8a5b30d14a78555088b0b3a"},
    {file = "frozenlist-1.5.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:683173d371daad49cffb8309779e886e59c2f369430ad28fe715f66d08d4ab1a"},
    {file = "frozenlist-1.5.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:7d57d8f702221405a9d9b40f9da8ac2e4a1a8b5285aac6100f3393675f0a85ee"},
    {file = "frozenlist-1.5.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:30c72000fbcc35b129cb09956836c7d7abf78ab5416595e4857d1cae8d6251a6"},
    {file = "frozenlist-1.5.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:000a77d6034fbad9b6bb880f7ec073027908f1b40254b5d6f26210d2dab1240e"},
    {file = "frozenlist-1.5.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:5d7f5a50342475962eb18b740f3beecc685a15b52c91f7d975257e13e029eca9"},
    {file = "frozenlist-1.5.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:87f724d055eb4785d9be84e9ebf0f24e392ddfad00b3fe036e43f489fafc9039"},
    {file = "frozenlist-1.5.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:6e9080bb2fb195a046e5177f10d9d82b8a204c0736a97a153c2466127de87784"},
    {file = "frozenlist-1.5.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:9b93d7aaa36c966fa42efcaf716e6b3900438632a626fb09c049f6a2f09fc631"},
    {file = "frozenlist-1.5.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:52ef692a4bc60a6dd57f507429636c2af8b6046db8b31b18dac02cbc8f507f7f"},
    {file = "frozenlist-1.5.0-cp312-cp312-win32.whl", hash = "sha256:29d94c256679247b33a3dc96cce0f93cbc69c23bf75ff715919332fdbb6a32b8"},
    {file = "frozenlist-1.5.0-cp312-cp312-win_amd64.whl", hash = "sha256:8969190d709e7c48ea386db202d708eb94bdb29207a1f269bab1196ce0dcca1f"},
    {file = "frozenlist-1.5.0-py3-none-any.whl", hash = "sha256:d994863bba198a4a518b467bb971c56e1db3f180a25c6cf7bb1949c267f748c3"},
    {file = "frozenlist-1.5.0.tar.gz", hash = "sha256:81d5af29e61b9c8348e876d442253723928dce6433e0e76cd925cd83f1b4b817"},
]

[[package]]
name = "fsspec"
version = "2024.12.0"
requires_python = ">=3.8"
summary = "File-system specification"
groups = ["default"]
files = [
    {file = "fsspec-2024.12.0-py3-none-any.whl", hash = "sha256:b520aed47ad9804237ff878b504267a3b0b441e97508bd6d2d8774e3db85cee2"},
    {file = "fsspec-2024.12.0.tar.gz", hash = "sha256:670700c977ed2fb51e0d9f9253177ed20cbde4a3e5c0283cc5385b5870c8533f"},
]

[[package]]
name = "gitdb"
version = "4.0.12"
requires_python = ">=3.7"
summary = "Git Object Database"
groups = ["default"]
dependencies = [
    "smmap<6,>=3.0.1",
]
files = [
    {file = "gitdb-4.0.12-py3-none-any.whl", hash = "sha256:67073e15955400952c6565cc3e707c554a4eea2e428946f7a4c162fab9bd9bcf"},
    {file = "gitdb-4.0.12.tar.gz", hash = "sha256:5ef71f855d191a3326fcfbc0d5da835f26b13fbcba60c32c21091c349ffdb571"},
]

[[package]]
name = "gitpython"
version = "3.1.44"
requires_python = ">=3.7"
summary = "GitPython is a Python library used to interact with Git repositories"
groups = ["default"]
dependencies = [
    "gitdb<5,>=4.0.1",
    "typing-extensions>=3.7.4.3; python_version < \"3.8\"",
]
files = [
    {file = "GitPython-3.1.44-py3-none-any.whl", hash = "sha256:9e0e10cda9bed1ee64bc9a6de50e7e38a9c9943241cd7f585f6df3ed28011110"},
    {file = "gitpython-3.1.44.tar.gz", hash = "sha256:c87e30b26253bf5418b01b0660f818967f3c503193838337fe5e573331249269"},
]

[[package]]
name = "greenlet"
version = "3.1.1"
requires_python = ">=3.7"
summary = "Lightweight in-process concurrent programming"
groups = ["default"]
marker = "(platform_machine == \"win32\" or platform_machine == \"WIN32\" or platform_machine == \"AMD64\" or platform_machine == \"amd64\" or platform_machine == \"x86_64\" or platform_machine == \"ppc64le\" or platform_machine == \"aarch64\") and python_version < \"3.14\""
files = [
    {file = "greenlet-3.1.1-cp312-cp312-macosx_11_0_universal2.whl", hash = "sha256:4afe7ea89de619adc868e087b4d2359282058479d7cfb94970adf4b55284574d"},
    {file = "greenlet-3.1.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f406b22b7c9a9b4f8aa9d2ab13d6ae0ac3e85c9a809bd590ad53fed2bf70dc79"},
    {file = "greenlet-3.1.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c3a701fe5a9695b238503ce5bbe8218e03c3bcccf7e204e455e7462d770268aa"},
    {file = "greenlet-3.1.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2846930c65b47d70b9d178e89c7e1a69c95c1f68ea5aa0a58646b7a96df12441"},
    {file = "greenlet-3.1.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:99cfaa2110534e2cf3ba31a7abcac9d328d1d9f1b95beede58294a60348fba36"},
    {file = "greenlet-3.1.1-cp312-cp312-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:1443279c19fca463fc33e65ef2a935a5b09bb90f978beab37729e1c3c6c25fe9"},
    {file = "greenlet-3.1.1-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:b7cede291382a78f7bb5f04a529cb18e068dd29e0fb27376074b6d0317bf4dd0"},
    {file = "greenlet-3.1.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:23f20bb60ae298d7d8656c6ec6db134bca379ecefadb0b19ce6f19d1f232a942"},
    {file = "greenlet-3.1.1-cp312-cp312-win_amd64.whl", hash = "sha256:7124e16b4c55d417577c2077be379514321916d5790fa287c9ed6f23bd2ffd01"},
    {file = "greenlet-3.1.1.tar.gz", hash = "sha256:4ce3ac6cdb6adf7946475d7ef31777c26d94bccc377e070a7986bd2d5c515467"},
]

[[package]]
name = "h11"
version = "0.14.0"
requires_python = ">=3.7"
summary = "A pure-Python, bring-your-own-I/O implementation of HTTP/1.1"
groups = ["default", "dev"]
dependencies = [
    "typing-extensions; python_version < \"3.8\"",
]
files = [
    {file = "h11-0.14.0-py3-none-any.whl", hash = "sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761"},
    {file = "h11-0.14.0.tar.gz", hash = "sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d"},
]

[[package]]
name = "hishel"
version = "0.1.1"
requires_python = ">=3.9"
summary = "Persistent cache implementation for httpx and httpcore"
groups = ["dev"]
dependencies = [
    "httpx>=0.22.0",
]
files = [
    {file = "hishel-0.1.1-py3-none-any.whl", hash = "sha256:5b51acc340303faeef2f5cfc1658acb1db1fdc3e3ad76406265a485f9707c5d6"},
    {file = "hishel-0.1.1.tar.gz", hash = "sha256:1f6421b78cc23fc43c610f651b7848c9b8eee2d29551d64a2ab0d45b319b6559"},
]

[[package]]
name = "httpcore"
version = "1.0.7"
requires_python = ">=3.8"
summary = "A minimal low-level HTTP client."
groups = ["default", "dev"]
dependencies = [
    "certifi",
    "h11<0.15,>=0.13",
]
files = [
    {file = "httpcore-1.0.7-py3-none-any.whl", hash = "sha256:a3fff8f43dc260d5bd363d9f9cf1830fa3a458b332856f34282de498ed420edd"},
    {file = "httpcore-1.0.7.tar.gz", hash = "sha256:8551cb62a169ec7162ac7be8d4817d561f60e08eaa485234898414bb5a8a0b4c"},
]

[[package]]
name = "httpx"
version = "0.27.2"
requires_python = ">=3.8"
summary = "The next generation HTTP client."
groups = ["default", "dev"]
dependencies = [
    "anyio",
    "certifi",
    "httpcore==1.*",
    "idna",
    "sniffio",
]
files = [
    {file = "httpx-0.27.2-py3-none-any.whl", hash = "sha256:7bb2708e112d8fdd7829cd4243970f0c223274051cb35ee80c03301ee29a3df0"},
    {file = "httpx-0.27.2.tar.gz", hash = "sha256:f7c2be1d2f3c3c3160d441802406b206c2b76f5947b11115e6df10c6c65e66c2"},
]

[[package]]
name = "httpx"
version = "0.27.2"
extras = ["socks"]
requires_python = ">=3.8"
summary = "The next generation HTTP client."
groups = ["dev"]
dependencies = [
    "httpx==0.27.2",
    "socksio==1.*",
]
files = [
    {file = "httpx-0.27.2-py3-none-any.whl", hash = "sha256:7bb2708e112d8fdd7829cd4243970f0c223274051cb35ee80c03301ee29a3df0"},
    {file = "httpx-0.27.2.tar.gz", hash = "sha256:f7c2be1d2f3c3c3160d441802406b206c2b76f5947b11115e6df10c6c65e66c2"},
]

[[package]]
name = "huggingface-hub"
version = "0.27.1"
requires_python = ">=3.8.0"
summary = "Client library to download and publish models, datasets and other repos on the huggingface.co hub"
groups = ["default"]
dependencies = [
    "filelock",
    "fsspec>=2023.5.0",
    "packaging>=20.9",
    "pyyaml>=5.1",
    "requests",
    "tqdm>=4.42.1",
    "typing-extensions>=3.7.4.3",
]
files = [
    {file = "huggingface_hub-0.27.1-py3-none-any.whl", hash = "sha256:1c5155ca7d60b60c2e2fc38cbb3ffb7f7c3adf48f824015b219af9061771daec"},
    {file = "huggingface_hub-0.27.1.tar.gz", hash = "sha256:c004463ca870283909d715d20f066ebd6968c2207dae9393fdffb3c1d4d8f98b"},
]

[[package]]
name = "idna"
version = "3.10"
requires_python = ">=3.6"
summary = "Internationalized Domain Names in Applications (IDNA)"
groups = ["default", "dev"]
files = [
    {file = "idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3"},
    {file = "idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9"},
]

[[package]]
name = "importlib-metadata"
version = "8.6.1"
requires_python = ">=3.9"
summary = "Read metadata from Python packages"
groups = ["default"]
dependencies = [
    "typing-extensions>=3.6.4; python_version < \"3.8\"",
    "zipp>=3.20",
]
files = [
    {file = "importlib_metadata-8.6.1-py3-none-any.whl", hash = "sha256:02a89390c1e15fdfdc0d7c6b25cb3e62650d0494005c97d6f148bf5b9787525e"},
    {file = "importlib_metadata-8.6.1.tar.gz", hash = "sha256:310b41d755445d74569f993ccfc22838295d9fe005425094fad953d7f15c8580"},
]

[[package]]
name = "iniconfig"
version = "2.0.0"
requires_python = ">=3.7"
summary = "brain-dead simple config-ini parsing"
groups = ["dev"]
files = [
    {file = "iniconfig-2.0.0-py3-none-any.whl", hash = "sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374"},
    {file = "iniconfig-2.0.0.tar.gz", hash = "sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3"},
]

[[package]]
name = "installer"
version = "0.7.0"
requires_python = ">=3.7"
summary = "A library for installing Python wheels."
groups = ["dev"]
files = [
    {file = "installer-0.7.0-py3-none-any.whl", hash = "sha256:05d1933f0a5ba7d8d6296bb6d5018e7c94fa473ceb10cf198a92ccea19c27b53"},
    {file = "installer-0.7.0.tar.gz", hash = "sha256:a26d3e3116289bb08216e0d0f7d925fcef0b0194eedfa0c944bcaaa106c4b631"},
]

[[package]]
name = "jinja2"
version = "3.1.5"
requires_python = ">=3.7"
summary = "A very fast and expressive template engine."
groups = ["default"]
dependencies = [
    "MarkupSafe>=2.0",
]
files = [
    {file = "jinja2-3.1.5-py3-none-any.whl", hash = "sha256:aba0f4dc9ed8013c424088f68a5c226f7d6097ed89b246d7749c2ec4175c6adb"},
    {file = "jinja2-3.1.5.tar.gz", hash = "sha256:8fefff8dc3034e27bb80d67c671eb8a9bc424c0ef4c0826edbff304cceff43bb"},
]

[[package]]
name = "jiter"
version = "0.8.2"
requires_python = ">=3.8"
summary = "Fast iterable JSON parser."
groups = ["default"]
files = [
    {file = "jiter-0.8.2-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:e6ec2be506e7d6f9527dae9ff4b7f54e68ea44a0ef6b098256ddf895218a2f8f"},
    {file = "jiter-0.8.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:76e324da7b5da060287c54f2fabd3db5f76468006c811831f051942bf68c9d44"},
    {file = "jiter-0.8.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:180a8aea058f7535d1c84183c0362c710f4750bef66630c05f40c93c2b152a0f"},
    {file = "jiter-0.8.2-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:025337859077b41548bdcbabe38698bcd93cfe10b06ff66617a48ff92c9aec60"},
    {file = "jiter-0.8.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ecff0dc14f409599bbcafa7e470c00b80f17abc14d1405d38ab02e4b42e55b57"},
    {file = "jiter-0.8.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ffd9fee7d0775ebaba131f7ca2e2d83839a62ad65e8e02fe2bd8fc975cedeb9e"},
    {file = "jiter-0.8.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:14601dcac4889e0a1c75ccf6a0e4baf70dbc75041e51bcf8d0e9274519df6887"},
    {file = "jiter-0.8.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:92249669925bc1c54fcd2ec73f70f2c1d6a817928480ee1c65af5f6b81cdf12d"},
    {file = "jiter-0.8.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:e725edd0929fa79f8349ab4ec7f81c714df51dc4e991539a578e5018fa4a7152"},
    {file = "jiter-0.8.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:bf55846c7b7a680eebaf9c3c48d630e1bf51bdf76c68a5f654b8524335b0ad29"},
    {file = "jiter-0.8.2-cp312-cp312-win32.whl", hash = "sha256:7efe4853ecd3d6110301665a5178b9856be7e2a9485f49d91aa4d737ad2ae49e"},
    {file = "jiter-0.8.2-cp312-cp312-win_amd64.whl", hash = "sha256:83c0efd80b29695058d0fd2fa8a556490dbce9804eac3e281f373bbc99045f6c"},
    {file = "jiter-0.8.2.tar.gz", hash = "sha256:cd73d3e740666d0e639f678adb176fad25c1bcbdae88d8d7b857e1783bb4212d"},
]

[[package]]
name = "joblib"
version = "1.4.2"
requires_python = ">=3.8"
summary = "Lightweight pipelining with Python functions"
groups = ["default"]
files = [
    {file = "joblib-1.4.2-py3-none-any.whl", hash = "sha256:06d478d5674cbc267e7496a410ee875abd68e4340feff4490bcb7afb88060ae6"},
    {file = "joblib-1.4.2.tar.gz", hash = "sha256:2382c5816b2636fbd20a09e0f4e9dad4736765fdfb7dca582943b9c1366b3f0e"},
]

[[package]]
name = "jsonschema"
version = "4.23.0"
requires_python = ">=3.8"
summary = "An implementation of JSON Schema validation for Python"
groups = ["default"]
dependencies = [
    "attrs>=22.2.0",
    "importlib-resources>=1.4.0; python_version < \"3.9\"",
    "jsonschema-specifications>=2023.03.6",
    "pkgutil-resolve-name>=1.3.10; python_version < \"3.9\"",
    "referencing>=0.28.4",
    "rpds-py>=0.7.1",
]
files = [
    {file = "jsonschema-4.23.0-py3-none-any.whl", hash = "sha256:fbadb6f8b144a8f8cf9f0b89ba94501d143e50411a1278633f56a7acf7fd5566"},
    {file = "jsonschema-4.23.0.tar.gz", hash = "sha256:d71497fef26351a33265337fa77ffeb82423f3ea21283cd9467bb03999266bc4"},
]

[[package]]
name = "jsonschema-specifications"
version = "2024.10.1"
requires_python = ">=3.9"
summary = "The JSON Schema meta-schemas and vocabularies, exposed as a Registry"
groups = ["default"]
dependencies = [
    "referencing>=0.31.0",
]
files = [
    {file = "jsonschema_specifications-2024.10.1-py3-none-any.whl", hash = "sha256:a09a0680616357d9a0ecf05c12ad234479f549239d0f5b55f3deea67475da9bf"},
    {file = "jsonschema_specifications-2024.10.1.tar.gz", hash = "sha256:0f38b83639958ce1152d02a7f062902c41c8fd20d558b0c34344292d417ae272"},
]

[[package]]
name = "litellm"
version = "1.59.3"
requires_python = "!=2.7.*,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,!=3.7.*,>=3.8"
summary = "Library to easily interface with LLM API providers"
groups = ["default"]
dependencies = [
    "aiohttp",
    "click",
    "httpx<0.28.0,>=0.23.0",
    "importlib-metadata>=6.8.0",
    "jinja2<4.0.0,>=3.1.2",
    "jsonschema<5.0.0,>=4.22.0",
    "openai>=1.55.3",
    "pydantic<3.0.0,>=2.0.0",
    "python-dotenv>=0.2.0",
    "tiktoken>=0.7.0",
    "tokenizers",
]
files = [
    {file = "litellm-1.59.3-py3-none-any.whl", hash = "sha256:17c6fe3b9ccd54fbdb73d2389268864296f9601c5cb29d80061489e0a984e5c0"},
    {file = "litellm-1.59.3.tar.gz", hash = "sha256:5e625e07a97346704d67f04265253acfc6a0c7e3afad82c2ed57fcdaae066add"},
]

[[package]]
name = "loguru"
version = "0.7.3"
requires_python = "<4.0,>=3.5"
summary = "Python logging made (stupidly) simple"
groups = ["default"]
dependencies = [
    "aiocontextvars>=0.2.0; python_version < \"3.7\"",
    "colorama>=0.3.4; sys_platform == \"win32\"",
    "win32-setctime>=1.0.0; sys_platform == \"win32\"",
]
files = [
    {file = "loguru-0.7.3-py3-none-any.whl", hash = "sha256:31a33c10c8e1e10422bfd431aeb5d351c7cf7fa671e3c4df004162264b28220c"},
    {file = "loguru-0.7.3.tar.gz", hash = "sha256:19480589e77d47b8d85b2c827ad95d49bf31b0dcde16593892eb51dd18706eb6"},
]

[[package]]
name = "mako"
version = "1.3.8"
requires_python = ">=3.8"
summary = "A super-fast templating language that borrows the best ideas from the existing templating languages."
groups = ["default"]
dependencies = [
    "MarkupSafe>=0.9.2",
]
files = [
    {file = "Mako-1.3.8-py3-none-any.whl", hash = "sha256:42f48953c7eb91332040ff567eb7eea69b22e7a4affbc5ba8e845e8f730f6627"},
    {file = "mako-1.3.8.tar.gz", hash = "sha256:577b97e414580d3e088d47c2dbbe9594aa7a5146ed2875d4dfa9075af2dd3cc8"},
]

[[package]]
name = "markdown-it-py"
version = "3.0.0"
requires_python = ">=3.8"
summary = "Python port of markdown-it. Markdown parsing, done right!"
groups = ["dev"]
dependencies = [
    "mdurl~=0.1",
]
files = [
    {file = "markdown-it-py-3.0.0.tar.gz", hash = "sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb"},
    {file = "markdown_it_py-3.0.0-py3-none-any.whl", hash = "sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1"},
]

[[package]]
name = "markupsafe"
version = "3.0.2"
requires_python = ">=3.9"
summary = "Safely add untrusted strings to HTML/XML markup."
groups = ["default"]
files = [
    {file = "MarkupSafe-3.0.2-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:9778bd8ab0a994ebf6f84c2b949e65736d5575320a17ae8984a77fab08db94cf"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:846ade7b71e3536c4e56b386c2a47adf5741d2d8b94ec9dc3e92e5e1ee1e2225"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1c99d261bd2d5f6b59325c92c73df481e05e57f19837bdca8413b9eac4bd8028"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e17c96c14e19278594aa4841ec148115f9c7615a47382ecb6b82bd8fea3ab0c8"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:88416bd1e65dcea10bc7569faacb2c20ce071dd1f87539ca2ab364bf6231393c"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:2181e67807fc2fa785d0592dc2d6206c019b9502410671cc905d132a92866557"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:52305740fe773d09cffb16f8ed0427942901f00adedac82ec8b67752f58a1b22"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:ad10d3ded218f1039f11a75f8091880239651b52e9bb592ca27de44eed242a48"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-win32.whl", hash = "sha256:0f4ca02bea9a23221c0182836703cbf8930c5e9454bacce27e767509fa286a30"},
    {file = "MarkupSafe-3.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:8e06879fc22a25ca47312fbe7c8264eb0b662f6db27cb2d3bbbc74b1df4b9b87"},
    {file = "markupsafe-3.0.2.tar.gz", hash = "sha256:ee55d3edf80167e48ea11a923c7386f4669df67d7994554387f84e7d8b0a2bf0"},
]

[[package]]
name = "mdurl"
version = "0.1.2"
requires_python = ">=3.7"
summary = "Markdown URL utilities"
groups = ["dev"]
files = [
    {file = "mdurl-0.1.2-py3-none-any.whl", hash = "sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8"},
    {file = "mdurl-0.1.2.tar.gz", hash = "sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba"},
]

[[package]]
name = "mpmath"
version = "1.3.0"
summary = "Python library for arbitrary-precision floating-point arithmetic"
groups = ["default"]
marker = "python_version >= \"3.9\""
files = [
    {file = "mpmath-1.3.0-py3-none-any.whl", hash = "sha256:a0b2b9fe80bbcd81a6647ff13108738cfb482d481d826cc0e02f5b35e5c88d2c"},
    {file = "mpmath-1.3.0.tar.gz", hash = "sha256:7a28eb2a9774d00c7bc92411c19a89209d5da7c4c9a9e227be8330a23a25b91f"},
]

[[package]]
name = "msgpack"
version = "1.1.0"
requires_python = ">=3.8"
summary = "MessagePack serializer"
groups = ["dev"]
files = [
    {file = "msgpack-1.1.0-cp312-cp312-macosx_10_9_universal2.whl", hash = "sha256:d46cf9e3705ea9485687aa4001a76e44748b609d260af21c4ceea7f2212a501d"},
    {file = "msgpack-1.1.0-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:5dbad74103df937e1325cc4bfeaf57713be0b4f15e1c2da43ccdd836393e2ea2"},
    {file = "msgpack-1.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:58dfc47f8b102da61e8949708b3eafc3504509a5728f8b4ddef84bd9e16ad420"},
    {file = "msgpack-1.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4676e5be1b472909b2ee6356ff425ebedf5142427842aa06b4dfd5117d1ca8a2"},
    {file = "msgpack-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:17fb65dd0bec285907f68b15734a993ad3fc94332b5bb21b0435846228de1f39"},
    {file = "msgpack-1.1.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a51abd48c6d8ac89e0cfd4fe177c61481aca2d5e7ba42044fd218cfd8ea9899f"},
    {file = "msgpack-1.1.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:2137773500afa5494a61b1208619e3871f75f27b03bcfca7b3a7023284140247"},
    {file = "msgpack-1.1.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:398b713459fea610861c8a7b62a6fec1882759f308ae0795b5413ff6a160cf3c"},
    {file = "msgpack-1.1.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:06f5fd2f6bb2a7914922d935d3b8bb4a7fff3a9a91cfce6d06c13bc42bec975b"},
    {file = "msgpack-1.1.0-cp312-cp312-win32.whl", hash = "sha256:ad33e8400e4ec17ba782f7b9cf868977d867ed784a1f5f2ab46e7ba53b6e1e1b"},
    {file = "msgpack-1.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:115a7af8ee9e8cddc10f87636767857e7e3717b7a2e97379dc2054712693e90f"},
    {file = "msgpack-1.1.0.tar.gz", hash = "sha256:dd432ccc2c72b914e4cb77afce64aab761c1137cc698be3984eee260bcb2896e"},
]

[[package]]
name = "multidict"
version = "6.1.0"
requires_python = ">=3.8"
summary = "multidict implementation"
groups = ["default"]
dependencies = [
    "typing-extensions>=4.1.0; python_version < \"3.11\"",
]
files = [
    {file = "multidict-6.1.0-cp312-cp312-macosx_10_9_universal2.whl", hash = "sha256:b04772ed465fa3cc947db808fa306d79b43e896beb677a56fb2347ca1a49c1fa"},
    {file = "multidict-6.1.0-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:6180c0ae073bddeb5a97a38c03f30c233e0a4d39cd86166251617d1bbd0af436"},
    {file = "multidict-6.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:071120490b47aa997cca00666923a83f02c7fbb44f71cf7f136df753f7fa8761"},
    {file = "multidict-6.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:50b3a2710631848991d0bf7de077502e8994c804bb805aeb2925a981de58ec2e"},
    {file = "multidict-6.1.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b58c621844d55e71c1b7f7c498ce5aa6985d743a1a59034c57a905b3f153c1ef"},
    {file = "multidict-6.1.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:55b6d90641869892caa9ca42ff913f7ff1c5ece06474fbd32fb2cf6834726c95"},
    {file = "multidict-6.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4b820514bfc0b98a30e3d85462084779900347e4d49267f747ff54060cc33925"},
    {file = "multidict-6.1.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:10a9b09aba0c5b48c53761b7c720aaaf7cf236d5fe394cd399c7ba662d5f9966"},
    {file = "multidict-6.1.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1e16bf3e5fc9f44632affb159d30a437bfe286ce9e02754759be5536b169b305"},
    {file = "multidict-6.1.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:76f364861c3bfc98cbbcbd402d83454ed9e01a5224bb3a28bf70002a230f73e2"},
    {file = "multidict-6.1.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:820c661588bd01a0aa62a1283f20d2be4281b086f80dad9e955e690c75fb54a2"},
    {file = "multidict-6.1.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:0e5f362e895bc5b9e67fe6e4ded2492d8124bdf817827f33c5b46c2fe3ffaca6"},
    {file = "multidict-6.1.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:3ec660d19bbc671e3a6443325f07263be452c453ac9e512f5eb935e7d4ac28b3"},
    {file = "multidict-6.1.0-cp312-cp312-win32.whl", hash = "sha256:58130ecf8f7b8112cdb841486404f1282b9c86ccb30d3519faf301b2e5659133"},
    {file = "multidict-6.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:188215fc0aafb8e03341995e7c4797860181562380f81ed0a87ff455b70bf1f1"},
    {file = "multidict-6.1.0-py3-none-any.whl", hash = "sha256:48e171e52d1c4d33888e529b999e5900356b9ae588c2f09a52dcefb158b27506"},
    {file = "multidict-6.1.0.tar.gz", hash = "sha256:22ae2ebf9b0c69d206c003e2f6a914ea33f0a932d4aa16f236afc049d9958f4a"},
]

[[package]]
name = "networkx"
version = "3.4.2"
requires_python = ">=3.10"
summary = "Python package for creating and manipulating graphs and networks"
groups = ["default"]
files = [
    {file = "networkx-3.4.2-py3-none-any.whl", hash = "sha256:df5d4365b724cf81b8c6a7312509d0c22386097011ad1abe274afd5e9d3bbc5f"},
    {file = "networkx-3.4.2.tar.gz", hash = "sha256:307c3669428c5362aab27c8a1260aa8f47c4e91d3891f48be0141738d8d053e1"},
]

[[package]]
name = "numpy"
version = "2.2.2"
requires_python = ">=3.10"
summary = "Fundamental package for array computing in Python"
groups = ["default", "dev"]
files = [
    {file = "numpy-2.2.2-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:ac9bea18d6d58a995fac1b2cb4488e17eceeac413af014b1dd26170b766d8467"},
    {file = "numpy-2.2.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:23ae9f0c2d889b7b2d88a3791f6c09e2ef827c2446f1c4a3e3e76328ee4afd9a"},
    {file = "numpy-2.2.2-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:3074634ea4d6df66be04f6728ee1d173cfded75d002c75fac79503a880bf3825"},
    {file = "numpy-2.2.2-cp312-cp312-macosx_14_0_x86_64.whl", hash = "sha256:8ec0636d3f7d68520afc6ac2dc4b8341ddb725039de042faf0e311599f54eb37"},
    {file = "numpy-2.2.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2ffbb1acd69fdf8e89dd60ef6182ca90a743620957afb7066385a7bbe88dc748"},
    {file = "numpy-2.2.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0349b025e15ea9d05c3d63f9657707a4e1d471128a3b1d876c095f328f8ff7f0"},
    {file = "numpy-2.2.2-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:463247edcee4a5537841d5350bc87fe8e92d7dd0e8c71c995d2c6eecb8208278"},
    {file = "numpy-2.2.2-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:9dd47ff0cb2a656ad69c38da850df3454da88ee9a6fde0ba79acceee0e79daba"},
    {file = "numpy-2.2.2-cp312-cp312-win32.whl", hash = "sha256:4525b88c11906d5ab1b0ec1f290996c0020dd318af8b49acaa46f198b1ffc283"},
    {file = "numpy-2.2.2-cp312-cp312-win_amd64.whl", hash = "sha256:5acea83b801e98541619af398cc0109ff48016955cc0818f478ee9ef1c5c3dcb"},
    {file = "numpy-2.2.2.tar.gz", hash = "sha256:ed6906f61834d687738d25988ae117683705636936cc605be0bb208b23df4d8f"},
]

[[package]]
name = "nvidia-cublas-cu12"
version = "12.4.5.8"
requires_python = ">=3"
summary = "CUBLAS native runtime libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_aarch64.whl", hash = "sha256:0f8aa1706812e00b9f19dfe0cdb3999b092ccb8ca168c0db5b8ea712456fd9b3"},
    {file = "nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl", hash = "sha256:2fc8da60df463fdefa81e323eef2e36489e1c94335b5358bcb38360adf75ac9b"},
    {file = "nvidia_cublas_cu12-12.4.5.8-py3-none-win_amd64.whl", hash = "sha256:5a796786da89203a0657eda402bcdcec6180254a8ac22d72213abc42069522dc"},
]

[[package]]
name = "nvidia-cuda-cupti-cu12"
version = "12.4.127"
requires_python = ">=3"
summary = "CUDA profiling tools runtime libs."
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_aarch64.whl", hash = "sha256:79279b35cf6f91da114182a5ce1864997fd52294a87a16179ce275773799458a"},
    {file = "nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:9dec60f5ac126f7bb551c055072b69d85392b13311fcc1bcda2202d172df30fb"},
    {file = "nvidia_cuda_cupti_cu12-12.4.127-py3-none-win_amd64.whl", hash = "sha256:5688d203301ab051449a2b1cb6690fbe90d2b372f411521c86018b950f3d7922"},
]

[[package]]
name = "nvidia-cuda-nvrtc-cu12"
version = "12.4.127"
requires_python = ">=3"
summary = "NVRTC native runtime libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_aarch64.whl", hash = "sha256:0eedf14185e04b76aa05b1fea04133e59f465b6f960c0cbf4e37c3cb6b0ea198"},
    {file = "nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:a178759ebb095827bd30ef56598ec182b85547f1508941a3d560eb7ea1fbf338"},
    {file = "nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-win_amd64.whl", hash = "sha256:a961b2f1d5f17b14867c619ceb99ef6fcec12e46612711bcec78eb05068a60ec"},
]

[[package]]
name = "nvidia-cuda-runtime-cu12"
version = "12.4.127"
requires_python = ">=3"
summary = "CUDA Runtime native Libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_aarch64.whl", hash = "sha256:961fe0e2e716a2a1d967aab7caee97512f71767f852f67432d572e36cb3a11f3"},
    {file = "nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:64403288fa2136ee8e467cdc9c9427e0434110899d07c779f25b5c068934faa5"},
    {file = "nvidia_cuda_runtime_cu12-12.4.127-py3-none-win_amd64.whl", hash = "sha256:09c2e35f48359752dfa822c09918211844a3d93c100a715d79b59591130c5e1e"},
]

[[package]]
name = "nvidia-cudnn-cu12"
version = "9.1.0.70"
requires_python = ">=3"
summary = "cuDNN runtime libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
dependencies = [
    "nvidia-cublas-cu12",
]
files = [
    {file = "nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl", hash = "sha256:165764f44ef8c61fcdfdfdbe769d687e06374059fbb388b6c89ecb0e28793a6f"},
    {file = "nvidia_cudnn_cu12-9.1.0.70-py3-none-win_amd64.whl", hash = "sha256:6278562929433d68365a07a4a1546c237ba2849852c0d4b2262a486e805b977a"},
]

[[package]]
name = "nvidia-cufft-cu12"
version = "11.2.1.3"
requires_python = ">=3"
summary = "CUFFT native runtime libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
dependencies = [
    "nvidia-nvjitlink-cu12",
]
files = [
    {file = "nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_aarch64.whl", hash = "sha256:5dad8008fc7f92f5ddfa2101430917ce2ffacd86824914c82e28990ad7f00399"},
    {file = "nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl", hash = "sha256:f083fc24912aa410be21fa16d157fed2055dab1cc4b6934a0e03cba69eb242b9"},
    {file = "nvidia_cufft_cu12-11.2.1.3-py3-none-win_amd64.whl", hash = "sha256:d802f4954291101186078ccbe22fc285a902136f974d369540fd4a5333d1440b"},
]

[[package]]
name = "nvidia-curand-cu12"
version = "10.3.5.147"
requires_python = ">=3"
summary = "CURAND native runtime libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_aarch64.whl", hash = "sha256:1f173f09e3e3c76ab084aba0de819c49e56614feae5c12f69883f4ae9bb5fad9"},
    {file = "nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl", hash = "sha256:a88f583d4e0bb643c49743469964103aa59f7f708d862c3ddb0fc07f851e3b8b"},
    {file = "nvidia_curand_cu12-10.3.5.147-py3-none-win_amd64.whl", hash = "sha256:f307cc191f96efe9e8f05a87096abc20d08845a841889ef78cb06924437f6771"},
]

[[package]]
name = "nvidia-cusolver-cu12"
version = "11.6.1.9"
requires_python = ">=3"
summary = "CUDA solver native runtime libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
dependencies = [
    "nvidia-cublas-cu12",
    "nvidia-cusparse-cu12",
    "nvidia-nvjitlink-cu12",
]
files = [
    {file = "nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_aarch64.whl", hash = "sha256:d338f155f174f90724bbde3758b7ac375a70ce8e706d70b018dd3375545fc84e"},
    {file = "nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl", hash = "sha256:19e33fa442bcfd085b3086c4ebf7e8debc07cfe01e11513cc6d332fd918ac260"},
    {file = "nvidia_cusolver_cu12-11.6.1.9-py3-none-win_amd64.whl", hash = "sha256:e77314c9d7b694fcebc84f58989f3aa4fb4cb442f12ca1a9bde50f5e8f6d1b9c"},
]

[[package]]
name = "nvidia-cusparse-cu12"
version = "12.3.1.170"
requires_python = ">=3"
summary = "CUSPARSE native runtime libraries"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
dependencies = [
    "nvidia-nvjitlink-cu12",
]
files = [
    {file = "nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_aarch64.whl", hash = "sha256:9d32f62896231ebe0480efd8a7f702e143c98cfaa0e8a76df3386c1ba2b54df3"},
    {file = "nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl", hash = "sha256:ea4f11a2904e2a8dc4b1833cc1b5181cde564edd0d5cd33e3c168eff2d1863f1"},
    {file = "nvidia_cusparse_cu12-12.3.1.170-py3-none-win_amd64.whl", hash = "sha256:9bc90fb087bc7b4c15641521f31c0371e9a612fc2ba12c338d3ae032e6b6797f"},
]

[[package]]
name = "nvidia-nccl-cu12"
version = "2.21.5"
requires_python = ">=3"
summary = "NVIDIA Collective Communication Library (NCCL) Runtime"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_nccl_cu12-2.21.5-py3-none-manylinux2014_x86_64.whl", hash = "sha256:8579076d30a8c24988834445f8d633c697d42397e92ffc3f63fa26766d25e0a0"},
]

[[package]]
name = "nvidia-nvjitlink-cu12"
version = "12.4.127"
requires_python = ">=3"
summary = "Nvidia JIT LTO Library"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_aarch64.whl", hash = "sha256:4abe7fef64914ccfa909bc2ba39739670ecc9e820c83ccc7a6ed414122599b83"},
    {file = "nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:06b3b9b25bf3f8af351d664978ca26a16d2c5127dbd53c0497e28d1fb9611d57"},
    {file = "nvidia_nvjitlink_cu12-12.4.127-py3-none-win_amd64.whl", hash = "sha256:fd9020c501d27d135f983c6d3e244b197a7ccad769e34df53a42e276b0e25fa1"},
]

[[package]]
name = "nvidia-nvtx-cu12"
version = "12.4.127"
requires_python = ">=3"
summary = "NVIDIA Tools Extension"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\""
files = [
    {file = "nvidia_nvtx_cu12-12.4.127-py3-none-manylinux2014_aarch64.whl", hash = "sha256:7959ad635db13edf4fc65c06a6e9f9e55fc2f92596db928d169c0bb031e88ef3"},
    {file = "nvidia_nvtx_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl", hash = "sha256:781e950d9b9f60d8241ccea575b32f5105a5baf4c2351cab5256a24869f12a1a"},
    {file = "nvidia_nvtx_cu12-12.4.127-py3-none-win_amd64.whl", hash = "sha256:641dccaaa1139f3ffb0d3164b4b84f9d253397e38246a4f2f36728b48566d485"},
]

[[package]]
name = "openai"
version = "1.59.9"
requires_python = ">=3.8"
summary = "The official Python library for the openai API"
groups = ["default"]
dependencies = [
    "anyio<5,>=3.5.0",
    "distro<2,>=1.7.0",
    "httpx<1,>=0.23.0",
    "jiter<1,>=0.4.0",
    "pydantic<3,>=1.9.0",
    "sniffio",
    "tqdm>4",
    "typing-extensions<5,>=4.11",
]
files = [
    {file = "openai-1.59.9-py3-none-any.whl", hash = "sha256:61a0608a1313c08ddf92fe793b6dbd1630675a1fe3866b2f96447ce30050c448"},
    {file = "openai-1.59.9.tar.gz", hash = "sha256:ec1a20b0351b4c3e65c6292db71d8233515437c6065efd4fd50edeb55df5f5d2"},
]

[[package]]
name = "packaging"
version = "24.2"
requires_python = ">=3.8"
summary = "Core utilities for Python packages"
groups = ["default", "dev"]
files = [
    {file = "packaging-24.2-py3-none-any.whl", hash = "sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759"},
    {file = "packaging-24.2.tar.gz", hash = "sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f"},
]

[[package]]
name = "pbs-installer"
version = "2025.1.6"
requires_python = ">=3.8"
summary = "Installer for Python Build Standalone"
groups = ["dev"]
files = [
    {file = "pbs_installer-2025.1.6-py3-none-any.whl", hash = "sha256:0eb974ed142298f0dcc3adff5938b49fb219c4f81dbeae9fe609f7374a0cbcc8"},
    {file = "pbs_installer-2025.1.6.tar.gz", hash = "sha256:69cc3fab5bb36eac678af9228bdd288a25610bc7aaee7b3f3b0c31562fe206d4"},
]

[[package]]
name = "pdm"
version = "2.22.2"
requires_python = ">=3.9"
summary = "A modern Python package and dependency manager supporting the latest PEP standards"
groups = ["dev"]
dependencies = [
    "blinker",
    "certifi>=2024.8.30",
    "dep-logic>=0.4.4",
    "filelock>=3.13",
    "findpython<1.0.0a0,>=0.6.0",
    "hishel>=0.0.32",
    "httpcore>=1.0.6",
    "httpx[socks]<1,>0.20",
    "importlib-metadata>=3.6; python_version < \"3.10\"",
    "installer<0.8,>=0.7",
    "msgpack>=1.0",
    "packaging!=22.0,>=20.9",
    "pbs-installer>=2024.4.18",
    "platformdirs",
    "pyproject-hooks",
    "python-dotenv>=0.15",
    "resolvelib>=1.1",
    "rich>=12.3.0",
    "shellingham>=1.3.2",
    "tomli>=1.1.0; python_version < \"3.11\"",
    "tomlkit<1,>=0.11.1",
    "truststore>=0.9; python_version >= \"3.10\"",
    "unearth>=0.17.0",
    "virtualenv>=20",
]
files = [
    {file = "pdm-2.22.2-py3-none-any.whl", hash = "sha256:22c7489dfb3c261f9fd13627520b9fe89e56f4146e392b0438b6218c9f437e9e"},
    {file = "pdm-2.22.2.tar.gz", hash = "sha256:907dbaa1659f07c763902f8429c1573aa32b5ef2d99b3b123b5f1e38015c917b"},
]

[[package]]
name = "pdm"
version = "2.22.2"
extras = ["pytest"]
requires_python = ">=3.9"
summary = "A modern Python package and dependency manager supporting the latest PEP standards"
groups = ["dev"]
dependencies = [
    "pdm==2.22.2",
    "pytest",
    "pytest-mock",
]
files = [
    {file = "pdm-2.22.2-py3-none-any.whl", hash = "sha256:22c7489dfb3c261f9fd13627520b9fe89e56f4146e392b0438b6218c9f437e9e"},
    {file = "pdm-2.22.2.tar.gz", hash = "sha256:907dbaa1659f07c763902f8429c1573aa32b5ef2d99b3b123b5f1e38015c917b"},
]

[[package]]
name = "pillow"
version = "11.1.0"
requires_python = ">=3.9"
summary = "Python Imaging Library (Fork)"
groups = ["default"]
files = [
    {file = "pillow-11.1.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:2062ffb1d36544d42fcaa277b069c88b01bb7298f4efa06731a7fd6cc290b81a"},
    {file = "pillow-11.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:a85b653980faad27e88b141348707ceeef8a1186f75ecc600c395dcac19f385b"},
    {file = "pillow-11.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9409c080586d1f683df3f184f20e36fb647f2e0bc3988094d4fd8c9f4eb1b3b3"},
    {file = "pillow-11.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7fdadc077553621911f27ce206ffcbec7d3f8d7b50e0da39f10997e8e2bb7f6a"},
    {file = "pillow-11.1.0-cp312-cp312-manylinux_2_28_aarch64.whl", hash = "sha256:93a18841d09bcdd774dcdc308e4537e1f867b3dec059c131fde0327899734aa1"},
    {file = "pillow-11.1.0-cp312-cp312-manylinux_2_28_x86_64.whl", hash = "sha256:9aa9aeddeed452b2f616ff5507459e7bab436916ccb10961c4a382cd3e03f47f"},
    {file = "pillow-11.1.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:3cdcdb0b896e981678eee140d882b70092dac83ac1cdf6b3a60e2216a73f2b91"},
    {file = "pillow-11.1.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:36ba10b9cb413e7c7dfa3e189aba252deee0602c86c309799da5a74009ac7a1c"},
    {file = "pillow-11.1.0-cp312-cp312-win32.whl", hash = "sha256:cfd5cd998c2e36a862d0e27b2df63237e67273f2fc78f47445b14e73a810e7e6"},
    {file = "pillow-11.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:a697cd8ba0383bba3d2d3ada02b34ed268cb548b369943cd349007730c92bddf"},
    {file = "pillow-11.1.0-cp312-cp312-win_arm64.whl", hash = "sha256:4dd43a78897793f60766563969442020e90eb7847463eca901e41ba186a7d4a5"},
    {file = "pillow-11.1.0.tar.gz", hash = "sha256:368da70808b36d73b4b390a8ffac11069f8a5c85f29eff1f1b01bcf3ef5b2a20"},
]

[[package]]
name = "platformdirs"
version = "4.3.6"
requires_python = ">=3.8"
summary = "A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`."
groups = ["dev"]
files = [
    {file = "platformdirs-4.3.6-py3-none-any.whl", hash = "sha256:73e575e1408ab8103900836b97580d5307456908a03e92031bab39e4554cc3fb"},
    {file = "platformdirs-4.3.6.tar.gz", hash = "sha256:357fb2acbc885b0419afd3ce3ed34564c13c9b95c89360cd9563f73aa5e2b907"},
]

[[package]]
name = "pluggy"
version = "1.5.0"
requires_python = ">=3.8"
summary = "plugin and hook calling mechanisms for python"
groups = ["dev"]
files = [
    {file = "pluggy-1.5.0-py3-none-any.whl", hash = "sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669"},
    {file = "pluggy-1.5.0.tar.gz", hash = "sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1"},
]

[[package]]
name = "propcache"
version = "0.2.1"
requires_python = ">=3.9"
summary = "Accelerated property cache"
groups = ["default"]
files = [
    {file = "propcache-0.2.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:081a430aa8d5e8876c6909b67bd2d937bfd531b0382d3fdedb82612c618bc41a"},
    {file = "propcache-0.2.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:d2ccec9ac47cf4e04897619c0e0c1a48c54a71bdf045117d3a26f80d38ab1fb0"},
    {file = "propcache-0.2.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:14d86fe14b7e04fa306e0c43cdbeebe6b2c2156a0c9ce56b815faacc193e320d"},
    {file = "propcache-0.2.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:049324ee97bb67285b49632132db351b41e77833678432be52bdd0289c0e05e4"},
    {file = "propcache-0.2.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:1cd9a1d071158de1cc1c71a26014dcdfa7dd3d5f4f88c298c7f90ad6f27bb46d"},
    {file = "propcache-0.2.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:98110aa363f1bb4c073e8dcfaefd3a5cea0f0834c2aab23dda657e4dab2f53b5"},
    {file = "propcache-0.2.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:647894f5ae99c4cf6bb82a1bb3a796f6e06af3caa3d32e26d2350d0e3e3faf24"},
    {file = "propcache-0.2.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:bfd3223c15bebe26518d58ccf9a39b93948d3dcb3e57a20480dfdd315356baff"},
    {file = "propcache-0.2.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:d71264a80f3fcf512eb4f18f59423fe82d6e346ee97b90625f283df56aee103f"},
    {file = "propcache-0.2.1-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:e73091191e4280403bde6c9a52a6999d69cdfde498f1fdf629105247599b57ec"},
    {file = "propcache-0.2.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:3935bfa5fede35fb202c4b569bb9c042f337ca4ff7bd540a0aa5e37131659348"},
    {file = "propcache-0.2.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:f508b0491767bb1f2b87fdfacaba5f7eddc2f867740ec69ece6d1946d29029a6"},
    {file = "propcache-0.2.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:1672137af7c46662a1c2be1e8dc78cb6d224319aaa40271c9257d886be4363a6"},
    {file = "propcache-0.2.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:b74c261802d3d2b85c9df2dfb2fa81b6f90deeef63c2db9f0e029a3cac50b518"},
    {file = "propcache-0.2.1-cp312-cp312-win32.whl", hash = "sha256:d09c333d36c1409d56a9d29b3a1b800a42c76a57a5a8907eacdbce3f18768246"},
    {file = "propcache-0.2.1-cp312-cp312-win_amd64.whl", hash = "sha256:c214999039d4f2a5b2073ac506bba279945233da8c786e490d411dfc30f855c1"},
    {file = "propcache-0.2.1-py3-none-any.whl", hash = "sha256:52277518d6aae65536e9cea52d4e7fd2f7a66f4aa2d30ed3f2fcea620ace3c54"},
    {file = "propcache-0.2.1.tar.gz", hash = "sha256:3f77ce728b19cb537714499928fe800c3dda29e8d9428778fc7c186da4c09a64"},
]

[[package]]
name = "psycopg2-binary"
version = "2.9.10"
requires_python = ">=3.8"
summary = "psycopg2 - Python-PostgreSQL Database Adapter"
groups = ["default"]
files = [
    {file = "psycopg2-binary-2.9.10.tar.gz", hash = "sha256:4b3df0e6990aa98acda57d983942eff13d824135fe2250e6522edaa782a06de2"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-macosx_12_0_x86_64.whl", hash = "sha256:880845dfe1f85d9d5f7c412efea7a08946a46894537e4e5d091732eb1d34d9a0"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:9440fa522a79356aaa482aa4ba500b65f28e5d0e63b801abf6aa152a29bd842a"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e3923c1d9870c49a2d44f795df0c889a22380d36ef92440ff618ec315757e539"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7b2c956c028ea5de47ff3a8d6b3cc3330ab45cf0b7c3da35a2d6ff8420896526"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f758ed67cab30b9a8d2833609513ce4d3bd027641673d4ebc9c067e4d208eec1"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8cd9b4f2cfab88ed4a9106192de509464b75a906462fb846b936eabe45c2063e"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:6dc08420625b5a20b53551c50deae6e231e6371194fa0651dbe0fb206452ae1f"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:d7cd730dfa7c36dbe8724426bf5612798734bff2d3c3857f36f2733f5bfc7c00"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:155e69561d54d02b3c3209545fb08938e27889ff5a10c19de8d23eb5a41be8a5"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:c3cc28a6fd5a4a26224007712e79b81dbaee2ffb90ff406256158ec4d7b52b47"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-win32.whl", hash = "sha256:ec8a77f521a17506a24a5f626cb2aee7850f9b69a0afe704586f63a464f3cd64"},
    {file = "psycopg2_binary-2.9.10-cp312-cp312-win_amd64.whl", hash = "sha256:18c5ee682b9c6dd3696dad6e54cc7ff3a1a9020df6a5c0f861ef8bfd338c3ca0"},
]

[[package]]
name = "pydantic"
version = "2.10.5"
requires_python = ">=3.8"
summary = "Data validation using Python type hints"
groups = ["default"]
dependencies = [
    "annotated-types>=0.6.0",
    "pydantic-core==2.27.2",
    "typing-extensions>=4.12.2",
]
files = [
    {file = "pydantic-2.10.5-py3-none-any.whl", hash = "sha256:4dd4e322dbe55472cb7ca7e73f4b63574eecccf2835ffa2af9021ce113c83c53"},
    {file = "pydantic-2.10.5.tar.gz", hash = "sha256:278b38dbbaec562011d659ee05f63346951b3a248a6f3642e1bc68894ea2b4ff"},
]

[[package]]
name = "pydantic-core"
version = "2.27.2"
requires_python = ">=3.8"
summary = "Core functionality for Pydantic validation and serialization"
groups = ["default"]
dependencies = [
    "typing-extensions!=4.7.0,>=4.6.0",
]
files = [
    {file = "pydantic_core-2.27.2-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:9e0c8cfefa0ef83b4da9588448b6d8d2a2bf1a53c3f1ae5fca39eb3061e2f0b0"},
    {file = "pydantic_core-2.27.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:83097677b8e3bd7eaa6775720ec8e0405f1575015a463285a92bfdfe254529ef"},
    {file = "pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:172fce187655fece0c90d90a678424b013f8fbb0ca8b036ac266749c09438cb7"},
    {file = "pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:519f29f5213271eeeeb3093f662ba2fd512b91c5f188f3bb7b27bc5973816934"},
    {file = "pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:05e3a55d124407fffba0dd6b0c0cd056d10e983ceb4e5dbd10dda135c31071d6"},
    {file = "pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9c3ed807c7b91de05e63930188f19e921d1fe90de6b4f5cd43ee7fcc3525cb8c"},
    {file = "pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6fb4aadc0b9a0c063206846d603b92030eb6f03069151a625667f982887153e2"},
    {file = "pydantic_core-2.27.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:28ccb213807e037460326424ceb8b5245acb88f32f3d2777427476e1b32c48c4"},
    {file = "pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:de3cd1899e2c279b140adde9357c4495ed9d47131b4a4eaff9052f23398076b3"},
    {file = "pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_armv7l.whl", hash = "sha256:220f892729375e2d736b97d0e51466252ad84c51857d4d15f5e9692f9ef12be4"},
    {file = "pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:a0fcd29cd6b4e74fe8ddd2c90330fd8edf2e30cb52acda47f06dd615ae72da57"},
    {file = "pydantic_core-2.27.2-cp312-cp312-win32.whl", hash = "sha256:1e2cb691ed9834cd6a8be61228471d0a503731abfb42f82458ff27be7b2186fc"},
    {file = "pydantic_core-2.27.2-cp312-cp312-win_amd64.whl", hash = "sha256:cc3f1a99a4f4f9dd1de4fe0312c114e740b5ddead65bb4102884b384c15d8bc9"},
    {file = "pydantic_core-2.27.2-cp312-cp312-win_arm64.whl", hash = "sha256:3911ac9284cd8a1792d3cb26a2da18f3ca26c6908cc434a18f730dc0db7bfa3b"},
    {file = "pydantic_core-2.27.2.tar.gz", hash = "sha256:eb026e5a4c1fee05726072337ff51d1efb6f59090b7da90d30ea58625b1ffb39"},
]

[[package]]
name = "pygments"
version = "2.19.1"
requires_python = ">=3.8"
summary = "Pygments is a syntax highlighting package written in Python."
groups = ["dev"]
files = [
    {file = "pygments-2.19.1-py3-none-any.whl", hash = "sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c"},
    {file = "pygments-2.19.1.tar.gz", hash = "sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f"},
]

[[package]]
name = "pyproject-hooks"
version = "1.2.0"
requires_python = ">=3.7"
summary = "Wrappers to call pyproject.toml-based build backend hooks."
groups = ["dev"]
files = [
    {file = "pyproject_hooks-1.2.0-py3-none-any.whl", hash = "sha256:9e5c6bfa8dcc30091c74b0cf803c81fdd29d94f01992a7707bc97babb1141913"},
    {file = "pyproject_hooks-1.2.0.tar.gz", hash = "sha256:1e859bd5c40fae9448642dd871adf459e5e2084186e8d2c2a79a824c970da1f8"},
]

[[package]]
name = "pytest"
version = "8.3.4"
requires_python = ">=3.8"
summary = "pytest: simple powerful testing with Python"
groups = ["dev"]
dependencies = [
    "colorama; sys_platform == \"win32\"",
    "exceptiongroup>=1.0.0rc8; python_version < \"3.11\"",
    "iniconfig",
    "packaging",
    "pluggy<2,>=1.5",
    "tomli>=1; python_version < \"3.11\"",
]
files = [
    {file = "pytest-8.3.4-py3-none-any.whl", hash = "sha256:50e16d954148559c9a74109af1eaf0c945ba2d8f30f0a3d3335edde19788b6f6"},
    {file = "pytest-8.3.4.tar.gz", hash = "sha256:965370d062bce11e73868e0335abac31b4d3de0e82f4007408d242b4f8610761"},
]

[[package]]
name = "pytest-asyncio"
version = "0.25.2"
requires_python = ">=3.9"
summary = "Pytest support for asyncio"
groups = ["dev"]
dependencies = [
    "pytest<9,>=8.2",
]
files = [
    {file = "pytest_asyncio-0.25.2-py3-none-any.whl", hash = "sha256:0d0bb693f7b99da304a0634afc0a4b19e49d5e0de2d670f38dc4bfa5727c5075"},
    {file = "pytest_asyncio-0.25.2.tar.gz", hash = "sha256:3f8ef9a98f45948ea91a0ed3dc4268b5326c0e7bce73892acc654df4262ad45f"},
]

[[package]]
name = "pytest-mock"
version = "3.14.0"
requires_python = ">=3.8"
summary = "Thin-wrapper around the mock package for easier use with pytest"
groups = ["dev"]
dependencies = [
    "pytest>=6.2.5",
]
files = [
    {file = "pytest-mock-3.14.0.tar.gz", hash = "sha256:2719255a1efeceadbc056d6bf3df3d1c5015530fb40cf347c0f9afac88410bd0"},
    {file = "pytest_mock-3.14.0-py3-none-any.whl", hash = "sha256:0b72c38033392a5f4621342fe11e9219ac11ec9d375f8e2a0c164539e0d70f6f"},
]

[[package]]
name = "python-dotenv"
version = "1.0.1"
requires_python = ">=3.8"
summary = "Read key-value pairs from a .env file and set them as environment variables"
groups = ["default", "dev"]
files = [
    {file = "python-dotenv-1.0.1.tar.gz", hash = "sha256:e324ee90a023d808f1959c46bcbc04446a10ced277783dc6ee09987c37ec10ca"},
    {file = "python_dotenv-1.0.1-py3-none-any.whl", hash = "sha256:f7b63ef50f1b690dddf550d03497b66d609393b40b564ed0d674909a68ebf16a"},
]

[[package]]
name = "python-multipart"
version = "0.0.20"
requires_python = ">=3.8"
summary = "A streaming multipart parser for Python"
groups = ["default"]
files = [
    {file = "python_multipart-0.0.20-py3-none-any.whl", hash = "sha256:8a62d3a8335e06589fe01f2a3e178cdcc632f3fbe0d492ad9ee0ec35aab1f104"},
    {file = "python_multipart-0.0.20.tar.gz", hash = "sha256:8dd0cab45b8e23064ae09147625994d090fa46f5b0d1e13af944c331a7fa9d13"},
]

[[package]]
name = "pyyaml"
version = "6.0.2"
requires_python = ">=3.8"
summary = "YAML parser and emitter for Python"
groups = ["default"]
files = [
    {file = "PyYAML-6.0.2-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab"},
    {file = "PyYAML-6.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725"},
    {file = "PyYAML-6.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1f71ea527786de97d1a0cc0eacd1defc0985dcf6b3f17bb77dcfc8c34bec4dc5"},
    {file = "PyYAML-6.0.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425"},
    {file = "PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476"},
    {file = "PyYAML-6.0.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48"},
    {file = "PyYAML-6.0.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b"},
    {file = "PyYAML-6.0.2-cp312-cp312-win32.whl", hash = "sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4"},
    {file = "PyYAML-6.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8"},
    {file = "pyyaml-6.0.2.tar.gz", hash = "sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e"},
]

[[package]]
name = "referencing"
version = "0.36.1"
requires_python = ">=3.9"
summary = "JSON Referencing + Python"
groups = ["default"]
dependencies = [
    "attrs>=22.2.0",
    "rpds-py>=0.7.0",
    "typing-extensions>=4.4.0; python_version < \"3.13\"",
]
files = [
    {file = "referencing-0.36.1-py3-none-any.whl", hash = "sha256:363d9c65f080d0d70bc41c721dce3c7f3e77fc09f269cd5c8813da18069a6794"},
    {file = "referencing-0.36.1.tar.gz", hash = "sha256:ca2e6492769e3602957e9b831b94211599d2aade9477f5d44110d2530cf9aade"},
]

[[package]]
name = "regex"
version = "2024.11.6"
requires_python = ">=3.8"
summary = "Alternative regular expression module, to replace re."
groups = ["default"]
files = [
    {file = "regex-2024.11.6-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:52fb28f528778f184f870b7cf8f225f5eef0a8f6e3778529bdd40c7b3920796a"},
    {file = "regex-2024.11.6-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:fdd6028445d2460f33136c55eeb1f601ab06d74cb3347132e1c24250187500d9"},
    {file = "regex-2024.11.6-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:805e6b60c54bf766b251e94526ebad60b7de0c70f70a4e6210ee2891acb70bf2"},
    {file = "regex-2024.11.6-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b85c2530be953a890eaffde05485238f07029600e8f098cdf1848d414a8b45e4"},
    {file = "regex-2024.11.6-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:bb26437975da7dc36b7efad18aa9dd4ea569d2357ae6b783bf1118dabd9ea577"},
    {file = "regex-2024.11.6-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:abfa5080c374a76a251ba60683242bc17eeb2c9818d0d30117b4486be10c59d3"},
    {file = "regex-2024.11.6-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:70b7fa6606c2881c1db9479b0eaa11ed5dfa11c8d60a474ff0e095099f39d98e"},
    {file = "regex-2024.11.6-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0c32f75920cf99fe6b6c539c399a4a128452eaf1af27f39bce8909c9a3fd8cbe"},
    {file = "regex-2024.11.6-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:982e6d21414e78e1f51cf595d7f321dcd14de1f2881c5dc6a6e23bbbbd68435e"},
    {file = "regex-2024.11.6-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:a7c2155f790e2fb448faed6dd241386719802296ec588a8b9051c1f5c481bc29"},
    {file = "regex-2024.11.6-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:149f5008d286636e48cd0b1dd65018548944e495b0265b45e1bffecce1ef7f39"},
    {file = "regex-2024.11.6-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:e5364a4502efca094731680e80009632ad6624084aff9a23ce8c8c6820de3e51"},
    {file = "regex-2024.11.6-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:0a86e7eeca091c09e021db8eb72d54751e527fa47b8d5787caf96d9831bd02ad"},
    {file = "regex-2024.11.6-cp312-cp312-win32.whl", hash = "sha256:32f9a4c643baad4efa81d549c2aadefaeba12249b2adc5af541759237eee1c54"},
    {file = "regex-2024.11.6-cp312-cp312-win_amd64.whl", hash = "sha256:a93c194e2df18f7d264092dc8539b8ffb86b45b899ab976aa15d48214138e81b"},
    {file = "regex-2024.11.6.tar.gz", hash = "sha256:7ab159b063c52a0333c884e4679f8d7a85112ee3078fe3d9004b2dd875585519"},
]

[[package]]
name = "requests"
version = "2.32.3"
requires_python = ">=3.8"
summary = "Python HTTP for Humans."
groups = ["default"]
dependencies = [
    "certifi>=2017.4.17",
    "charset-normalizer<4,>=2",
    "idna<4,>=2.5",
    "urllib3<3,>=1.21.1",
]
files = [
    {file = "requests-2.32.3-py3-none-any.whl", hash = "sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6"},
    {file = "requests-2.32.3.tar.gz", hash = "sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760"},
]

[[package]]
name = "resolvelib"
version = "1.1.0"
requires_python = ">=3.7"
summary = "Resolve abstract dependencies into concrete ones"
groups = ["dev"]
files = [
    {file = "resolvelib-1.1.0-py2.py3-none-any.whl", hash = "sha256:f80de38ae744bcf4e918e27a681a5c6cb63a08d9a926c0989c0730bcdd089049"},
    {file = "resolvelib-1.1.0.tar.gz", hash = "sha256:b68591ef748f58c1e2a2ac28d0961b3586ae8b25f60b0ba9a5e4f3d87c1d6a79"},
]

[[package]]
name = "restrictedpython"
version = "7.4"
requires_python = "<3.14,>=3.8"
summary = "RestrictedPython is a defined subset of the Python language which allows to provide a program input into a trusted environment."
groups = ["default"]
files = [
    {file = "RestrictedPython-7.4-py3-none-any.whl", hash = "sha256:f431c76f848f6f6d50ae21457cb503642db60889a273e4be439cf7ca4cbaf999"},
    {file = "restrictedpython-7.4.tar.gz", hash = "sha256:81b62924713dbd280917fceaecaf210fef7a49dddf1a08c8c214a3613fbeb425"},
]

[[package]]
name = "rich"
version = "13.9.4"
requires_python = ">=3.8.0"
summary = "Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal"
groups = ["dev"]
dependencies = [
    "markdown-it-py>=2.2.0",
    "pygments<3.0.0,>=2.13.0",
    "typing-extensions<5.0,>=4.0.0; python_version < \"3.11\"",
]
files = [
    {file = "rich-13.9.4-py3-none-any.whl", hash = "sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90"},
    {file = "rich-13.9.4.tar.gz", hash = "sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098"},
]

[[package]]
name = "rpds-py"
version = "0.22.3"
requires_python = ">=3.9"
summary = "Python bindings to Rust's persistent data structures (rpds)"
groups = ["default"]
files = [
    {file = "rpds_py-0.22.3-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:27e98004595899949bd7a7b34e91fa7c44d7a97c40fcaf1d874168bb652ec67e"},
    {file = "rpds_py-0.22.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:1978d0021e943aae58b9b0b196fb4895a25cc53d3956b8e35e0b7682eefb6d56"},
    {file = "rpds_py-0.22.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:655ca44a831ecb238d124e0402d98f6212ac527a0ba6c55ca26f616604e60a45"},
    {file = "rpds_py-0.22.3-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:feea821ee2a9273771bae61194004ee2fc33f8ec7db08117ef9147d4bbcbca8e"},
    {file = "rpds_py-0.22.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:22bebe05a9ffc70ebfa127efbc429bc26ec9e9b4ee4d15a740033efda515cf3d"},
    {file = "rpds_py-0.22.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:3af6e48651c4e0d2d166dc1b033b7042ea3f871504b6805ba5f4fe31581d8d38"},
    {file = "rpds_py-0.22.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e67ba3c290821343c192f7eae1d8fd5999ca2dc99994114643e2f2d3e6138b15"},
    {file = "rpds_py-0.22.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:02fbb9c288ae08bcb34fb41d516d5eeb0455ac35b5512d03181d755d80810059"},
    {file = "rpds_py-0.22.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:f56a6b404f74ab372da986d240e2e002769a7d7102cc73eb238a4f72eec5284e"},
    {file = "rpds_py-0.22.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:0a0461200769ab3b9ab7e513f6013b7a97fdeee41c29b9db343f3c5a8e2b9e61"},
    {file = "rpds_py-0.22.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:8633e471c6207a039eff6aa116e35f69f3156b3989ea3e2d755f7bc41754a4a7"},
    {file = "rpds_py-0.22.3-cp312-cp312-win32.whl", hash = "sha256:593eba61ba0c3baae5bc9be2f5232430453fb4432048de28399ca7376de9c627"},
    {file = "rpds_py-0.22.3-cp312-cp312-win_amd64.whl", hash = "sha256:d115bffdd417c6d806ea9069237a4ae02f513b778e3789a359bc5856e0404cc4"},
    {file = "rpds_py-0.22.3.tar.gz", hash = "sha256:e32fee8ab45d3c2db6da19a5323bc3362237c8b653c70194414b892fd06a080d"},
]

[[package]]
name = "ruff"
version = "0.9.2"
requires_python = ">=3.7"
summary = "An extremely fast Python linter and code formatter, written in Rust."
groups = ["dev"]
files = [
    {file = "ruff-0.9.2-py3-none-linux_armv6l.whl", hash = "sha256:80605a039ba1454d002b32139e4970becf84b5fee3a3c3bf1c2af6f61a784347"},
    {file = "ruff-0.9.2-py3-none-macosx_10_12_x86_64.whl", hash = "sha256:b9aab82bb20afd5f596527045c01e6ae25a718ff1784cb92947bff1f83068b00"},
    {file = "ruff-0.9.2-py3-none-macosx_11_0_arm64.whl", hash = "sha256:fbd337bac1cfa96be615f6efcd4bc4d077edbc127ef30e2b8ba2a27e18c054d4"},
    {file = "ruff-0.9.2-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:82b35259b0cbf8daa22a498018e300b9bb0174c2bbb7bcba593935158a78054d"},
    {file = "ruff-0.9.2-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:8b6a9701d1e371bf41dca22015c3f89769da7576884d2add7317ec1ec8cb9c3c"},
    {file = "ruff-0.9.2-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:9cc53e68b3c5ae41e8faf83a3b89f4a5d7b2cb666dff4b366bb86ed2a85b481f"},
    {file = "ruff-0.9.2-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl", hash = "sha256:8efd9da7a1ee314b910da155ca7e8953094a7c10d0c0a39bfde3fcfd2a015684"},
    {file = "ruff-0.9.2-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3292c5a22ea9a5f9a185e2d131dc7f98f8534a32fb6d2ee7b9944569239c648d"},
    {file = "ruff-0.9.2-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1a605fdcf6e8b2d39f9436d343d1f0ff70c365a1e681546de0104bef81ce88df"},
    {file = "ruff-0.9.2-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c547f7f256aa366834829a08375c297fa63386cbe5f1459efaf174086b564247"},
    {file = "ruff-0.9.2-py3-none-musllinux_1_2_aarch64.whl", hash = "sha256:d18bba3d3353ed916e882521bc3e0af403949dbada344c20c16ea78f47af965e"},
    {file = "ruff-0.9.2-py3-none-musllinux_1_2_armv7l.whl", hash = "sha256:b338edc4610142355ccf6b87bd356729b62bf1bc152a2fad5b0c7dc04af77bfe"},
    {file = "ruff-0.9.2-py3-none-musllinux_1_2_i686.whl", hash = "sha256:492a5e44ad9b22a0ea98cf72e40305cbdaf27fac0d927f8bc9e1df316dcc96eb"},
    {file = "ruff-0.9.2-py3-none-musllinux_1_2_x86_64.whl", hash = "sha256:af1e9e9fe7b1f767264d26b1075ac4ad831c7db976911fa362d09b2d0356426a"},
    {file = "ruff-0.9.2-py3-none-win32.whl", hash = "sha256:71cbe22e178c5da20e1514e1e01029c73dc09288a8028a5d3446e6bba87a5145"},
    {file = "ruff-0.9.2-py3-none-win_amd64.whl", hash = "sha256:c5e1d6abc798419cf46eed03f54f2e0c3adb1ad4b801119dedf23fcaf69b55b5"},
    {file = "ruff-0.9.2-py3-none-win_arm64.whl", hash = "sha256:a1b63fa24149918f8b37cef2ee6fff81f24f0d74b6f0bdc37bc3e1f2143e41c6"},
    {file = "ruff-0.9.2.tar.gz", hash = "sha256:b5eceb334d55fae5f316f783437392642ae18e16dcf4f1858d55d3c2a0f8f5d0"},
]

[[package]]
name = "safetensors"
version = "0.5.2"
requires_python = ">=3.7"
summary = ""
groups = ["default"]
files = [
    {file = "safetensors-0.5.2-cp38-abi3-macosx_10_12_x86_64.whl", hash = "sha256:45b6092997ceb8aa3801693781a71a99909ab9cc776fbc3fa9322d29b1d3bef2"},
    {file = "safetensors-0.5.2-cp38-abi3-macosx_11_0_arm64.whl", hash = "sha256:6d0d6a8ee2215a440e1296b843edf44fd377b055ba350eaba74655a2fe2c4bae"},
    {file = "safetensors-0.5.2-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:86016d40bcaa3bcc9a56cd74d97e654b5f4f4abe42b038c71e4f00a089c4526c"},
    {file = "safetensors-0.5.2-cp38-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:990833f70a5f9c7d3fc82c94507f03179930ff7d00941c287f73b6fcbf67f19e"},
    {file = "safetensors-0.5.2-cp38-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3dfa7c2f3fe55db34eba90c29df94bcdac4821043fc391cb5d082d9922013869"},
    {file = "safetensors-0.5.2-cp38-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:46ff2116150ae70a4e9c490d2ab6b6e1b1b93f25e520e540abe1b81b48560c3a"},
    {file = "safetensors-0.5.2-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3ab696dfdc060caffb61dbe4066b86419107a24c804a4e373ba59be699ebd8d5"},
    {file = "safetensors-0.5.2-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:03c937100f38c9ff4c1507abea9928a6a9b02c9c1c9c3609ed4fb2bf413d4975"},
    {file = "safetensors-0.5.2-cp38-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:a00e737948791b94dad83cf0eafc09a02c4d8c2171a239e8c8572fe04e25960e"},
    {file = "safetensors-0.5.2-cp38-abi3-musllinux_1_2_armv7l.whl", hash = "sha256:d3a06fae62418ec8e5c635b61a8086032c9e281f16c63c3af46a6efbab33156f"},
    {file = "safetensors-0.5.2-cp38-abi3-musllinux_1_2_i686.whl", hash = "sha256:1506e4c2eda1431099cebe9abf6c76853e95d0b7a95addceaa74c6019c65d8cf"},
    {file = "safetensors-0.5.2-cp38-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:5c5b5d9da594f638a259fca766046f44c97244cc7ab8bef161b3e80d04becc76"},
    {file = "safetensors-0.5.2-cp38-abi3-win32.whl", hash = "sha256:fe55c039d97090d1f85277d402954dd6ad27f63034fa81985a9cc59655ac3ee2"},
    {file = "safetensors-0.5.2-cp38-abi3-win_amd64.whl", hash = "sha256:78abdddd03a406646107f973c7843276e7b64e5e32623529dc17f3d94a20f589"},
    {file = "safetensors-0.5.2.tar.gz", hash = "sha256:cb4a8d98ba12fa016f4241932b1fc5e702e5143f5374bba0bbcf7ddc1c4cf2b8"},
]

[[package]]
name = "scikit-learn"
version = "1.6.1"
requires_python = ">=3.9"
summary = "A set of python modules for machine learning and data mining"
groups = ["default"]
dependencies = [
    "joblib>=1.2.0",
    "numpy>=1.19.5",
    "scipy>=1.6.0",
    "threadpoolctl>=3.1.0",
]
files = [
    {file = "scikit_learn-1.6.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:926f207c804104677af4857b2c609940b743d04c4c35ce0ddc8ff4f053cddc1b"},
    {file = "scikit_learn-1.6.1-cp312-cp312-macosx_12_0_arm64.whl", hash = "sha256:2c2cae262064e6a9b77eee1c8e768fc46aa0b8338c6a8297b9b6759720ec0ff2"},
    {file = "scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1061b7c028a8663fb9a1a1baf9317b64a257fcb036dae5c8752b2abef31d136f"},
    {file = "scikit_learn-1.6.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2e69fab4ebfc9c9b580a7a80111b43d214ab06250f8a7ef590a4edf72464dd86"},
    {file = "scikit_learn-1.6.1-cp312-cp312-win_amd64.whl", hash = "sha256:70b1d7e85b1c96383f872a519b3375f92f14731e279a7b4c6cfd650cf5dffc52"},
    {file = "scikit_learn-1.6.1.tar.gz", hash = "sha256:b4fc2525eca2c69a59260f583c56a7557c6ccdf8deafdba6e060f94c1c59738e"},
]

[[package]]
name = "scipy"
version = "1.15.1"
requires_python = ">=3.10"
summary = "Fundamental algorithms for scientific computing in Python"
groups = ["default"]
dependencies = [
    "numpy<2.5,>=1.23.5",
]
files = [
    {file = "scipy-1.15.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:c09aa9d90f3500ea4c9b393ee96f96b0ccb27f2f350d09a47f533293c78ea776"},
    {file = "scipy-1.15.1-cp312-cp312-macosx_12_0_arm64.whl", hash = "sha256:0ac102ce99934b162914b1e4a6b94ca7da0f4058b6d6fd65b0cef330c0f3346f"},
    {file = "scipy-1.15.1-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:09c52320c42d7f5c7748b69e9f0389266fd4f82cf34c38485c14ee976cb8cb04"},
    {file = "scipy-1.15.1-cp312-cp312-macosx_14_0_x86_64.whl", hash = "sha256:cdde8414154054763b42b74fe8ce89d7f3d17a7ac5dd77204f0e142cdc9239e9"},
    {file = "scipy-1.15.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4c9d8fc81d6a3b6844235e6fd175ee1d4c060163905a2becce8e74cb0d7554ce"},
    {file = "scipy-1.15.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0fb57b30f0017d4afa5fe5f5b150b8f807618819287c21cbe51130de7ccdaed2"},
    {file = "scipy-1.15.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:491d57fe89927fa1aafbe260f4cfa5ffa20ab9f1435025045a5315006a91b8f5"},
    {file = "scipy-1.15.1-cp312-cp312-win_amd64.whl", hash = "sha256:900f3fa3db87257510f011c292a5779eb627043dd89731b9c461cd16ef76ab3d"},
    {file = "scipy-1.15.1.tar.gz", hash = "sha256:033a75ddad1463970c96a88063a1df87ccfddd526437136b6ee81ff0312ebdf6"},
]

[[package]]
name = "sentence-transformers"
version = "3.4.0"
requires_python = ">=3.9"
summary = "State-of-the-Art Text Embeddings"
groups = ["default"]
dependencies = [
    "Pillow",
    "huggingface-hub>=0.20.0",
    "scikit-learn",
    "scipy",
    "torch>=1.11.0",
    "tqdm",
    "transformers<5.0.0,>=4.41.0",
]
files = [
    {file = "sentence_transformers-3.4.0-py3-none-any.whl", hash = "sha256:f7d4ad81260149172a98108a3481d8e82c11d31f40d41885f43d481149237743"},
    {file = "sentence_transformers-3.4.0.tar.gz", hash = "sha256:334288062d4b888cdd7b75913fead46b1e42bfe836f8343d23478d17f799e650"},
]

[[package]]
name = "setuptools"
version = "75.8.0"
requires_python = ">=3.9"
summary = "Easily download, build, install, upgrade, and uninstall Python packages"
groups = ["default"]
marker = "python_version >= \"3.12\""
files = [
    {file = "setuptools-75.8.0-py3-none-any.whl", hash = "sha256:e3982f444617239225d675215d51f6ba05f845d4eec313da4418fdbb56fb27e3"},
    {file = "setuptools-75.8.0.tar.gz", hash = "sha256:c5afc8f407c626b8313a86e10311dd3f661c6cd9c09d4bf8c15c0e11f9f2b0e6"},
]

[[package]]
name = "shellingham"
version = "1.5.4"
requires_python = ">=3.7"
summary = "Tool to Detect Surrounding Shell"
groups = ["dev"]
files = [
    {file = "shellingham-1.5.4-py2.py3-none-any.whl", hash = "sha256:7ecfff8f2fd72616f7481040475a65b2bf8af90a56c89140852d1120324e8686"},
    {file = "shellingham-1.5.4.tar.gz", hash = "sha256:8dbca0739d487e5bd35ab3ca4b36e11c4078f3a234bfce294b0a0291363404de"},
]

[[package]]
name = "smmap"
version = "5.0.2"
requires_python = ">=3.7"
summary = "A pure Python implementation of a sliding window memory map manager"
groups = ["default"]
files = [
    {file = "smmap-5.0.2-py3-none-any.whl", hash = "sha256:b30115f0def7d7531d22a0fb6502488d879e75b260a9db4d0819cfb25403af5e"},
    {file = "smmap-5.0.2.tar.gz", hash = "sha256:26ea65a03958fa0c8a1c7e8c7a58fdc77221b8910f6be2131affade476898ad5"},
]

[[package]]
name = "sniffio"
version = "1.3.1"
requires_python = ">=3.7"
summary = "Sniff out which async library your code is running under"
groups = ["default", "dev"]
files = [
    {file = "sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2"},
    {file = "sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc"},
]

[[package]]
name = "socksio"
version = "1.0.0"
requires_python = ">=3.6"
summary = "Sans-I/O implementation of SOCKS4, SOCKS4A, and SOCKS5."
groups = ["dev"]
files = [
    {file = "socksio-1.0.0-py3-none-any.whl", hash = "sha256:95dc1f15f9b34e8d7b16f06d74b8ccf48f609af32ab33c608d08761c5dcbb1f3"},
    {file = "socksio-1.0.0.tar.gz", hash = "sha256:f88beb3da5b5c38b9890469de67d0cb0f9d494b78b106ca1845f96c10b91c4ac"},
]

[[package]]
name = "sqlalchemy"
version = "2.0.37"
requires_python = ">=3.7"
summary = "Database Abstraction Library"
groups = ["default"]
dependencies = [
    "greenlet!=0.4.17; (platform_machine == \"win32\" or platform_machine == \"WIN32\" or platform_machine == \"AMD64\" or platform_machine == \"amd64\" or platform_machine == \"x86_64\" or platform_machine == \"ppc64le\" or platform_machine == \"aarch64\") and python_version < \"3.14\"",
    "importlib-metadata; python_version < \"3.8\"",
    "typing-extensions>=4.6.0",
]
files = [
    {file = "SQLAlchemy-2.0.37-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:2952748ecd67ed3b56773c185e85fc084f6bdcdec10e5032a7c25a6bc7d682ef"},
    {file = "SQLAlchemy-2.0.37-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:3151822aa1db0eb5afd65ccfafebe0ef5cda3a7701a279c8d0bf17781a793bb4"},
    {file = "SQLAlchemy-2.0.37-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:eaa8039b6d20137a4e02603aba37d12cd2dde7887500b8855356682fc33933f4"},
    {file = "SQLAlchemy-2.0.37-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:1cdba1f73b64530c47b27118b7053b8447e6d6f3c8104e3ac59f3d40c33aa9fd"},
    {file = "SQLAlchemy-2.0.37-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1b2690456528a87234a75d1a1644cdb330a6926f455403c8e4f6cad6921f9098"},
    {file = "SQLAlchemy-2.0.37-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:cf5ae8a9dcf657fd72144a7fd01f243236ea39e7344e579a121c4205aedf07bb"},
    {file = "SQLAlchemy-2.0.37-cp312-cp312-win32.whl", hash = "sha256:ea308cec940905ba008291d93619d92edaf83232ec85fbd514dcb329f3192761"},
    {file = "SQLAlchemy-2.0.37-cp312-cp312-win_amd64.whl", hash = "sha256:635d8a21577341dfe4f7fa59ec394b346da12420b86624a69e466d446de16aff"},
    {file = "SQLAlchemy-2.0.37-py3-none-any.whl", hash = "sha256:a8998bf9f8658bd3839cbc44ddbe982955641863da0c1efe5b00c1ab4f5c16b1"},
    {file = "sqlalchemy-2.0.37.tar.gz", hash = "sha256:12b28d99a9c14eaf4055810df1001557176716de0167b91026e648e65229bffb"},
]

[[package]]
name = "starlette"
version = "0.41.3"
requires_python = ">=3.8"
summary = "The little ASGI library that shines."
groups = ["default"]
dependencies = [
    "anyio<5,>=3.4.0",
    "typing-extensions>=3.10.0; python_version < \"3.10\"",
]
files = [
    {file = "starlette-0.41.3-py3-none-any.whl", hash = "sha256:44cedb2b7c77a9de33a8b74b2b90e9f50d11fcf25d8270ea525ad71a25374ff7"},
    {file = "starlette-0.41.3.tar.gz", hash = "sha256:0e4ab3d16522a255be6b28260b938eae2482f98ce5cc934cb08dce8dc3ba5835"},
]

[[package]]
name = "sympy"
version = "1.13.1"
requires_python = ">=3.8"
summary = "Computer algebra system (CAS) in Python"
groups = ["default"]
marker = "python_version >= \"3.9\""
dependencies = [
    "mpmath<1.4,>=1.1.0",
]
files = [
    {file = "sympy-1.13.1-py3-none-any.whl", hash = "sha256:db36cdc64bf61b9b24578b6f7bab1ecdd2452cf008f34faa33776680c26d66f8"},
    {file = "sympy-1.13.1.tar.gz", hash = "sha256:9cebf7e04ff162015ce31c9c6c9144daa34a93bd082f54fd8f12deca4f47515f"},
]

[[package]]
name = "threadpoolctl"
version = "3.5.0"
requires_python = ">=3.8"
summary = "threadpoolctl"
groups = ["default"]
files = [
    {file = "threadpoolctl-3.5.0-py3-none-any.whl", hash = "sha256:56c1e26c150397e58c4926da8eeee87533b1e32bef131bd4bf6a2f45f3185467"},
    {file = "threadpoolctl-3.5.0.tar.gz", hash = "sha256:082433502dd922bf738de0d8bcc4fdcbf0979ff44c42bd40f5af8a282f6fa107"},
]

[[package]]
name = "tiktoken"
version = "0.8.0"
requires_python = ">=3.9"
summary = "tiktoken is a fast BPE tokeniser for use with OpenAI's models"
groups = ["default"]
dependencies = [
    "regex>=2022.1.18",
    "requests>=2.26.0",
]
files = [
    {file = "tiktoken-0.8.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:881839cfeae051b3628d9823b2e56b5cc93a9e2efb435f4cf15f17dc45f21586"},
    {file = "tiktoken-0.8.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:fe9399bdc3f29d428f16a2f86c3c8ec20be3eac5f53693ce4980371c3245729b"},
    {file = "tiktoken-0.8.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:9a58deb7075d5b69237a3ff4bb51a726670419db6ea62bdcd8bd80c78497d7ab"},
    {file = "tiktoken-0.8.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d2908c0d043a7d03ebd80347266b0e58440bdef5564f84f4d29fb235b5df3b04"},
    {file = "tiktoken-0.8.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:294440d21a2a51e12d4238e68a5972095534fe9878be57d905c476017bff99fc"},
    {file = "tiktoken-0.8.0-cp312-cp312-win_amd64.whl", hash = "sha256:d8f3192733ac4d77977432947d563d7e1b310b96497acd3c196c9bddb36ed9db"},
    {file = "tiktoken-0.8.0.tar.gz", hash = "sha256:9ccbb2740f24542534369c5635cfd9b2b3c2490754a78ac8831d99f89f94eeb2"},
]

[[package]]
name = "tokenizers"
version = "0.21.0"
requires_python = ">=3.7"
summary = ""
groups = ["default"]
dependencies = [
    "huggingface-hub<1.0,>=0.16.4",
]
files = [
    {file = "tokenizers-0.21.0-cp39-abi3-macosx_10_12_x86_64.whl", hash = "sha256:3c4c93eae637e7d2aaae3d376f06085164e1660f89304c0ab2b1d08a406636b2"},
    {file = "tokenizers-0.21.0-cp39-abi3-macosx_11_0_arm64.whl", hash = "sha256:f53ea537c925422a2e0e92a24cce96f6bc5046bbef24a1652a5edc8ba975f62e"},
    {file = "tokenizers-0.21.0-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6b177fb54c4702ef611de0c069d9169f0004233890e0c4c5bd5508ae05abf193"},
    {file = "tokenizers-0.21.0-cp39-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:6b43779a269f4629bebb114e19c3fca0223296ae9fea8bb9a7a6c6fb0657ff8e"},
    {file = "tokenizers-0.21.0-cp39-abi3-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:9aeb255802be90acfd363626753fda0064a8df06031012fe7d52fd9a905eb00e"},
    {file = "tokenizers-0.21.0-cp39-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d8b09dbeb7a8d73ee204a70f94fc06ea0f17dcf0844f16102b9f414f0b7463ba"},
    {file = "tokenizers-0.21.0-cp39-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:400832c0904f77ce87c40f1a8a27493071282f785724ae62144324f171377273"},
    {file = "tokenizers-0.21.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e84ca973b3a96894d1707e189c14a774b701596d579ffc7e69debfc036a61a04"},
    {file = "tokenizers-0.21.0-cp39-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:eb7202d231b273c34ec67767378cd04c767e967fda12d4a9e36208a34e2f137e"},
    {file = "tokenizers-0.21.0-cp39-abi3-musllinux_1_2_armv7l.whl", hash = "sha256:089d56db6782a73a27fd8abf3ba21779f5b85d4a9f35e3b493c7bbcbbf0d539b"},
    {file = "tokenizers-0.21.0-cp39-abi3-musllinux_1_2_i686.whl", hash = "sha256:c87ca3dc48b9b1222d984b6b7490355a6fdb411a2d810f6f05977258400ddb74"},
    {file = "tokenizers-0.21.0-cp39-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:4145505a973116f91bc3ac45988a92e618a6f83eb458f49ea0790df94ee243ff"},
    {file = "tokenizers-0.21.0-cp39-abi3-win32.whl", hash = "sha256:eb1702c2f27d25d9dd5b389cc1f2f51813e99f8ca30d9e25348db6585a97e24a"},
    {file = "tokenizers-0.21.0-cp39-abi3-win_amd64.whl", hash = "sha256:87841da5a25a3a5f70c102de371db120f41873b854ba65e52bccd57df5a3780c"},
    {file = "tokenizers-0.21.0.tar.gz", hash = "sha256:ee0894bf311b75b0c03079f33859ae4b2334d675d4e93f5a4132e1eae2834fe4"},
]

[[package]]
name = "tomlkit"
version = "0.13.2"
requires_python = ">=3.8"
summary = "Style preserving TOML library"
groups = ["dev"]
files = [
    {file = "tomlkit-0.13.2-py3-none-any.whl", hash = "sha256:7a974427f6e119197f670fbbbeae7bef749a6c14e793db934baefc1b5f03efde"},
    {file = "tomlkit-0.13.2.tar.gz", hash = "sha256:fff5fe59a87295b278abd31bec92c15d9bc4a06885ab12bcea52c71119392e79"},
]

[[package]]
name = "torch"
version = "2.5.1"
requires_python = ">=3.8.0"
summary = "Tensors and Dynamic neural networks in Python with strong GPU acceleration"
groups = ["default"]
dependencies = [
    "filelock",
    "fsspec",
    "jinja2",
    "networkx",
    "nvidia-cublas-cu12==12.4.5.8; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-cuda-cupti-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-cuda-nvrtc-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-cuda-runtime-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-cudnn-cu12==9.1.0.70; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-cufft-cu12==11.2.1.3; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-curand-cu12==10.3.5.147; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-cusolver-cu12==11.6.1.9; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-cusparse-cu12==12.3.1.170; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-nccl-cu12==2.21.5; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-nvjitlink-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "nvidia-nvtx-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\"",
    "setuptools; python_version >= \"3.12\"",
    "sympy==1.12.1; python_version == \"3.8\"",
    "sympy==1.13.1; python_version >= \"3.9\"",
    "triton==3.1.0; platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version < \"3.13\"",
    "typing-extensions>=4.8.0",
]
files = [
    {file = "torch-2.5.1-cp312-cp312-manylinux1_x86_64.whl", hash = "sha256:ed231a4b3a5952177fafb661213d690a72caaad97d5824dd4fc17ab9e15cec03"},
    {file = "torch-2.5.1-cp312-cp312-manylinux2014_aarch64.whl", hash = "sha256:3f4b7f10a247e0dcd7ea97dc2d3bfbfc90302ed36d7f3952b0008d0df264e697"},
    {file = "torch-2.5.1-cp312-cp312-win_amd64.whl", hash = "sha256:73e58e78f7d220917c5dbfad1a40e09df9929d3b95d25e57d9f8558f84c9a11c"},
    {file = "torch-2.5.1-cp312-none-macosx_11_0_arm64.whl", hash = "sha256:8c712df61101964eb11910a846514011f0b6f5920c55dbf567bff8a34163d5b1"},
]

[[package]]
name = "tqdm"
version = "4.67.1"
requires_python = ">=3.7"
summary = "Fast, Extensible Progress Meter"
groups = ["default"]
dependencies = [
    "colorama; platform_system == \"Windows\"",
]
files = [
    {file = "tqdm-4.67.1-py3-none-any.whl", hash = "sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2"},
    {file = "tqdm-4.67.1.tar.gz", hash = "sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2"},
]

[[package]]
name = "transformers"
version = "4.48.1"
requires_python = ">=3.9.0"
summary = "State-of-the-art Machine Learning for JAX, PyTorch and TensorFlow"
groups = ["default"]
dependencies = [
    "filelock",
    "huggingface-hub<1.0,>=0.24.0",
    "numpy>=1.17",
    "packaging>=20.0",
    "pyyaml>=5.1",
    "regex!=2019.12.17",
    "requests",
    "safetensors>=0.4.1",
    "tokenizers<0.22,>=0.21",
    "tqdm>=4.27",
]
files = [
    {file = "transformers-4.48.1-py3-none-any.whl", hash = "sha256:24be0564b0a36d9e433d9a65de248f1545b6f6edce1737669605eb6a8141bbbb"},
    {file = "transformers-4.48.1.tar.gz", hash = "sha256:7c1931facc3ee8adcbf86fc7a87461d54c1e40eca3bb57fef1ee9f3ecd32187e"},
]

[[package]]
name = "triton"
version = "3.1.0"
summary = "A language and compiler for custom Deep Learning operations"
groups = ["default"]
marker = "platform_system == \"Linux\" and platform_machine == \"x86_64\" and python_version < \"3.13\""
dependencies = [
    "filelock",
]
files = [
    {file = "triton-3.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c8182f42fd8080a7d39d666814fa36c5e30cc00ea7eeeb1a2983dbb4c99a0fdc"},
]

[[package]]
name = "truststore"
version = "0.10.0"
requires_python = ">=3.10"
summary = "Verify certificates using native system trust stores"
groups = ["dev"]
marker = "python_version >= \"3.10\""
files = [
    {file = "truststore-0.10.0-py3-none-any.whl", hash = "sha256:b3798548e421ffe2ca2a6217cca49e7a17baf40b72d86a5505dc7d701e77d15b"},
    {file = "truststore-0.10.0.tar.gz", hash = "sha256:5da347c665714fdfbd46f738c823fe9f0d8775e41ac5fb94f325749091187896"},
]

[[package]]
name = "typing-extensions"
version = "4.12.2"
requires_python = ">=3.8"
summary = "Backported and Experimental Type Hints for Python 3.8+"
groups = ["default", "dev"]
files = [
    {file = "typing_extensions-4.12.2-py3-none-any.whl", hash = "sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d"},
    {file = "typing_extensions-4.12.2.tar.gz", hash = "sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8"},
]

[[package]]
name = "unearth"
version = "0.17.2"
requires_python = ">=3.8"
summary = "A utility to fetch and download python packages"
groups = ["dev"]
dependencies = [
    "httpx<1,>=0.27.0",
    "packaging>=20",
]
files = [
    {file = "unearth-0.17.2-py3-none-any.whl", hash = "sha256:4d21af1238a583835fca156322f7225382e718cdcc42d6278050a88e605c4ad5"},
    {file = "unearth-0.17.2.tar.gz", hash = "sha256:0b8a2afd3476f1ab6155fc579501ac47fffe43547d88a70e5a5b76a7fe6caa2c"},
]

[[package]]
name = "urllib3"
version = "2.3.0"
requires_python = ">=3.9"
summary = "HTTP library with thread-safe connection pooling, file post, and more."
groups = ["default"]
files = [
    {file = "urllib3-2.3.0-py3-none-any.whl", hash = "sha256:1cee9ad369867bfdbbb48b7dd50374c0967a0bb7710050facf0dd6911440e3df"},
    {file = "urllib3-2.3.0.tar.gz", hash = "sha256:f8c5449b3cf0861679ce7e0503c7b44b5ec981bec0d1d3795a07f1ba96f0204d"},
]

[[package]]
name = "uv"
version = "0.5.24"
requires_python = ">=3.8"
summary = "An extremely fast Python package and project manager, written in Rust."
groups = ["default"]
files = [
    {file = "uv-0.5.24-py3-none-linux_armv6l.whl", hash = "sha256:13f4f1e36c2b566c19d6fefd09cca5a2a6e8b1cf2ffa16b670351d0eed0c7d4f"},
    {file = "uv-0.5.24-py3-none-macosx_10_12_x86_64.whl", hash = "sha256:188bacdbe39c7f76ad1999ce0dee0dfd2b79d248e121498bbaf94ba6089fb7ee"},
    {file = "uv-0.5.24-py3-none-macosx_11_0_arm64.whl", hash = "sha256:f2ccd95cecfcc9e106b9d8d154f6bfc59d8263952f72a720d0158f3b94dc69cb"},
    {file = "uv-0.5.24-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.musllinux_1_1_aarch64.whl", hash = "sha256:d36da9ab6291eaac151695247cdfb3049e6416d6c210c9890ffcda6d0aa6ad19"},
    {file = "uv-0.5.24-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:d7421d59c80bc805103f1030777f909904feab338620db5b5d81f9c10767304d"},
    {file = "uv-0.5.24-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:455d23e0f41577eb9edbdac8e41d37875cb2885758760acee96469084f31571c"},
    {file = "uv-0.5.24-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl", hash = "sha256:cfcabf26314411dde69c7a62e9757d5688aa475731c7a3b3749f389488121768"},
    {file = "uv-0.5.24-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ac8919fc145aeba090adce202e470c21f2df7dfcfa01ca67a9575d41adbf3de5"},
    {file = "uv-0.5.24-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:57b473602e7f3f356ba4d2cb5e2c6c7c691f21dbbffd7202c12fc9db29b7ad7a"},
    {file = "uv-0.5.24-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:a47acfda27654c212af6aeec0b8d12fc0150295b7e6afabbdc741a7eb39d898f"},
    {file = "uv-0.5.24-py3-none-manylinux_2_28_aarch64.whl", hash = "sha256:1e933341300f107d228608af9cc23e08c3a386c0077181db23b4cd26535c64d7"},
    {file = "uv-0.5.24-py3-none-musllinux_1_1_armv7l.whl", hash = "sha256:421304f2b31799f9f926faa75add2b7bbf653e850b9f97c08cb74e5fb5e7f661"},
    {file = "uv-0.5.24-py3-none-musllinux_1_1_i686.whl", hash = "sha256:d3a9e63b098055830b58b47552ea4fc38c94a95b5f2de44a8d288ef5decce265"},
    {file = "uv-0.5.24-py3-none-musllinux_1_1_x86_64.whl", hash = "sha256:6640a2cb919cc04c0fb599d5630a579bacfa8166b928b7e49e3b71280f30f5d9"},
    {file = "uv-0.5.24-py3-none-win32.whl", hash = "sha256:ecb71bcada372274db34bd32f6a9214974b26b6cdc3145a26d07a710f2ea7f18"},
    {file = "uv-0.5.24-py3-none-win_amd64.whl", hash = "sha256:9059775b0c74a68799f3e665a08c429f527d3cdf61c15227992cfff75e31c327"},
    {file = "uv-0.5.24.tar.gz", hash = "sha256:b7895b66a182bf5e5b88e470ab04beaf76361a64970db6058363293a18c9dd2a"},
]

[[package]]
name = "uvicorn"
version = "0.34.0"
requires_python = ">=3.9"
summary = "The lightning-fast ASGI server."
groups = ["default"]
dependencies = [
    "click>=7.0",
    "h11>=0.8",
    "typing-extensions>=4.0; python_version < \"3.11\"",
]
files = [
    {file = "uvicorn-0.34.0-py3-none-any.whl", hash = "sha256:023dc038422502fa28a09c7a30bf2b6991512da7dcdb8fd35fe57cfc154126f4"},
    {file = "uvicorn-0.34.0.tar.gz", hash = "sha256:404051050cd7e905de2c9a7e61790943440b3416f49cb409f965d9dcd0fa73e9"},
]

[[package]]
name = "virtualenv"
version = "20.29.1"
requires_python = ">=3.8"
summary = "Virtual Python Environment builder"
groups = ["dev"]
dependencies = [
    "distlib<1,>=0.3.7",
    "filelock<4,>=3.12.2",
    "importlib-metadata>=6.6; python_version < \"3.8\"",
    "platformdirs<5,>=3.9.1",
]
files = [
    {file = "virtualenv-20.29.1-py3-none-any.whl", hash = "sha256:4e4cb403c0b0da39e13b46b1b2476e505cb0046b25f242bee80f62bf990b2779"},
    {file = "virtualenv-20.29.1.tar.gz", hash = "sha256:b8b8970138d32fb606192cb97f6cd4bb644fa486be9308fb9b63f81091b5dc35"},
]

[[package]]
name = "whoosh"
version = "2.7.4"
summary = "Fast, pure-Python full text indexing, search, and spell checking library."
groups = ["default"]
files = [
    {file = "Whoosh-2.7.4-py2.py3-none-any.whl", hash = "sha256:aa39c3c3426e3fd107dcb4bde64ca1e276a65a889d9085a6e4b54ba82420a852"},
    {file = "Whoosh-2.7.4.tar.gz", hash = "sha256:7ca5633dbfa9e0e0fa400d3151a8a0c4bec53bd2ecedc0a67705b17565c31a83"},
    {file = "Whoosh-2.7.4.zip", hash = "sha256:e0857375f63e9041e03fedd5b7541f97cf78917ac1b6b06c1fcc9b45375dda69"},
]

[[package]]
name = "win32-setctime"
version = "1.2.0"
requires_python = ">=3.5"
summary = "A small Python utility to set file creation time on Windows"
groups = ["default"]
marker = "sys_platform == \"win32\""
files = [
    {file = "win32_setctime-1.2.0-py3-none-any.whl", hash = "sha256:95d644c4e708aba81dc3704a116d8cbc974d70b3bdb8be1d150e36be6e9d1390"},
    {file = "win32_setctime-1.2.0.tar.gz", hash = "sha256:ae1fdf948f5640aae05c511ade119313fb6a30d7eabe25fef9764dca5873c4c0"},
]

[[package]]
name = "xmltodict"
version = "0.14.2"
requires_python = ">=3.6"
summary = "Makes working with XML feel like you are working with JSON"
groups = ["default"]
files = [
    {file = "xmltodict-0.14.2-py2.py3-none-any.whl", hash = "sha256:20cc7d723ed729276e808f26fb6b3599f786cbc37e06c65e192ba77c40f20aac"},
    {file = "xmltodict-0.14.2.tar.gz", hash = "sha256:201e7c28bb210e374999d1dde6382923ab0ed1a8a5faeece48ab525b7810a553"},
]

[[package]]
name = "yarl"
version = "1.18.3"
requires_python = ">=3.9"
summary = "Yet another URL library"
groups = ["default"]
dependencies = [
    "idna>=2.0",
    "multidict>=4.0",
    "propcache>=0.2.0",
]
files = [
    {file = "yarl-1.18.3-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:1dd4bdd05407ced96fed3d7f25dbbf88d2ffb045a0db60dbc247f5b3c5c25d50"},
    {file = "yarl-1.18.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:7c33dd1931a95e5d9a772d0ac5e44cac8957eaf58e3c8da8c1414de7dd27c576"},
    {file = "yarl-1.18.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:25b411eddcfd56a2f0cd6a384e9f4f7aa3efee14b188de13048c25b5e91f1640"},
    {file = "yarl-1.18.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:436c4fc0a4d66b2badc6c5fc5ef4e47bb10e4fd9bf0c79524ac719a01f3607c2"},
    {file = "yarl-1.18.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e35ef8683211db69ffe129a25d5634319a677570ab6b2eba4afa860f54eeaf75"},
    {file = "yarl-1.18.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:84b2deecba4a3f1a398df819151eb72d29bfeb3b69abb145a00ddc8d30094512"},
    {file = "yarl-1.18.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:00e5a1fea0fd4f5bfa7440a47eff01d9822a65b4488f7cff83155a0f31a2ecba"},
    {file = "yarl-1.18.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d0e883008013c0e4aef84dcfe2a0b172c4d23c2669412cf5b3371003941f72bb"},
    {file = "yarl-1.18.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:5a3f356548e34a70b0172d8890006c37be92995f62d95a07b4a42e90fba54272"},
    {file = "yarl-1.18.3-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:ccd17349166b1bee6e529b4add61727d3f55edb7babbe4069b5764c9587a8cc6"},
    {file = "yarl-1.18.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:b958ddd075ddba5b09bb0be8a6d9906d2ce933aee81100db289badbeb966f54e"},
    {file = "yarl-1.18.3-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c7d79f7d9aabd6011004e33b22bc13056a3e3fb54794d138af57f5ee9d9032cb"},
    {file = "yarl-1.18.3-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:4891ed92157e5430874dad17b15eb1fda57627710756c27422200c52d8a4e393"},
    {file = "yarl-1.18.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:ce1af883b94304f493698b00d0f006d56aea98aeb49d75ec7d98cd4a777e9285"},
    {file = "yarl-1.18.3-cp312-cp312-win32.whl", hash = "sha256:f91c4803173928a25e1a55b943c81f55b8872f0018be83e3ad4938adffb77dd2"},
    {file = "yarl-1.18.3-cp312-cp312-win_amd64.whl", hash = "sha256:7e2ee16578af3b52ac2f334c3b1f92262f47e02cc6193c598502bd46f5cd1477"},
    {file = "yarl-1.18.3-py3-none-any.whl", hash = "sha256:b57f4f58099328dfb26c6a771d09fb20dbbae81d20cfb66141251ea063bd101b"},
    {file = "yarl-1.18.3.tar.gz", hash = "sha256:ac1801c45cbf77b6c99242eeff4fffb5e4e73a800b5c4ad4fc0be5def634d2e1"},
]

[[package]]
name = "zipp"
version = "3.21.0"
requires_python = ">=3.9"
summary = "Backport of pathlib-compatible object wrapper for zip files"
groups = ["default"]
files = [
    {file = "zipp-3.21.0-py3-none-any.whl", hash = "sha256:ac1bbe05fd2991f160ebce24ffbac5f6d11d83dc90891255885223d42b3cd931"},
    {file = "zipp-3.21.0.tar.gz", hash = "sha256:2c9958f6430a2040341a52eb608ed6dd93ef4392e02ffe219417c1b28b5dd1f4"},
]

================
File: engine/pyproject.toml
================
[project]
name = "engine"
version = "0.1.0"
description = "Default template for PDM package"
authors = [
    {name = "Utkarsh Kanwat", email = "utkarshkanwat@gmail.com"},
]



dependencies = ["GitPython>=3.1.44", "pydantic>=2.10.5", "whoosh>=2.7.4", "fastapi>=0.115.6", "uvicorn>=0.34.0", "python-multipart>=0.0.20", "networkx>=3.4.2", "PyYAML>=6.0.2", "litellm>=1.58.4", "python-dotenv>=1.0.1", "RestrictedPython>=7.4", "cloudpickle>=3.1.1", "SQLAlchemy>=2.0.37", "psycopg2-binary>=2.9.10", "alembic>=1.14.1", "aider-install>=0.1.3", "bigtree>=0.23.1", "sentence-transformers>=3.4.0", "faiss-cpu>=1.9.0.post1", "httpx>=0.27.2", "loguru>=0.7.3", "diff-match-patch>=20241021", "xmltodict>=0.14.2"]
requires-python = "==3.12.*"
readme = "README.md"
license = {text = "MIT"}

[dependency-groups]
dev = [
    "ruff>=0.9.2",
    "pytest>=8.3.4",
    "pdm[pytest]>=2.22.2",
    "pytest-asyncio>=0.25.2",
    "numpy>=2.2.2",
]


[pytest]
addopts = "--cov=src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-ra -q"
pythonpath = ["src"]
asyncio_default_fixture_loop_scope = "function"  # Add this line



[tool.coverage.run]
source = ["engine"]
omit = ["tests/*"]



[tool.pdm]
distribution = false
package-dir = "src"   # Add this line if not present

[tool.pdm.scripts]
start =  {env = {"PYTHONPATH" = "src"}, cmd = "python src/engine/main.py"}
test = "pytest tests/"
lint = "ruff check src/ tests/"
format = "black src/ tests/"
dev = {composite = ["format", "lint", "test"]}
fix = "ruff check --fix src/"

migrate = "alembic upgrade head"                           # Apply all pending migrations
makemigrations = "alembic revision --autogenerate -m"      # Generate new migration
downgrade = "alembic downgrade -1"                         # Rollback last migration

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

================
File: engine/ruff.toml
================
# ruff.toml
line-length = 120

# Basic excludes
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "build",
    "dist",
]

[lint]
# Only select specific rules you want
select = [
    "F401",    # unused imports
    "F841",    # unused variables
    "E711",    # comparisons to None should use 'is'
    "E712",    # comparisons to True/False should use 'is'
    "E713",    # test for membership should use 'not in'
    "F821",    # undefined names
]

# Ignore everything else
ignore = ["E", "F", "W", "C", "B", "I"]  # Ignore all rules by default except those explicitly selected

# Don't auto-fix anything
fixable = []  # Empty list means nothing will be auto-fixed
unfixable = ["E", "F", "W", "C", "B", "I"]  # Prevent fixing for all rule categories

[format]
# Keep formatting minimal
quote-style = "preserve"  # keep existing quotes
indent-style = "tab"  # keep existing indentation
skip-magic-trailing-comma = true
line-ending = "auto"

================
File: registry/@/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: registry/@/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: registry/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: registry/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: registry/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: registry/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: registry/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: registry/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: registry/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: registry/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: registry/components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: registry/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: registry/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: registry/components/CommonHeader.tsx
================
import React from 'react';
import { useUser, withUser } from 'next-firebase-auth';
import { Search, Menu } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Input } from '@/components/ui/input';
import Link from 'next/link';
import { useRouter } from 'next/router';

const CommonHeader = () => {
  const user = useUser();
  const router = useRouter();

  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;
    const searchQuery = (form.elements.namedItem('search') as HTMLInputElement)?.value;
    if (searchQuery) {
      router.push(`/search?q=${encodeURIComponent(searchQuery)}`);
    }
  };

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="flex h-16 items-center px-4 container mx-auto">
        <div className="flex items-center flex-1 gap-6">
          <Link href="/" className="font-bold text-2xl">
            Hivon Kits
          </Link>
          
          <div className="flex-1 flex items-center">
            <form onSubmit={handleSearch} className="flex-1 flex items-center max-w-2xl">
              <div className="relative flex-1">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  name="search"
                  placeholder="Search modules..."
                  className="pl-8 bg-muted/50"
                />
              </div>
            </form>
          </div>
        </div>

        <div className="flex items-center gap-4">
          {!user?.id ? (
            <div className="flex gap-2">
              <Button variant="ghost" asChild>
                <Link href="/auth">Sign In</Link>
              </Button>
              <Button asChild>
                <Link href="/auth">Sign Up</Link>
              </Button>
            </div>
          ) : (
            <>
              <Button variant="ghost" asChild>
                <Link href="/publish">Publish Module</Link>
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <Menu className="h-5 w-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem asChild>
                    <Link href="/dashboard">Dashboard</Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/settings">Settings</Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => user.signOut()}>
                    Sign Out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </>
          )}
        </div>
      </div>
    </header>
  );
};

export default withUser()(CommonHeader);

================
File: registry/components/DemoPageLinks.js
================
import React from 'react'
import Link from 'next/link'

const styles = {
  content: {
    padding: '4px 32px 32px 32px',
    background: '#eeeeee',
    display: 'inline-block',
  },
  linkAnchor: {
    color: 'teal',
    display: 'block',
    lineHeight: '160%',
  },
}

const DemoPageLinks = () => (
  <div style={styles.content}>
    <h4>Examples</h4>
    <div>
      <Link href="/" style={styles.linkAnchor}>
        Home: SSR, no auth required
      </Link>
      <Link href="/ssr-auth-required" style={styles.linkAnchor}>
        Example: SSR + data fetching with ID token
      </Link>
      <Link href="/ssr-no-token" style={styles.linkAnchor}>
        Example: SSR + no ID token
      </Link>
      <Link href="/static-auth-required-loader" style={styles.linkAnchor}>
        Example: static + loader + data fetching with ID token
      </Link>
      <Link href="/auth" style={styles.linkAnchor}>
        Login page: static
      </Link>
      <Link href="/auth-ssr" style={styles.linkAnchor}>
        Login page: server-rendered
      </Link>
    </div>
  </div>
)

DemoPageLinks.displayName = 'DemoPageLinks'

export default DemoPageLinks

================
File: registry/components/FirebaseAuth.js
================
/* globals window */
import React, { useEffect, useState } from 'react'
import { getApp } from 'firebase/app'
import { getAuth, EmailAuthProvider } from 'firebase/auth'
import StyledFirebaseAuth from './StyledFirebaseAuth'

// Note that next-firebase-auth inits Firebase for us,
// so we don't need to.

const firebaseAuthConfig = {
  signInFlow: 'popup',
  // Auth providers
  // https://github.com/firebase/firebaseui-web#configure-oauth-providers
  signInOptions: [
    {
      provider: EmailAuthProvider.PROVIDER_ID,
      requireDisplayName: false,
    },
  ],
  signInSuccessUrl: '/',
  credentialHelper: 'none',
  callbacks: {
    // https://github.com/firebase/firebaseui-web#signinsuccesswithauthresultauthresult-redirecturl
    signInSuccessWithAuthResult: () =>
      // Don't automatically redirect. We handle redirects using
      // `next-firebase-auth`.
      false,
  },
}

const FirebaseAuth = () => {
  // Do not SSR FirebaseUI, because it is not supported.
  // https://github.com/firebase/firebaseui-web/issues/213
  const [renderAuth, setRenderAuth] = useState(false)
  useEffect(() => {
    if (typeof window !== 'undefined') {
      setRenderAuth(true)
    }
  }, [])
  return (
    <div>
      {renderAuth ? (
        <StyledFirebaseAuth
          uiConfig={firebaseAuthConfig}
          firebaseAuth={getAuth(getApp())}
        />
      ) : null}
    </div>
  )
}

export default FirebaseAuth

================
File: registry/components/FullPageLoader.js
================
import React from 'react'

const styles = {
  container: {
    width: '100vw',
    height: '100vh',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
}

const FullPageLoader = () => (
  <div style={styles.container}>
    <h3>Loading...</h3>
  </div>
)

export default FullPageLoader

================
File: registry/components/Header.js
================
import React from 'react'
import Link from 'next/link'

const nfaDependencyVersion =
  require('../package.json').dependencies['next-firebase-auth']
const nextDependencyVersion = require('../package.json').dependencies.next
const firebaseDependencyVersion =
  require('../package.json').dependencies.firebase
const firebaseAdminDependencyVersion =
  require('../package.json').dependencies['firebase-admin']

const styles = {
  container: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'flex-start',
    padding: 16,
  },
  versionsContainer: {
    marginLeft: 0,
    marginRight: 'auto',
  },
  button: {
    marginLeft: 16,
    cursor: 'pointer',
  },
  nfaVersion: {
    fontWeight: '600',
  },
  loginContainer: {
    display: 'flex',
    alignItems: 'center',
  },
}

const Header = ({ email, signOut }) => (
  <div style={styles.container}>
    <div style={styles.versionsContainer}>
      <div style={styles.nfaVersion}>Version {nfaDependencyVersion}</div>
      <div>Next.js {nextDependencyVersion}</div>
      <div>Firebase {firebaseDependencyVersion}</div>
      <div>firebase-admin {firebaseAdminDependencyVersion}</div>
    </div>
    <div style={styles.loginContainer}>
      {email ? (
        <>
          <p>Signed in as {email}</p>
          <div>
            <button
              type="button"
              onClick={() => {
                signOut()
              }}
              style={styles.button}
            >
              Sign out
            </button>
          </div>
        </>
      ) : (
        <>
          <p>You are not signed in.</p>
          <div>
            <Link href="/auth">
              <button type="button" style={styles.button}>
                Sign in
              </button>
            </Link>
          </div>
        </>
      )}
    </div>
  </div>
)

export default Header

================
File: registry/components/Home.tsx
================
// pages/index.tsx
import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Package, FileCode, GitFork } from 'lucide-react';
import { getFirestore, collection, getDocs } from 'firebase/firestore';
import Link from 'next/link';

interface Package {
  fileName: string;
  kitConfig: {
    name: string;
    id: string;
    version: string;
    owner: string;
    description?: string;
    workflows?: Record<string, any>;
    dependencies?: string[];
  };
  uploadedAt: string;
}

const HomePage = () => {
  const [packages, setPackages] = useState<Package[]>([]);
  const [loading, setLoading] = useState(true);

  console.log("packages", packages);

  useEffect(() => {
    const fetchPackages = async () => {
      try {
        const db = getFirestore();
        const packagesCollection = collection(db, 'packages');
        const packagesSnapshot = await getDocs(packagesCollection);
        
        const packagesData = packagesSnapshot.docs.map(doc => ({
          ...doc.data()
        })) as Package[];

        setPackages(packagesData);
      } catch (error) {
        console.error('Error fetching packages:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchPackages();
  }, []);

  return (
    <div className="min-h-screen bg-background">
      {/* orange background */}
      <section className="py-8 px-4 text-center bg-orange-400">
        <div className="container mx-auto max-w-4xl">
          <p className="text-xl text-muted-foreground  text-white">
            A registry of Agent-controlled interconnectable Modules Kits
          </p>
        </div>
      </section>

      <main className="container mx-auto py-12 px-4">
        <section className="mb-12">
          <h2 className="text-2xl font-semibold mb-6">Available Packages</h2>
          {loading ? (
            <div className="flex justify-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900" />
            </div>
          ) : (
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {packages.map((pkg) => (
                <Link href={`/kit/${pkg.kitConfig.id}`} key={pkg.fileName}>
  <Card className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="mb-2">{pkg.kitConfig.name}</CardTitle>
                        <div className="flex gap-2 mb-2">
                          <Badge variant="secondary">{pkg.kitConfig.owner}</Badge>
                          <Badge variant="outline">{pkg.kitConfig.version}</Badge>
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <CardDescription className="mb-4">
                      {pkg.kitConfig.description || 
                       `Package ID: ${pkg.kitConfig.id}`}
                    </CardDescription>
                    <div className="flex gap-4 text-sm text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <Package className="h-4 w-4" />
                        {Object.keys(pkg.kitConfig.workflows || {}).length} workflows
                      </div>
                      <div className="flex items-center gap-1">
                        <FileCode className="h-4 w-4" />
                        {pkg.kitConfig.dependencies?.length || 0} dependencies
                      </div>
                      <div className="flex items-center gap-1 ml-auto">
                        <time className="text-xs text-muted-foreground" dateTime={pkg.uploadedAt}>
                          {new Date(pkg.uploadedAt).toLocaleDateString()}
                        </time>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                </Link>
              ))}
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default HomePage;

================
File: registry/components/StyledFirebaseAuth.tsx
================
import React, { useEffect, useRef, useState } from 'react'
import { Auth, onAuthStateChanged } from 'firebase/auth'
import 'firebaseui/dist/firebaseui.css'
import { auth } from 'firebaseui'

interface Props {
  // The Firebase UI Web UI Config object.
  // See: https://github.com/firebase/firebaseui-web#configuration
  uiConfig: auth.Config
  // Callback that will be passed the FirebaseUi instance before it is
  // started. This allows access to certain configuration options such as
  // disableAutoSignIn().
  uiCallback?(ui: auth.AuthUI): void
  // The Firebase App auth instance to use.
  firebaseAuth: Auth // As firebaseui-web
  className?: string
}

const StyledFirebaseAuth = ({
  uiConfig,
  firebaseAuth,
  className,
  uiCallback,
}: Props) => {
  const [firebaseui, setFirebaseui] = useState<
    typeof import('firebaseui') | null
  >(null)
  const [userSignedIn, setUserSignedIn] = useState(false)
  const elementRef = useRef(null)

  useEffect(() => {
    // Firebase UI only works on the Client. So we're loading the package only after
    // the component has mounted, so that this works when doing server-side rendering.
    async function setUI() {
      setFirebaseui(await import('firebaseui'))
    }

    setUI()
  }, [])

  useEffect(() => {
    if (firebaseui === null) return () => {}

    // Get or Create a firebaseUI instance.
    const firebaseUiWidget =
      firebaseui.auth.AuthUI.getInstance() ||
      new firebaseui.auth.AuthUI(firebaseAuth)
    if (uiConfig.signInFlow === 'popup') firebaseUiWidget.reset()

    // We track the auth state to reset firebaseUi if the user signs out.
    const unregisterAuthObserver = onAuthStateChanged(firebaseAuth, (user) => {
      if (!user && userSignedIn) firebaseUiWidget.reset()
      setUserSignedIn(!!user)
    })

    // Trigger the callback if any was set.
    if (uiCallback) uiCallback(firebaseUiWidget)

    // Render the firebaseUi Widget.
    firebaseUiWidget.start(elementRef.current!, uiConfig)

    return () => {
      unregisterAuthObserver()
      firebaseUiWidget.reset()
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [firebaseui, uiConfig])

  return <div className={className} ref={elementRef} />
}

export default StyledFirebaseAuth

================
File: registry/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: registry/pages/api/registry/file-content.ts
================
// pages/api/registry/file-content.ts
import { verifyIdToken } from 'next-firebase-auth'
import type { NextApiRequest, NextApiResponse } from 'next'
import fetch from 'node-fetch'
import JSZip from 'jszip'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    // const token = req.headers.authorization
    // if (!token) {
    //   return res.status(401).json({ error: 'No authentication token provided' })
    // }

    // const user = await verifyIdToken(token)
    // if (!user) {
    //   return res.status(401).json({ error: 'Invalid authentication token' })
    // }

    const { downloadURL, filePath } = req.body

    // Download the zip file
    const fileResponse = await fetch(downloadURL)
    if (!fileResponse.ok) {
      throw new Error('Failed to download zip file')
    }

    const fileBuffer = await fileResponse.arrayBuffer()

    // Read the zip and get the requested file
    const zip = new JSZip()
    const contents = await zip.loadAsync(fileBuffer)
    
    const file = contents.file(filePath)
    if (!file) {
      return res.status(404).json({ error: 'File not found in package' })
    }

    const content = await file.async('string')
    return res.status(200).json({ content })
  } catch (error) {
    console.error('Error retrieving file:', error)
    return res.status(500).json({ 
      error: error instanceof Error ? error.message : 'Internal server error' 
    })
  }
}

================
File: registry/pages/api/registry/kit.ts
================
// pages/api/registry/kit.ts
import type { NextApiRequest, NextApiResponse } from 'next'
import { getFirestore } from 'firebase-admin/firestore'

import { initAdmin } from '@/utils/initAdmin';

initAdmin()

interface KitResponse {
  downloadURL: string;
  checksum: string;
  kitConfig: {
    name: string;
    id: string;
    version: string;
    owner: string;
    description?: string;
    workflows?: Record<string, any>;
    dependencies?: string[];
  };
  uploadedAt: string;
}


export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { owner, id, version } = req.query

    if (!owner || !id) {
      return res.status(400).json({ 
        error: 'Missing required parameters: owner and id are required' 
      })
    }

    const db = getFirestore()
    const packagesRef = db.collection('packages')
    
    let query = packagesRef
      .where('kitConfig.owner', '==', owner)
      .where('kitConfig.id', '==', id)
    
    // If version is specified, get that version; otherwise get the latest
    if (version) {
      query = query.where('kitConfig.version', '==', version)
    } else {
      query = query.orderBy('uploadedAt', 'desc')
    }
    
    const querySnapshot = await query.limit(1).get()

    if (querySnapshot.empty) {
      return res.status(404).json({ 
        error: 'Kit not found' 
      })
    }

    const kitData = querySnapshot.docs[0].data()
    
    const response: KitResponse = {
      downloadURL: kitData.downloadURL,
      checksum: kitData.checksum,
      kitConfig: kitData.kitConfig,
      uploadedAt: kitData.uploadedAt,
    }

    return res.status(200).json(response)
  } catch (error) {
    console.error('Error in kit API:', error)
    return res.status(500).json({ 
      error: error instanceof Error ? error.message : 'Internal server error' 
    })
  }
}

================
File: registry/pages/api/registry/publish.ts
================
// pages/api/registry/publish.ts
import { verifyIdToken } from 'next-firebase-auth'
import type { NextApiRequest, NextApiResponse } from 'next'
import { getFirestore } from 'firebase-admin/firestore'
import fetch from 'node-fetch'
import JSZip from 'jszip'
import yaml from 'js-yaml'
import crypto from 'crypto'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const token = req.headers.authorization
    if (!token) {
      return res.status(401).json({ error: 'No authentication token provided' })
    }

    const user = await verifyIdToken(token)
    if (!user) {
      return res.status(401).json({ error: 'Invalid authentication token' })
    }

    const { fileName, fileSize, downloadURL } = req.body

    // Download the zip file
    const fileResponse = await fetch(downloadURL)
    if (!fileResponse.ok) {
      throw new Error('Failed to download zip file')
    }

    const fileBuffer = await fileResponse.arrayBuffer()

    // Calculate checksum
    const checksum = crypto
      .createHash('sha256')
      .update(new Uint8Array(fileBuffer))
      .digest('hex')

    // Read and validate kit.yaml
    const zip = new JSZip()
    await zip.loadAsync(fileBuffer)
    
    const kitYamlFile = zip.file('kit.yaml')
    if (!kitYamlFile) {
      return res.status(400).json({ error: 'kit.yaml not found in root of zip file' })
    }

    // Parse kit.yaml
    const yamlContent = await kitYamlFile.async('string')
    const kitConfig = yaml.load(yamlContent)

    // Basic validation that it's an object
    if (!kitConfig || typeof kitConfig !== 'object') {
      return res.status(400).json({ error: 'Invalid kit.yaml format' })
    }

    // Save to Firestore
    const db = getFirestore()
    await db.collection('packages').add({
      userId: user.id,
      userEmail: user.email,
      fileName,
      fileSize,
      downloadURL,
      checksum,
      kitConfig,
      uploadedAt: new Date().toISOString(),
    })

    return res.status(200).json({ success: true })
  } catch (error) {
    console.error('Error in publish API:', error)
    return res.status(500).json({ 
      error: error instanceof Error ? error.message : 'Internal server error' 
    })
  }
}

================
File: registry/pages/api/cookies-example.js
================
// This demonstrates getting the user from cookies (rather than from an ID
// token) by using the `getUserFromCookies` method.

import { getUserFromCookies } from 'next-firebase-auth'
import initAuth from '../../utils/initAuth'

initAuth()

const handler = async (req, res) => {
  let user
  try {
    user = await getUserFromCookies({ req })
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error(e)
    return res.status(403).json({ error: 'Not authorized' })
  }
  const animals = [
    'monkeys',
    'horses',
    'seahorses',
    'sea monkeys',
    'dogs',
    'cats',
    'porcupines',
    'sugar gliders',
  ]
  const favoriteAnimal = animals[Math.floor(Math.random() * animals.length)]
  return res.status(200).json({ favoriteAnimal, email: user.email })
}

export default handler

================
File: registry/pages/api/example.js
================
import { verifyIdToken } from 'next-firebase-auth'
import initAuth from '../../utils/initAuth'

initAuth()

const handler = async (req, res) => {
  if (!(req.headers && req.headers.authorization)) {
    return res.status(400).json({ error: 'Missing Authorization header value' })
  }
  const token = req.headers.authorization

  let favoriteColor

  // This "unauthenticated" token is just an demo of the
  // "SSR with no token" example.
  if (token === 'unauthenticated') {
    favoriteColor = 'unknown, because you called the API without an ID token'
  } else {
    try {
      await verifyIdToken(token)
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error(e)
      return res.status(403).json({ error: 'Not authorized' })
    }

    const colors = [
      'sea foam green',
      'light purple',
      'teal',
      'taupe',
      'dark grey',
    ]
    favoriteColor = colors[Math.floor(Math.random() * colors.length)]
  }

  return res.status(200).json({ favoriteColor })
}

export default handler

================
File: registry/pages/api/login.js
================
import { setAuthCookies } from 'next-firebase-auth'
import initAuth from '../../utils/initAuth'

initAuth()

const handler = async (req, res) => {
  try {
    // Including unused return value to demonstrate codemod
    // eslint-disable-next-line no-unused-vars
    const { user } = await setAuthCookies(req, res)
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error(e)
    return res.status(500).json({ error: 'Unexpected error.' })
  }
  return res.status(200).json({ status: true })
}

export default handler

================
File: registry/pages/api/logout.js
================
import { unsetAuthCookies } from 'next-firebase-auth'
import initAuth from '../../utils/initAuth'

initAuth()

const handler = async (req, res) => {
  try {
    await unsetAuthCookies(req, res)
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error(e)
    return res.status(500).json({ error: 'Unexpected error.' })
  }
  return res.status(200).json({ status: true })
}

export default handler

================
File: registry/pages/deprecated/ssr-auth-required.js
================
import React from 'react'
import {
  useUser,
  withUser,
  withUserTokenSSR,
  AuthAction,
} from 'next-firebase-auth'
import Header from '@/components/Header'
import DemoPageLinks from '@/components/DemoPageLinks'
import getAbsoluteURL from '@/utils/getAbsoluteURL'

const styles = {
  content: {
    padding: 32,
  },
  infoTextContainer: {
    marginBottom: 32,
  },
}

const Demo = ({ favoriteColor, favoriteAnimal, email }) => {
  const user = useUser()
  return (
    <div>
      <Header email={user.email} signOut={user.signOut} />
      <div style={styles.content}>
        <div style={styles.infoTextContainer}>
          <h3>Example: SSR + data fetching</h3>
          <p>
            This page requires authentication. It will do a server-side redirect
            (307) to the login page if the auth cookies are not set.
          </p>
          <p>Your favorite color is: {favoriteColor}</p>
          <p>
            Your favorite animal is {favoriteAnimal}. Please send lots of photos
            of {favoriteAnimal} to {email}.
          </p>
        </div>
        <DemoPageLinks />
      </div>
    </div>
  )
}

export const getServerSideProps = withUserTokenSSR({
  whenUnauthed: AuthAction.REDIRECT_TO_LOGIN,
})(async ({ user, req }) => {
  // Optionally, get other props.
  // You can return anything you'd normally return from
  // `getServerSideProps`, including redirects.
  // https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering
  const token = await user.getIdToken()

  // This endpoint uses an ID token.
  // Note: you shouldn't typically fetch your own API routes from within
  // `getServerSideProps`. This is for example purposes only.
  // https://github.com/gladly-team/next-firebase-auth/issues/264
  const endpoint = getAbsoluteURL('/api/example', req)
  const response = await fetch(endpoint, {
    method: 'GET',
    headers: {
      Authorization: token || 'unauthenticated',
    },
  })
  const data = await response.json()
  if (!response.ok) {
    throw new Error(
      `Data fetching failed with status ${response.status}: ${JSON.stringify(
        data
      )}`
    )
  }

  // This API endpoint uses cookies rather than an ID token.
  const endpointTwo = getAbsoluteURL('/api/cookies-example', req)
  const responseTwo = await fetch(endpointTwo, {
    method: 'GET',
    // No Authorization header required, but we need to pass cookies.
    headers: {
      cookie: req.headers.cookie,
    },
    credentials: 'include',
  })
  const dataTwo = await responseTwo.json()
  if (!responseTwo.ok) {
    throw new Error(
      `Data fetching (using cookies) failed with status ${
        responseTwo.status
      }: ${JSON.stringify(dataTwo)}`
    )
  }

  return {
    props: {
      favoriteColor: data.favoriteColor,
      favoriteAnimal: dataTwo.favoriteAnimal,
      email: dataTwo.email,
    },
  }
})

export default withUser({
  whenUnauthedAfterInit: AuthAction.REDIRECT_TO_LOGIN,
})(Demo)

================
File: registry/pages/deprecated/ssr-no-token.tsx
================
import React from 'react'
import { useUser, withUser, withUserSSR, AuthAction } from 'next-firebase-auth'
import Header from '@/components/Header'
import DemoPageLinks from '@/components/DemoPageLinks'
import getAbsoluteURL from '../../utils/getAbsoluteURL'

const styles = {
  content: {
    padding: 32,
  },
  infoTextContainer: {
    marginBottom: 32,
  },
}

type DataType = {
  favoriteColor?: string
}

const defaultProps = {
  favoriteColor: undefined,
}

const Demo = (props: DataType) => {
  const { favoriteColor } = props
  const user = useUser()
  return (
    <div>
      <Header email={user.email} signOut={user.signOut} />
      <div style={styles.content}>
        <div style={styles.infoTextContainer}>
          <h3>Example: SSR + no ID token</h3>
          <p>
            This page requires authentication. It will do a server-side redirect
            (307) to the login page if the auth cookies are not set.
          </p>
          <p>
            This page uses `withUserSSR` rather than `withUserTokenSSR`, so it
            does not have server-side access to the user ID token.
          </p>
          <p>Your favorite color is: {favoriteColor}</p>
        </div>
        <DemoPageLinks />
      </div>
    </div>
  )
}

Demo.defaultProps = defaultProps

export const getServerSideProps = withUserSSR({
  whenUnauthed: AuthAction.REDIRECT_TO_LOGIN,
})(async (ctx) => {
  const { user, req } = ctx
  // The ID token will be null, because `withUserSSR` does not include one.
  // If you need a server-side token, use `withUserTokenSSR`.
  const token = await user?.getIdToken()

  // @ts-ignore: Don't worry about type definitions in this example app.
  const endpoint = getAbsoluteURL('/api/example', req)
  const response = await fetch(endpoint, {
    method: 'GET',
    headers: {
      Authorization: token || 'unauthenticated',
    },
  })
  const data: DataType = await response.json()
  if (!response.ok) {
    throw new Error(
      `Data fetching failed with status ${response.status}: ${JSON.stringify(
        data
      )}`
    )
  }
  return {
    props: {
      favoriteColor: data.favoriteColor,
    },
  }
})

export default withUser<DataType>({
  whenUnauthedAfterInit: AuthAction.REDIRECT_TO_LOGIN,
})(Demo)

================
File: registry/pages/deprecated/static-auth-required-loader.js
================
import React, { useCallback, useEffect, useState } from 'react'
import { useUser, withUser, AuthAction } from 'next-firebase-auth'
import Header from '../../components/Header'
import DemoPageLinks from '../../components/DemoPageLinks'
import FullPageLoader from '../../components/FullPageLoader'
import getAbsoluteURL from '../../utils/getAbsoluteURL'

const styles = {
  content: {
    padding: 32,
  },
  infoTextContainer: {
    marginBottom: 32,
  },
}

const Demo = () => {
  const AuthUser = useUser() // the user is guaranteed to be authenticated

  const [favoriteColor, setFavoriteColor] = useState()
  const fetchData = useCallback(async () => {
    const token = await AuthUser.getIdToken()
    const endpoint = getAbsoluteURL('/api/example')
    const response = await fetch(endpoint, {
      method: 'GET',
      headers: {
        Authorization: token,
      },
    })
    const data = await response.json()
    if (!response.ok) {
      // eslint-disable-next-line no-console
      console.error(
        `Data fetching failed with status ${response.status}: ${JSON.stringify(
          data
        )}`
      )
      return null
    }
    return data
  }, [AuthUser])

  useEffect(() => {
    let isCancelled = false
    const fetchFavoriteColor = async () => {
      const data = await fetchData()
      if (!isCancelled) {
        setFavoriteColor(data ? data.favoriteColor : 'unknown :(')
      }
    }
    fetchFavoriteColor()
    return () => {
      // A quick but not ideal way to avoid state updates after unmount.
      // In your app, prefer aborting fetches:
      // https://developers.google.com/web/updates/2017/09/abortable-fetch
      isCancelled = true
    }
  }, [fetchData])

  return (
    <div>
      <Header email={AuthUser.email} signOut={AuthUser.signOut} />
      <div style={styles.content}>
        <div style={styles.infoTextContainer}>
          <h3>Example: static + loader</h3>
          <p>
            This page requires is static but requires authentication. Before the
            Firebase client SDK initializes, it shows a loader. After
            initializing, if the user is not authenticated, it client-side
            redirects to the login page.
          </p>
          <p>Your favorite color is: {favoriteColor}</p>
        </div>
        <DemoPageLinks />
      </div>
    </div>
  )
}

export default withUser({
  whenUnauthedBeforeInit: AuthAction.SHOW_LOADER,
  whenUnauthedAfterInit: AuthAction.REDIRECT_TO_LOGIN,
  LoaderComponent: FullPageLoader,
})(Demo)

================
File: registry/pages/kit/[id].tsx
================
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { getFirestore, collection, query, where, getDocs } from 'firebase/firestore';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import {
  Package,
  FileCode,
  Settings,
  PlayCircle,
  FileText,
  ChevronRight,
} from 'lucide-react';

const PackageDetails = () => {
  const router = useRouter();
  const { id } = router.query;
  const [packageData, setPackageData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [selectedFile, setSelectedFile] = useState<string | null>(null);
  const [fileContent, setFileContent] = useState<string | null>(null);
  const [fileLoading, setFileLoading] = useState(false);

  useEffect(() => {
    const fetchPackageDetails = async () => {
      if (!id) return;

      try {
        const db = getFirestore();
        const packagesRef = collection(db, 'packages');
        const q = query(packagesRef, where('kitConfig.id', '==', id));
        const querySnapshot = await getDocs(q);

        if (!querySnapshot.empty) {
          setPackageData(querySnapshot.docs[0].data());
        }
      } catch (error) {
        console.error('Error fetching package:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchPackageDetails();
  }, [id]);

  const handleFileClick = async (filePath: string) => {
    try {
      setSelectedFile(filePath);
      setFileLoading(true);

      const response = await fetch('/api/registry/file-content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          downloadURL: packageData.downloadURL,
          filePath,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to fetch file content');
      }

      const data = await response.json();
      setFileContent(data.content);
    } catch (error) {
      console.error('Error fetching file:', error);
      setFileContent('Error loading file content');
    } finally {
      setFileLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900" />
      </div>
    );
  }

  if (!packageData) {
    return <div>Package not found</div>;
  }

  const { kitConfig } = packageData;

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="mb-8">
        <div className="flex items-center gap-2 text-sm text-muted-foreground mb-4">
          <Link href="/">Registry</Link>
          <ChevronRight className="h-4 w-4" />
          <span>{kitConfig.name}</span>
        </div>
        
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold mb-2">{kitConfig.name}</h1>
            <div className="flex gap-2 mb-4">
              <Badge>{kitConfig.owner}</Badge>
              <Badge variant="outline">v{kitConfig.version}</Badge>
              {kitConfig.docVersion && (
                <Badge variant="secondary">Doc {kitConfig.docVersion}</Badge>
              )}
            </div>
          </div>
        </div>
      </div>

      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="workflows">Workflows</TabsTrigger>
          <TabsTrigger value="environment">Environment</TabsTrigger>
          <TabsTrigger value="files">Files</TabsTrigger>
          <TabsTrigger value="allFiles">All Files</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          {kitConfig.instructions?.documentation && (
            <Card>
              <CardHeader>
                <CardTitle>Documentation</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {kitConfig.instructions.documentation.map((doc: any) => (
                    <li key={doc.path} className="flex items-center gap-2">
                      <FileText className="h-4 w-4" />
                      <span className="cursor-pointer hover:text-primary"
                            onClick={() => handleFileClick(`instructions/${doc.path}`)}>
                        {doc.name}
                      </span>
                      <span className="text-sm text-muted-foreground">
                        - {doc.description}
                      </span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          )}

          {kitConfig.dependencies && (
            <Card>
              <CardHeader>
                <CardTitle>Dependencies</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {kitConfig.dependencies.map((dep: string) => (
                    <Badge key={dep} variant="secondary">
                      {dep}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="workflows" className="space-y-4">
          {Object.entries(kitConfig.workflows || {}).map(([name, workflow]: [string, any]) => (
            <Card key={name}>
              <CardHeader>
                <CardTitle className="capitalize">{name}</CardTitle>
              </CardHeader>
              <CardContent>
                {workflow.actions && (
                  <div className="space-y-2">
                    {workflow.actions.map((action: any) => (
                      <div key={action.path} className="flex items-center gap-2">
                        <PlayCircle className="h-4 w-4" />
                        <span>{action.name}</span>
                        <span className="text-sm text-muted-foreground">
                          - {action.description}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
                {workflow.instruction && (
                  <div className="mt-2 text-sm text-muted-foreground cursor-pointer hover:text-primary"
                       onClick={() => handleFileClick(`instructions/${workflow.instruction}`)}>
                    Instruction file: {workflow.instruction}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        <TabsContent value="environment" className="space-y-4">
          {kitConfig.environment && kitConfig.environment.length > 0 ? (
            <Card>
              <CardHeader>
                <CardTitle>Environment Variables</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {kitConfig.environment.map((env: any) => (
                    <div key={env.name} className="space-y-1">
                      <div className="font-medium">{env.name}</div>
                      <div className="text-sm text-muted-foreground">
                        {env.description}
                      </div>
                      {env.default && (
                        <div className="text-sm">
                          Default: <code>{env.default}</code>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="text-muted-foreground">
              No environment variables required
            </div>
          )}
        </TabsContent>

        <TabsContent value="files" className="space-y-4">
          {kitConfig.workspace?.files && (
            <Card>
              <CardHeader>
                <CardTitle>Workspace Files</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {kitConfig.workspace.files.map((file: any) => (
                    <li key={file.path} className="flex items-center gap-2">
                      <FileCode className="h-4 w-4" />
                      <span className="cursor-pointer hover:text-primary"
                            onClick={() => handleFileClick(file.path)}>
                        {file.path}
                      </span>
                      {file.description && (
                        <span className="text-sm text-muted-foreground">
                          - {file.description}
                        </span>
                      )}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="allFiles" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>All Package Files</CardTitle>
            </CardHeader>
            <CardContent>
              {/* Actions Files */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Action Files</h3>
                <div className="space-y-2 pl-4">
                  {Object.entries(kitConfig.workflows || {}).map(([workflowName, workflow]: [string, any]) => (
                    workflow.actions?.map((action: any) => {
                      const [filePath, functionName] = action.path.split(':');
                      return (
                        <div key={action.path} className="flex items-start gap-2">
                          <FileCode className="h-4 w-4 mt-1" />
                          <div>
                            <div className="font-medium cursor-pointer hover:text-primary"
                                 onClick={() => handleFileClick(`actions/${filePath}.py`)}>
                              actions/{filePath}.py
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Function: {functionName}
                              {action.description && ` - ${action.description}`}
                            </div>
                          </div>
                        </div>
                      );
                    })
                  ))}
                </div>
              </div>

              {/* Instruction Files */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Instruction Files</h3>
                <div className="space-y-2 pl-4">
                  {/* Documentation Instructions */}
                  {kitConfig.instructions?.documentation?.map((doc: any) => (
                    <div key={doc.path} className="flex items-start gap-2">
                      <FileText className="h-4 w-4 mt-1" />
                      <div>
                        <div className="font-medium cursor-pointer hover:text-primary"
                             onClick={() => handleFileClick(`instructions/${doc.path}`)}>
                          instructions/{doc.path}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          Documentation: {doc.name}
                          {doc.description && ` - ${doc.description}`}
                        </div>
                      </div>
                    </div>
                  ))}

                  {/* Workflow Instructions */}
                  {Object.entries(kitConfig.workflows || {}).map(([workflowName, workflow]: [string, any]) => (
                    workflow.instruction && (
                      <div key={workflowName} className="flex items-start gap-2">
                        <FileText className="h-4 w-4 mt-1" />
                        <div>
                          <div className="font-medium cursor-pointer hover:text-primary"
                               onClick={() => handleFileClick(`instructions/${workflow.instruction}`)}>
                            instructions/{workflow.instruction}
                          </div>
                          <div className="text-sm text-muted-foreground">
                            Workflow: {workflowName} instructions
                          </div>
                        </div>
                      </div>
                    )
                  ))}
                </div>
              </div>

              {/* Workspace Files */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Workspace Files</h3>
                <div className="space-y-2 pl-4">
                  {kitConfig.workspace?.files?.map((file: any) => (
                    <div key={file.path} className="flex items-start gap-2">
                      <FileCode className="h-4 w-4 mt-1" />
                      <div>
                        <div className="font-medium cursor-pointer hover:text-primary"
                             onClick={() => handleFileClick(file.path)}>
                          {file.path}
                        </div>
                        {file.description && (
                          <div className="text-sm text-muted-foreground">
                            {file.description}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Configuration Files */}
              <div>
                <h3 className="text-lg font-semibold mb-2">Configuration Files</h3>
                <div className="space-y-2 pl-4">
                  <div className="flex items-start gap-2">
                    <FileCode className="h-4 w-4 mt-1" />
                    <div>
                      <div className="font-medium cursor-pointer hover:text-primary"
                           onClick={() => handleFileClick('kit.yaml')}>
                        kit.yaml
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Package configuration file
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <Dialog open={!!selectedFile} onOpenChange={() => {
        setSelectedFile(null);
        setFileContent(null);
      }}>
        <DialogContent className="max-w-3xl h-[80vh]">
          <DialogHeader>
            <DialogTitle>{selectedFile}</DialogTitle>
          </DialogHeader>
          <div className="flex-1 overflow-auto">
            {fileLoading ? (
              <div className="flex justify-center items-center h-full">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
              </div>
            ) : (
              <pre className="p-4 bg-muted rounded-lg overflow-auto">
                <code>{fileContent}</code>
              </pre>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PackageDetails;

================
File: registry/pages/_app.tsx
================
import React from 'react'
import '../styles/globals.css'
import initAuth from '../utils/initAuth'
import CommonHeader from '../components/CommonHeader'
import type { AppProps } from 'next/app'

initAuth()

const MyApp = ({ Component, pageProps }: AppProps) => (
  <div className="min-h-screen flex flex-col">
    <CommonHeader />
    <main className="flex-1">
      <Component {...pageProps} />
    </main>
  </div>
)

export default MyApp

================
File: registry/pages/auth-ssr.tsx
================
import React from 'react'
import { withUser, withUserTokenSSR, AuthAction } from 'next-firebase-auth'
import FirebaseAuth from '../components/FirebaseAuth'

const styles = {
  content: {
    padding: `8px 32px`,
  },
  textContainer: {
    display: 'flex',
    justifyContent: 'center',
    margin: 16,
  },
}

const Auth = () => (
  <div style={styles.content}>
    <h3>Sign in</h3>
    <div style={styles.textContainer}>
      <p>
        This auth page is <b>not</b> static. It will server-side redirect to the
        app if the user is already authenticated.
      </p>
    </div>
    <div>
      <FirebaseAuth />
    </div>
  </div>
)

export const getServerSideProps = withUserTokenSSR({
  whenAuthed: AuthAction.REDIRECT_TO_APP,
})()

export default withUser({
  whenAuthed: AuthAction.REDIRECT_TO_APP,
})(Auth)

================
File: registry/pages/auth.tsx
================
import React from 'react'
import { withUser, AuthAction } from 'next-firebase-auth'
import FirebaseAuth from '../components/FirebaseAuth'

const styles = {
  content: {
    padding: `8px 32px`,
  },
  textContainer: {
    display: 'flex',
    justifyContent: 'center',
    margin: 16,
  },
}

const Auth = () => (
  <div style={styles.content}>
    <h3>Sign in</h3>
    <div style={styles.textContainer}>
      <p>
        This auth page is <b>static</b>. It will redirect on the client side if
        the user is already authenticated.
      </p>
    </div>
    <div>
      <FirebaseAuth />
    </div>
  </div>
)

export default withUser({
  whenAuthed: AuthAction.REDIRECT_TO_APP,
  whenUnauthedBeforeInit: AuthAction.RETURN_NULL,
  whenUnauthedAfterInit: AuthAction.RENDER,
})(Auth)

================
File: registry/pages/index.tsx
================
import React from 'react'
import { withUser } from 'next-firebase-auth'
import CommonHeader from '../components/Header'
import HomePage from '../components/Home'

const Index = () => {
  return (
    <div>
      <HomePage />
    </div>
  )
}

// No authentication required for home page
export default withUser()(Index)

================
File: registry/pages/publish.tsx
================
// pages/publish.tsx
'use client'

import { useState } from 'react'
import { useUser, withUser, AuthAction } from 'next-firebase-auth'
import { getStorage, ref, uploadBytes, getDownloadURL, FirebaseStorage } from 'firebase/storage'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'
import { Progress } from '@/components/ui/progress'


const  storage= getStorage();




function PublishPage() {
  const user = useUser()
  const [file, setFile] = useState<File | null>(null)
  const [uploading, setUploading] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(0)
  const [showSuccessDialog, setShowSuccessDialog] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setError(null)
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0]
      if (selectedFile.type === 'application/zip' || selectedFile.name.endsWith('.zip')) {
        setFile(selectedFile)
      } else {
        setError('Please upload a zip file')
      }
    }
  }

  const handleUpload = async () => {
    if (!file || !user.id) return

    try {
      setUploading(true)
      setError(null)

      const token = await user.getIdToken()
      if (!token) {
        throw new Error('Authentication token not available')
      }

      // Upload to Firebase Storage
      const storageRef = ref(storage, `registry/${user.id}/${file.name}`)
      await uploadBytes(storageRef, file)
      const downloadURL = await getDownloadURL(storageRef)

      // Send to API for processing
      const response = await fetch('/api/registry/publish', {
        method: 'POST',
        headers: {
          'Authorization': token,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          fileName: file.name,
          fileSize: file.size,
          downloadURL,
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Failed to process package')
      }

      setShowSuccessDialog(true)
      setFile(null)
    } catch (error) {
      console.error('Error:', error)
      setError(error instanceof Error ? error.message : 'Error uploading file')
    } finally {
      setUploading(false)
      setUploadProgress(0)
    }
  }

  return (
    <div className="container mx-auto py-10">
      <Card className="p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Publish Registry Package</h1>
          <Button
            variant="outline"
            onClick={() => user.signOut()}
          >
            Sign Out
          </Button>
        </div>

        <div className="space-y-4">
          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="file">Package File (ZIP)</Label>
            <Input
              id="file"
              type="file"
              accept=".zip,application/zip,application/x-zip-compressed"
              onChange={handleFileChange}
              disabled={uploading}
            />
          </div>

          {error && (
            <div className="text-sm text-red-500">
              {error}
            </div>
          )}

          {file && (
            <div className="text-sm text-gray-500">
              Selected file: {file.name} ({(file.size / 1024 / 1024).toFixed(2)} MB)
            </div>
          )}

          {uploading && (
            <Progress value={uploadProgress} className="w-full max-w-sm" />
          )}

          <Button
            onClick={handleUpload}
            disabled={!file || uploading}
            className="w-full max-w-sm"
          >
            {uploading ? 'Uploading...' : 'Upload Package'}
          </Button>
        </div>
      </Card>

      <AlertDialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Upload Successful</AlertDialogTitle>
            <AlertDialogDescription>
              Your package has been successfully uploaded to the registry.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <Button onClick={() => setShowSuccessDialog(false)}>Close</Button>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}

export default withUser({
  whenUnauthedAfterInit: AuthAction.REDIRECT_TO_LOGIN,
  whenUnauthedBeforeInit: AuthAction.SHOW_LOADER,
})(PublishPage)

================
File: registry/public/between-cards.svg
================
<svg width="10" height="22" viewBox="0 0 10 22" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fillRule="evenodd" clipRule="evenodd" d="M-368 -61C-368 -74.2548 -357.255 -85 -344 -85H-24C-10.7451 -85 0 -74.2548 0 -61V0C0 2.76142 2.23858 5 5 5C7.76142 5 10 2.76142 10 0V-61C10 -74.2548 20.7452 -85 34 -85H354C367.255 -85 378 -74.2548 378 -61V0C378 2.76142 380.239 5 383 5C385.761 5 388 2.76142 388 0V-61C388 -74.2548 398.745 -85 412 -85H732C745.255 -85 756 -74.2548 756 -61V82C756 95.2548 745.255 106 732 106H412C398.745 106 388 95.2548 388 82V22C388 19.2386 385.761 17 383 17C380.239 17 378 19.2386 378 22V82C378 95.2548 367.255 106 354 106H34C20.7451 106 10 95.2548 10 82V22C10 19.2386 7.76142 17 5 17C2.23858 17 0 19.2386 0 22V82C0 95.2548 -10.7452 106 -24 106H-344C-357.255 106 -368 95.2548 -368 82V-61Z" fill="currentColor"/>
</svg>

================
File: registry/public/between-links.svg
================
<svg width="34" height="46" viewBox="0 0 34 46" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fillRule="evenodd" clipRule="evenodd" d="M-263 23C-263 11.402 -253.598 2 -242 2H-151C-143.57 2 -137.041 5.85877 -133.308 11.6816C-131.429 14.6132 -128.482 17 -125 17V17C-121.518 17 -118.571 14.6132 -116.692 11.6816C-112.959 5.85877 -106.43 2 -99 2H-9C-1.56987 2 4.959 5.85878 8.6919 11.6816C10.5713 14.6132 13.5177 17 17 17V17C20.4822 17 23.4287 14.6132 25.3081 11.6816C29.041 5.85877 35.5699 2 43 2H109C116.43 2 122.959 5.85877 126.692 11.6816C128.571 14.6132 131.518 17 135 17V17C138.482 17 141.429 14.6132 143.308 11.6816C147.041 5.85877 153.57 2 161 2H337C344.43 2 350.959 5.85877 354.692 11.6816C356.571 14.6132 359.518 17 363 17V17C366.482 17 369.429 14.6132 371.308 11.6816C375.041 5.85877 381.57 2 389 2H456C467.598 2 477 11.402 477 23C477 34.598 467.598 44 456 44H389C381.57 44 375.041 40.1412 371.308 34.3184C369.429 31.3868 366.482 29 363 29V29C359.518 29 356.571 31.3868 354.692 34.3184C350.959 40.1412 344.43 44 337 44H161C153.57 44 147.041 40.1412 143.308 34.3184C141.429 31.3868 138.482 29 135 29V29C131.518 29 128.571 31.3868 126.692 34.3184C122.959 40.1412 116.43 44 109 44H43C35.5699 44 29.041 40.1412 25.3081 34.3184C23.4287 31.3868 20.4823 29 17 29V29C13.5177 29 10.5713 31.3868 8.69191 34.3184C4.959 40.1412 -1.56987 44 -9 44H-99C-106.43 44 -112.959 40.1412 -116.692 34.3184C-118.571 31.3868 -121.518 29 -125 29V29C-128.482 29 -131.429 31.3868 -133.308 34.3184C-137.041 40.1412 -143.57 44 -151 44H-242C-253.598 44 -263 34.598 -263 23Z" fill="currentColor"/>
</svg>

================
File: registry/public/vercel.svg
================
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>

================
File: registry/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: registry/utils/getAbsoluteURL.js
================
/* globals window */

const getAbsoluteURL = (url, req = null) => {
  let host
  if (req) {
    host = req.headers.host
  } else {
    if (typeof window === 'undefined') {
      throw new Error(
        'The "req" parameter must be provided if on the server side.'
      )
    }
    host = window.location.host
  }
  const isLocalhost = host.indexOf('localhost') === 0
  const protocol = isLocalhost ? 'http' : 'https'
  return `${protocol}://${host}${url}`
}

export default getAbsoluteURL

================
File: registry/utils/initAdmin.ts
================
import { getApps, initializeApp, cert } from 'firebase-admin/app';

export function initAdmin() {
  const apps = getApps()
  
  if (!apps.length) {
    initializeApp({
      credential: cert({
        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        privateKey: process.env.FIREBASE_PRIVATE_KEY
          ? JSON.parse(process.env.FIREBASE_PRIVATE_KEY)
          : undefined,
      }),
      databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,
    })
  }
}

================
File: registry/utils/initAuth.js
================
/* globals window */
import { initializeApp } from 'firebase/app'
import { init } from 'next-firebase-auth'
import absoluteUrl from 'next-absolute-url'

const TWELVE_DAYS_IN_MS = 12 * 60 * 60 * 24 * 1000

const initAuth = () => {


  // Initialize Firebase.
  const firebaseClientInitConfig = {
    apiKey: process.env.NEXT_PUBLIC_FIREBASE_PUBLIC_API_KEY,
    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
    databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,
    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET
  }
  initializeApp(firebaseClientInitConfig)

  // Initialize next-firebase-auth.
  init({
    debug: true,

    // This demonstrates setting a dynamic destination URL when
    // redirecting from app pages. Alternatively, you can simply
    // specify `authPageURL: '/auth-ssr'`.
    authPageURL: ({ ctx }) => {
      const isServerSide = typeof window === 'undefined'
      const origin = isServerSide
        ? absoluteUrl(ctx.req).origin
        : window.location.origin
      const destPath =
        typeof window === 'undefined' ? ctx.resolvedUrl : window.location.href
      const destURL = new URL(destPath, origin)
      return `/auth-ssr?destination=${encodeURIComponent(destURL)}`
    },

    // This demonstrates setting a dynamic destination URL when
    // redirecting from auth pages. Alternatively, you can simply
    // specify `appPageURL: '/'`.
    appPageURL: ({ ctx }) => {
      const isServerSide = typeof window === 'undefined'
      const origin = isServerSide
        ? absoluteUrl(ctx.req).origin
        : window.location.origin
      const params = isServerSide
        ? new URL(ctx.req.url, origin).searchParams
        : new URLSearchParams(window.location.search)
      const destinationParamVal = params.get('destination')
        ? decodeURIComponent(params.get('destination'))
        : undefined

      // By default, go to the index page if the destination URL
      // is invalid or unspecified.
      let destURL = '/'
      if (destinationParamVal) {
        // Verify the redirect URL host is allowed.
        // https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/04-Testing_for_Client_Side_URL_Redirect
        const allowedHosts = [
          'localhost:3000',
          'nfa-example.vercel.app',
          'nfa-example-git-v1x-gladly-team.vercel.app',
        ]
        const allowed =
          allowedHosts.indexOf(new URL(destinationParamVal).host) > (-1)
        if (allowed) {
          destURL = destinationParamVal
        } else {
          // eslint-disable-next-line no-console
          console.warn(
            `Redirect destination host must be one of ${allowedHosts.join(
              ', '
            )}.`
          )
        }
      }
      return destURL
    },
    loginAPIEndpoint: '/api/login',
    logoutAPIEndpoint: '/api/logout',
    firebaseAdminInitConfig: {
      credential: {
        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        // Using JSON to handle newline problems when storing the
        // key as a secret in Vercel. See:
        // https://github.com/vercel/vercel/issues/749#issuecomment-707515089
        privateKey: process.env.FIREBASE_PRIVATE_KEY,
      },
      databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,
    },
    firebaseClientInitConfig,
    cookies: {
      name: 'ExampleApp',
      keys: [
        process.env.COOKIE_SECRET_CURRENT,
        process.env.COOKIE_SECRET_PREVIOUS,
      ],
      httpOnly: true,
      maxAge: TWELVE_DAYS_IN_MS,
      overwrite: true,
      path: '/',
      sameSite: 'lax',
      secure: process.env.NEXT_PUBLIC_COOKIE_SECURE === 'true',
      signed: true,
    },
  })
}



export default initAuth

================
File: registry/.dockerignore
================
.git
.next
node_modules
README.md
.env
.env.local
.dockerignore
Dockerfile

================
File: registry/.eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: registry/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: registry/.prettierrc
================
{}

================
File: registry/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: registry/Dockerfile
================
# Use Node 18
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy all files
COPY . .

# # Build app
# RUN npm run build

# Expose port
EXPOSE 3000

# Start the app
CMD ["npm", "run", "dev"]

================
File: registry/next.config.js
================
const config = {}

// eslint-disable-next-line import/no-extraneous-dependencies, @typescript-eslint/no-var-requires
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

module.exports = withBundleAnalyzer(config)

================
File: registry/next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: registry/package.json
================
{
  "name": "registry",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.5",
    "@radix-ui/react-dialog": "^1.1.5",
    "@radix-ui/react-dropdown-menu": "^2.1.5",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.2",
    "@shadcn/ui": "^0.0.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "crypto": "^1.0.1",
    "firebase": "9.17.1",
    "firebase-admin": "^11.9.0",
    "firebaseui": "^6.1.0",
    "js-yaml": "^4.1.0",
    "jszip": "^3.10.1",
    "lucide-react": "^0.474.0",
    "next": "13.4.9",
    "next-absolute-url": "^1.2.2",
    "next-firebase-auth": "1.0.2",
    "node-fetch": "^3.3.2",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@next/bundle-analyzer": "^13.4.9",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^20.4.1",
    "@types/react": "^18.2.14",
    "autoprefixer": "^10.4.20",
    "eslint-config-next": "^13.4.9",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.1.6"
  }
}

================
File: registry/postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: registry/README.md
================
# Next.js on Firebase App Hosting

This is an example [Next.js](https://nextjs.org/) project to demonstrate SSG,
SSR, and ISR on [Firebase App Hosting](https://firebase.google.com/docs/app-hosting).

## Getting Started

Run the development server:

```bash
npm run dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Deploy to Firebase App Hosting

### 1. Get your project set up on GitHub

[Create a new GitHub repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository) and push the newly-initialized sample code to it:

<pre>
git remote add origin https://github.com/<b>$YOUR_NEW_REPOSITORY</b>.git
git branch -M main
git push -u origin main
</pre>

### 2. Set up Firebase App Hosting

Continue to [Get started with Firebase App Hosting](https://firebase.google.com/docs/app-hosting/get-started#step-1:).

================
File: registry/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ["class"],
    content: [
		'./pages/**/*.{js,ts,jsx,tsx}',
		'./components/**/*.{js,ts,jsx,tsx}',
		'./utils/**/*.{js,ts,jsx,tsx}'
	  ]
,	
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}

================
File: registry/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "**/*.jsx",
    "**/*.js",
    ".next/types/**/*.ts"
, "pages/auth-ssr.tsz", "pages/auth.tsz"  ],
  "exclude": [
    "node_modules"
  ]
}

================
File: studio/public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: studio/src/components/giml/index.tsx
================
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileCode, MessageCircle } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import React, { ReactElement } from 'react';
import { useChatStore } from "@/stores/chatStore";

// Define types for GIML elements

// First, add these interfaces after the existing ones
interface GimlElement extends ReactElement {
  type: string;
  props: {
    id?: string;
    file?: string;
    description?: string;
    value?: string;  // Added value property
    children?: React.ReactNode;
  };
}


interface CodeDiffProps {
  children: GimlElement[];
  file: string;
}

const CodeDiff = ({ children, file }: CodeDiffProps) => {
  const original = children.find(child => 
    child.type === 'original'
  )?.props?.children?.toString() || '';

  const updated = children.find(child => 
    child.type === 'updated'
  )?.props?.children?.toString() || '';

  return (
    <Card className="my-1.5">
      <CardContent className="p-2">
        <div className="flex items-start gap-2">
          <FileCode className="w-4 h-4 mt-1 text-blue-500" />
          <div className="flex-1">
            <p className="text-[12px] font-medium text-gray-700">{file}</p>
            <div className="mt-2 space-y-3 flex-1">
              <div>
                <p className="text-[11px] font-medium text-red-600 mb-1">Original:</p>
                <pre className="bg-gray-50 p-2 rounded text-[11px] text-gray-950 overflow-x-auto">
                  <div>{original}</div>
                </pre>
              </div>
              <div>
                <p className="text-[11px] font-medium text-green-600 mb-1">Updated:</p>
                <pre className="bg-gray-50 p-2 rounded text-[11px] text-gray-950 overflow-x-auto">
                  {updated}
                </pre>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

interface SelectProps {
  children: GimlElement[];
  isLastMessage?: boolean;
  onSelect?: (id: string, value: string) => void;
}

interface SelectItem {
  description?: string;
  text: string;
}

const Select = ({ children, isLastMessage = false, onSelect }: SelectProps) => {
  const sendResponse = useChatStore(state => state.sendResponse);


  const labelElement = children.find(child => 
    child.type === 'label'
  ) as GimlElement;

  const selectElement = children.find(child => 
    child.type === 'select'
  ) as GimlElement;

  if (!labelElement || !selectElement) return null;

  const labelText = labelElement.props.children?.toString() || '';
  const selectId = selectElement.props.id || '';
  const items = (selectElement.props.children as GimlElement[]).map((item): SelectItem => ({
    description: item.props.description,
    text: item.props.children?.toString() || ''
  }));

  return (
    <Card className={"my-1.5" + (isLastMessage ? " bg-gray-50" : "")} data-active={isLastMessage}>
      <CardContent className="p-2">
        <div className="flex items-start gap-2">
          <MessageCircle className="w-4 h-4 mt-1 text-blue-500" />
          <div className="flex-1">
            <p className="text-[12px] font-medium text-gray-700">{labelText}</p>
            <div className="mt-2 flex flex-wrap gap-1.5">
              {items.map((item, index) => {
                const button = (
                  <Button
                  key={index}
                  variant="outline"
                  className={"px-3 h-7 min-w-[60px] text-[11px] " + 
                    (!isLastMessage ? "opacity-50 cursor-not-allowed" : "cursor-pointer")}
                  onClick={() => isLastMessage && sendResponse(selectId, item.text)}
                  disabled={!isLastMessage}
                >
                  <div className="font-medium">{item.text}</div>
                </Button>
        
                );

                if (item.description) {
                  return (
                    <TooltipProvider key={index}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          {button}
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="text-sm">{item.description}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  );
                }

                return button;
              })}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// The rest of your code remains the same
interface ResponseProps {
  children: GimlElement[];
}

interface ResponseItem {
  id: string;
  value: string;
}

const Response = ({ children }: ResponseProps) => {
  const responses = children.find(child => 
    child.type === 'responses'
  ) as GimlElement;

  if (!responses) return null;

  const responseItems = (responses.props.children as GimlElement[]).map((item): ResponseItem => ({
    id: item.props.id || '',
    value: item.props.value || ''
  }));

  return (
    <Card className="my-1.5">
      <CardContent className="p-2">
        <div className="flex items-start gap-2">
          <MessageCircle className="w-4 h-4 mt-1 text-green-500" />
          <div className="flex-1">
            <p className="text-[12px] font-medium text-gray-700 mb-2">Response</p>
            <div className="space-y-2">
              {responseItems.map((item, index) => {
                let displayValue = item.value;
                try {
                  // Try to parse JSON if it's a JSON string
                  const parsedValue = JSON.parse(item.value);
                  displayValue = JSON.stringify(parsedValue, null, 2);
                } catch {
                  // If not JSON, use as is
                  displayValue = item.value;
                }

                return (
                  <div key={index} className="bg-gray-50 rounded p-1">
                    <div className="text-[11px] text-gray-500 mb-1">ID: {item.id}</div>
                    <pre className="text-[11px] text-gray-950 bg-gray-50 overflow-x-auto p-0">
                      {displayValue}
                    </pre>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// Then modify parseGiml to include response handling
export const parseGiml = (content: React.ReactNode[], onSelect?: (id: string, value: string) => void, isLastMessage?: boolean) => {
  if (!Array.isArray(content)) return content;

  const firstElement = content[0] as GimlElement;
  if (!firstElement || typeof firstElement !== 'object') return content;

  // Check for responses element
  if (content.some(child => (child as GimlElement).type === 'responses')) {
    return (
      <Response
        children={content as GimlElement[]}
      />
    );
  }

  // Check for select element
  if (content.some(child => (child as GimlElement).type === 'select')) {
    return (
      <Select
        children={content as GimlElement[]}
        onSelect={onSelect}
        isLastMessage={isLastMessage}
      />
    );
  }

  // Check for code element
  if (firstElement.props?.file) {
    return (
      <CodeDiff
        children={firstElement.props.children as GimlElement[]}
        file={firstElement.props.file}
      />
    );
  }

  return content;
};

================
File: studio/src/components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: studio/src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border border-gray-200 px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-gray-950 [&>svg~*]:pl-7 dark:border-gray-800 dark:[&>svg]:text-gray-50",
  {
    variants: {
      variant: {
        default: "bg-white text-gray-950 dark:bg-gray-950 dark:text-gray-50",
        destructive:
          "border-red-500/50 text-red-500 dark:border-red-500 [&>svg]:text-red-500 dark:border-red-900/50 dark:text-red-900 dark:dark:border-red-900 dark:[&>svg]:text-red-900",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: studio/src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: studio/src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border border-gray-200 px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 dark:border-gray-800 dark:focus:ring-gray-300",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-gray-900 text-gray-50 shadow hover:bg-gray-900/80 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/80",
        secondary:
          "border-transparent bg-gray-100 text-gray-900 hover:bg-gray-100/80 dark:bg-gray-800 dark:text-gray-50 dark:hover:bg-gray-800/80",
        destructive:
          "border-transparent bg-red-500 text-gray-50 shadow hover:bg-red-500/80 dark:bg-red-900 dark:text-gray-50 dark:hover:bg-red-900/80",
        outline: "text-gray-950 dark:text-gray-50",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: studio/src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-gray-300",
  {
    variants: {
      variant: {
        default:
          "bg-gray-900 text-gray-50 shadow hover:bg-gray-900/90 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90",
        destructive:
          "bg-red-500 text-gray-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-gray-50 dark:hover:bg-red-900/90",
        outline:
          "border border-gray-200 bg-white shadow-sm hover:bg-gray-100 hover:text-gray-900 dark:border-gray-800 dark:bg-gray-950 dark:hover:bg-gray-800 dark:hover:text-gray-50",
        secondary:
          "bg-gray-100 text-gray-900 shadow-sm hover:bg-gray-100/80 dark:bg-gray-800 dark:text-gray-50 dark:hover:bg-gray-800/80",
        ghost: "hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-gray-800 dark:hover:text-gray-50",
        link: "text-gray-900 underline-offset-4 hover:underline dark:text-gray-50",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: studio/src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border border-gray-200 bg-white text-gray-950 shadow dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: studio/src/components/ui/checkbox.tsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-gray-200 border-gray-900 shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-gray-900 data-[state=checked]:text-gray-50 dark:border-gray-800 dark:border-gray-50 dark:focus-visible:ring-gray-300 dark:data-[state=checked]:bg-gray-50 dark:data-[state=checked]:text-gray-900",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: studio/src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: studio/src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[state=open]:bg-gray-100 data-[state=open]:text-gray-900 dark:focus:bg-gray-800 dark:focus:text-gray-50 dark:data-[state=open]:bg-gray-800 dark:data-[state=open]:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-gray-950 dark:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-200 dark:bg-gray-800", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-gray-500 dark:text-gray-400",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: studio/src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-gray-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg dark:border-gray-800 dark:bg-gray-950",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-gray-100 data-[state=open]:text-gray-500 dark:ring-offset-gray-950 dark:focus:ring-gray-300 dark:data-[state=open]:bg-gray-800 dark:data-[state=open]:text-gray-400">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: studio/src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 data-[state=open]:bg-gray-100 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus:bg-gray-800 dark:data-[state=open]:bg-gray-800",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-950 shadow-md dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-100 dark:bg-gray-800", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: studio/src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-red-500 dark:text-red-900", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-gray-500 dark:text-gray-400", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-red-500 dark:text-red-900", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: studio/src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-gray-200 bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-gray-950 placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:file:text-gray-50 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: studio/src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: studio/src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-gray-200 after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90 dark:bg-gray-800 dark:focus-visible:ring-gray-300",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border border-gray-200 bg-gray-200 dark:border-gray-800 dark:bg-gray-800">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: studio/src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-gray-200 dark:bg-gray-800" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: studio/src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-gray-200 bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-1 focus:ring-gray-950 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 dark:border-gray-800 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus:ring-gray-300",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white text-gray-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-gray-800 dark:focus:text-gray-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-100 dark:bg-gray-800", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: studio/src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-gray-200 dark:bg-gray-800",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: studio/src/components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-white p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out dark:bg-gray-950",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-gray-100 dark:ring-offset-gray-950 dark:focus:ring-gray-300 dark:data-[state=open]:bg-gray-800">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-gray-950 dark:text-gray-50", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: studio/src/components/ui/sidebar.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden text-sidebar-foreground md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-white dark:bg-gray-950",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-white shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring dark:bg-gray-950",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-white shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))] dark:bg-gray-950",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: studio/src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-gray-900/10 dark:bg-gray-50/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: studio/src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-gray-100/50 font-medium [&>tr]:last:border-b-0 dark:bg-gray-800/50",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-gray-100 dark:hover:bg-gray-800/50 dark:data-[state=selected]:bg-gray-800",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-gray-500 [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] dark:text-gray-400",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-gray-500 dark:text-gray-400", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: studio/src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-gray-100 p-1 text-gray-500 dark:bg-gray-800 dark:text-gray-400",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-gray-950 data-[state=active]:shadow dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300 dark:data-[state=active]:bg-gray-950 dark:data-[state=active]:text-gray-50",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: studio/src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-gray-200 bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-gray-800 dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-300",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: studio/src/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border border-gray-200 p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full dark:border-gray-800",
  {
    variants: {
      variant: {
        default: "border bg-white text-gray-950 dark:bg-gray-950 dark:text-gray-50",
        destructive:
          "destructive group border-red-500 bg-red-500 text-gray-50 dark:border-red-900 dark:bg-red-900 dark:text-gray-50",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border border-gray-200 bg-transparent px-3 text-sm font-medium transition-colors hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-gray-100/40 group-[.destructive]:hover:border-red-500/30 group-[.destructive]:hover:bg-red-500 group-[.destructive]:hover:text-gray-50 group-[.destructive]:focus:ring-red-500 dark:border-gray-800 dark:hover:bg-gray-800 dark:focus:ring-gray-300 dark:group-[.destructive]:border-gray-800/40 dark:group-[.destructive]:hover:border-red-900/30 dark:group-[.destructive]:hover:bg-red-900 dark:group-[.destructive]:hover:text-gray-50 dark:group-[.destructive]:focus:ring-red-900",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-gray-950/50 opacity-0 transition-opacity hover:text-gray-950 focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 dark:text-gray-50/50 dark:hover:text-gray-50",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: studio/src/components/ui/toaster.tsx
================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: studio/src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-gray-50 animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:bg-gray-50 dark:text-gray-900",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: studio/src/components/AuthPage.tsx
================
import { useState } from 'react';
import { toast } from '@/hooks/use-toast';
import { ENGINE_BASE_URL, fetchWithAuth, setAuthCredentials, setEngineUrl } from '@/config';
import { ChevronDown, ChevronUp } from 'lucide-react';

interface AuthPageProps {
  onAuthSuccess: () => void;
}

export const AuthPage = ({ onAuthSuccess }: AuthPageProps) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [engineUrl, setEngineUrlState] = useState(ENGINE_BASE_URL);

  const testAndSaveCredentials = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // Test the credentials with a simple API call
      const headers = {
        'Authorization': `Basic ${btoa(`${username}:${password}`)}`
      };
      await fetchWithAuth(`${engineUrl}/module/project/default/list`, {
        skipAuth: true, // Skip the default auth handling
        headers: headers
      });

      // If the call succeeds, save the credentials
      setAuthCredentials(username, password);
      toast({
        title: "Success",
        description: "Authentication credentials saved"
      });
      onAuthSuccess();
    } catch (error) {
      toast({
        title: "Error",
        description: "Invalid credentials",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <img
            className="mx-auto h-20 w-auto"
            src="/logo.png"
            alt="Logo"
          />
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            Genbase Studio
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Please enter your credentials to continue
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={testAndSaveCredentials}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="username" className="sr-only">
                Username
              </label>
              <input
                id="username"
                name="username"
                type="text"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div 
            className="flex items-center justify-between text-sm cursor-pointer py-2" 
            onClick={() => setShowAdvanced(!showAdvanced)}
          >
            <span className="text-gray-600">Advanced Settings</span>
            {showAdvanced ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
          </div>

          {showAdvanced && (
            <div className="rounded-md shadow-sm -space-y-px">
              <div>
                <label htmlFor="engine-url" className="sr-only">
                  Engine URL
                </label>
                <input
                  id="engine-url"
                  type="text"
                  className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                  placeholder="Engine URL"
                  value={engineUrl}
                  onChange={(e) => {
                    setEngineUrlState(e.target.value);
                    setEngineUrl(e.target.value);
                  }}
                />
              </div>
            </div>
          )}

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-neutral-700 hover:bg-neutral-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {isLoading ? 'Authenticating...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

================
File: studio/src/components/Chat.tsx
================
import { useRef, useEffect } from 'react';
import { Terminal, ChevronRight, CheckCircle, XCircle, CurlyBraces } from 'lucide-react';
import { ScrollArea } from "@/components/ui/scroll-area";
import Markdown from 'markdown-to-jsx';
import ReactJson from 'react-json-view';
import { Card, CardContent } from "@/components/ui/card";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { useChatPromptStore } from '../stores/chatPromptStore';
import { parseGiml } from './giml';

// Types
interface Function {
  name: string;
  arguments: string;
}

interface ToolCall {
  id: string;
  type?: string;
  function: Function;
}

interface ToolResult {
  action: string;
  result: any;
}

interface Message {
  role: 'user' | 'assistant' | 'system' | 'tool';  // Added 'tool'
  content: string | null;
  tool_calls?: ToolCall[];
  tool_results?: ToolResult[];
  name?: string;  // Added optional name property
  tool_call_id?: string;  // Might also be useful for tool messages
}


interface ChatContainerProps {
  messages: Message[];
  onSend?: (text: string) => void;
}

// Tool Call Component
const ToolCall = ({ toolCall }: { toolCall: ToolCall }) => {
  const args = (() => {
    try {
      return JSON.parse(toolCall.function.arguments);
    } catch (e) {
      console.error('Failed to parse tool call arguments:', e);
      return {};
    }
  })();
  



  return (
    <Card className="mt-1.5">
      <CardContent className="p-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-1.5 text-blue-600">
            <Terminal className="w-3 h-3" />
            <span className="text-xs font-medium">{toolCall.function.name}</span>
          </div>
          <div className="text-[10px] text-gray-500">ID: {toolCall.id}</div>
        </div>
        <Collapsible>
          <CollapsibleTrigger className="flex items-center gap-1 text-xs text-blue-600/70 hover:text-blue-600 mt-1.5">
            <ChevronRight className="w-3 h-3" />
            Arguments
          </CollapsibleTrigger>
          <CollapsibleContent>
            <div className="mt-1 p-1.5 bg-slate-50 rounded-sm max-w-full">
              <ReactJson
                src={args}
                theme="bright:inverted"
                name={false}
                displayDataTypes={false}
                enableClipboard={false}
                style={{
                  fontSize: '0.75rem',
                  fontFamily: 'monospace',
                  backgroundColor: 'transparent',
                  color: '#374151'
                }}
                iconStyle="circle"
                displayObjectSize={false}
                quotesOnKeys={false}
                indentWidth={6}
              />
            </div>
          </CollapsibleContent>
        </Collapsible>
      </CardContent>
    </Card>
  );
};

// Tool Result Component
const ToolResult = ({ result }: { result: ToolResult }) => {
  const resultData = (() => {
    if (typeof result.result === 'string') {
      try {
        return JSON.parse(result.result);
      } catch (e) {
        return { value: result.result };
      }
    }
    return result.result || {};
  })();
  
  const isSuccess = resultData?.status === 'success';
  const hasStatus = typeof resultData?.status === 'string';
  
  return (
    <Card className={`mt-1.5 ${
      hasStatus 
        ? isSuccess 
          ? 'bg-green-50/50' 
          : 'bg-red-50/50'
        : 'bg-blue-50/50'
    }`}>
      <CardContent className="p-2">
        <div className="flex items-center gap-1.5">
          {hasStatus ? (
            isSuccess ? (
              <CheckCircle className="w-3 h-3 text-green-600" />
            ) : (
              <XCircle className="w-3 h-3 text-red-600" />
            )
          ) : (
            <Terminal className="w-3 h-3 text-blue-600" />
          )}
          <span className="text-xs font-medium">
            {result.action}
          </span>
        </div>

        {result.result?.message && (
          <p className="text-xs mt-1.5 text-gray-600">
            {result.result.message}
          </p>
        )}
        
        <Collapsible>
          <CollapsibleTrigger className="flex items-center gap-1 text-xs text-gray-500/70 hover:text-gray-500 mt-1.5">
            <CurlyBraces className="w-3 h-3" />
            Details
          </CollapsibleTrigger>
          <CollapsibleContent>
            <div className="mt-1 p-1.5 bg-slate-50 rounded-sm max-w-full">
              <ReactJson
                src={resultData}
                theme="bright:inverted"
                name={false}
                displayDataTypes={false}
                enableClipboard={false}
                style={{
                  fontSize: '0.75rem',
                  fontFamily: 'monospace',
                  backgroundColor: 'transparent',
                  color: '#374151'
                }}
                iconStyle="circle"
                displayObjectSize={false}
                quotesOnKeys={false}
                indentWidth={6}
              />
            </div>
          </CollapsibleContent>
        </Collapsible>
      </CardContent>
    </Card>
  );
};

// Main ChatContainer Component
const ChatContainer = ({ messages }: ChatContainerProps) => {
  const scrollRef = useRef<HTMLDivElement>(null);
  const { setActivePromptIndex } = useChatPromptStore();


  // Update active prompt index whenever messages change
  useEffect(() => {
    let lastIndex = -1;
    for (let i = messages.length - 1; i >= 0; i--) {
      if (messages[i].role === 'assistant' && messages[i].content?.includes('<giml>')) {
        lastIndex = i;
        break;
      }
    }
    setActivePromptIndex(lastIndex);
  }, [messages, setActivePromptIndex]);

  // Scroll to bottom when messages change
  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Markdown components configuration
  const markdownComponents = {
    pre: ({ children, ...props }: React.ComponentPropsWithoutRef<'pre'>) => (
      <pre className="p-2 rounded-md" {...props}>{children}</pre>
    ),
    code: ({ children, ...props }: React.ComponentPropsWithoutRef<'code'>) => (
      <code className="bg-slate-50 px-1 rounded" {...props}>{children}</code>
    )
  };



  const MessageHeader = ({ role, name }: { role: string, name?: string }) => {
    if (role === 'tool') {
      return (
        <div className="flex items-center gap-1.5 text-[11px] text-gray-500 mb-0.5 px-2">
          <Terminal className="w-3 h-3" />
          <span>Tool Response: {name}</span>
        </div>
      );
    }
  
    return (
      <div className="text-[11px] text-gray-500 mb-0.5 px-2">
        {role === 'assistant' ? 'Agent' : 'User'}
      </div>
    );
  };
  
  




  return (
    <ScrollArea className="flex-1 overflow-x-hidden">
      <div className="max-w-full">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`py-1.5 px-2 ${
              message.role === 'assistant' ? 'bg-white' : ''
            }`}
          >
            {message.role !== 'system' && (
              <MessageHeader role={message.role} name={message.name} />
            )}
            
            <div className="text-[12px] px-2 prose prose-sm max-w-none">
              {/* Tool calls */}
              {message.tool_calls?.map((toolCall, idx) => (
                <ToolCall key={idx} toolCall={toolCall} />
              ))}
              
              {/* Tool results */}
              {message.role === 'tool' ? (
                <Card className="mt-1.5 bg-gray-50/50">
                  <CardContent className="p-2">
                    <div className="flex items-start gap-2">
                      <Terminal className="w-3 h-3 mt-1 text-gray-600" />
                      <div className="flex-1">
                        {(() => {
                          try {
                            const content = JSON.parse(message.content || '');
                            return (
                              <ReactJson
                                src={content}
                                theme="bright:inverted"
                                name={false}
                                displayDataTypes={false}
                                enableClipboard={false}
                                style={{
                                  fontSize: '0.75rem',
                                  backgroundColor: 'transparent',
                                  color: '#374151'
                                }}
                                iconStyle="circle"
                                displayObjectSize={false}
                                quotesOnKeys={false}
                                indentWidth={6}
                              />
                            );
                          } catch {
                            return (
                              <div className="text-gray-600">
                                {message.content}
                              </div>
                            );
                          }
                        })()}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                // Regular content
                message.content !== null &&  (
                  <Markdown
                    options={{
                      overrides: {
                        ...markdownComponents,
                        giml: {
                          component: ({ children }) => {
                            const { activePromptIndex } = useChatPromptStore();
                            const isLast = index === activePromptIndex;
                            return parseGiml(children,()=>{}, isLast);
                          }
                        }
                      }
                    }}
                  >
                    {message.content}
                  </Markdown>
                )
              )}
              
              {/* Tool results from system messages */}
              {message.tool_results?.map((result, idx) => (
                <ToolResult key={idx} result={result} />
              ))}
            </div>
          </div>
        ))}
        <div ref={scrollRef} />
      </div>
    </ScrollArea>
  );
  
};

export type { Message, ToolCall, ToolResult };
export { ChatContainer };

================
File: studio/src/components/CodeDiffViewer.tsx
================
import React from 'react';
import ReactDiffViewer, { DiffMethod } from 'react-diff-viewer-continued';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { ChevronRight, Expand } from 'lucide-react';

interface EditBlock {
  filePath: string;
  original: string;
  updated: string;
}

interface CodeDiffViewerProps {
  content: string;
}

const parseEditXml = (xmlContent: string): EditBlock[] => {
  const editBlocks: EditBlock[] = [];
  const parser = new DOMParser();

  // Wrap in root element to parse multiple edit_file blocks
  const wrappedXml = `<edits>${xmlContent}</edits>`;
  const xmlDoc = parser.parseFromString(wrappedXml, 'text/xml');

  const editFiles = xmlDoc.getElementsByTagName('edit_file');

  for (let i = 0; i < editFiles.length; i++) {
    const editFile = editFiles[i];
    const filePath = editFile.getAttribute('file_path') || '';
    const original = editFile.getElementsByTagName('original')[0]?.textContent || '';
    const updated = editFile.getElementsByTagName('updated')[0]?.textContent || '';

    editBlocks.push({
      filePath,
      original,
      updated
    });
  }

  return editBlocks;
};

const CodeDiffViewer: React.FC<CodeDiffViewerProps> = ({ content }) => {
  try {
    const editBlocks = parseEditXml(content);

    return (
      <div className="space-y-1 text-[15px] leading-5">
        {editBlocks.map((block, index) => (
          <Collapsible key={index}>
            <div className="border rounded-lg overflow-hidden">
              <CollapsibleTrigger className="w-full">
                <div className="bg-gray-100 hover:bg-gray-200 transition-colors px-2 py-0.5 border-b flex items-center justify-between">
                  <span className="text-[11px] font-medium text-gray-700">{block.filePath}</span>
                  <div className="flex items-center gap-2">
                    <Dialog>
                      <DialogTrigger asChild>
                        <button className="hover:bg-gray-300/50 p-0.5 rounded">
                          <Expand className="w-3 h-3 text-gray-500" />
                        </button>
                      </DialogTrigger>
                      <DialogContent className="max-w-[90vw] max-h-[90vh] overflow-hidden flex flex-col">
                        <div className="text-sm font-medium mb-4 border-b pb-2">
                          {block.filePath}
                        </div>
                        <div className="overflow-auto flex-1 p-4">
                        <ReactDiffViewer
                          oldValue={block.original}
                          newValue={block.updated}
                          splitView={true}
                          hideLineNumbers={true}
                          showDiffOnly={true}
                          useDarkTheme={false}
                          disableWordDiff={true}
                          extraLinesSurroundingDiff={0}
                          compareMethod={DiffMethod.LINES}
                          styles={{
                            variables: {
                              light: {
                                diffViewerBackground: '#fff',
                                diffViewerColor: '#212529',
                                addedBackground: '#e6ffed',
                                addedColor: '#24292e',
                                removedBackground: '#ffeef0',
                                removedColor: '#24292e',
                              }
                            },
                            diffContainer: {
                              width: '100%'
                            },
                            line: {
                              padding: '4px 2px',
                              fontSize: '14px',
                              lineHeight: '1.3'
                            },
                            gutter: {
                              padding: '0 10px'
                            },
                            content: {
                              padding: '0 10px'
                            }
                          }}
                        />
                           </div> 
                      </DialogContent>
                    </Dialog>
                    <ChevronRight className="w-3 h-3 text-gray-500" />
                  </div>
                </div>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <div className="text-[11px] leading-5 max-w-[800px] mx-auto">
                  <div className="overflow-hidden">
                    <ReactDiffViewer
                      oldValue={block.original}
                      newValue={block.updated}
                      splitView={true}
                 
                      hideLineNumbers={true}
                      showDiffOnly={true}
                      useDarkTheme={false}
                      disableWordDiff={true}
                      extraLinesSurroundingDiff={0}
                      compareMethod={DiffMethod.LINES}

                      styles={{
                        variables: {
                          light: {
                            diffViewerBackground: '#fff',
                            diffViewerColor: '#212529',
                            addedBackground: '#e6ffed',
                            addedColor: '#24292e',
                            removedBackground: '#ffeef0',
                            removedColor: '#24292e',
                          }
                        },
                        diffContainer: {
                          width: '100%',
                     
                        },
                        line: {
                          padding: 0,
                          fontSize: '15px',
                          lineHeight: '10px'
                        },
                        gutter: {
                          minWidth: '10px',
                          padding: '0 4px'
                        },
                        content: {
                          padding: '0 4px',
                          fontSize: '15px',
                          lineHeight: '10px'
                          
                        }

                      }}
                    />
                  </div>
                </div>
              </CollapsibleContent>
            </div>
          </Collapsible>
        ))}
      </div>
    );
  } catch (error) {
    console.error('Failed to parse edit XML:', error);
    // If XML parsing fails, return the original content
    return <pre className="whitespace-pre-wrap text-[11px]">{content}</pre>;
  }
};

export default CodeDiffViewer;

================
File: studio/src/components/CodeEditor.tsx
================
import React from 'react';
import Editor from '@monaco-editor/react';

interface CodeEditorProps {
  language?: string;
  value?: string;
  onChange?: (value: string) => void;
}

const CodeEditor: React.FC<CodeEditorProps> = ({ 
  language = 'javascript',
  value = '// Start coding here',
  onChange 
}) => {
  const handleEditorChange = (value: string | undefined) => {
    if (onChange && value !== undefined) {
      onChange(value);
    }
  };

  return (
    <Editor
      height="100%"
      defaultLanguage={language}
      defaultValue={value}
      theme="vs-dark"
      onChange={handleEditorChange}
      options={{
        readOnly: true,
        minimap: { enabled: false },
        fontSize: 14,
        scrollBeyondLastLine: false,
        wordWrap: 'on',
        automaticLayout: true,
        padding: { top: 10 }
      }}
    />
  );
};

export default CodeEditor;

================
File: studio/src/components/RelationshipTree.tsx
================
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Network, Link2, Plus, ChevronDown, Box, MoreVertical, Search } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import React, { useState, useRef, useMemo } from 'react';

import { Module } from './TreeView';
import { Tree, NodeRendererProps } from 'react-arborist';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
} from "@/components/ui/dialog";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { buildTreeFromModules } from '../lib/tree';
import { cn } from "@/lib/utils";
import { Input } from "./ui/input";
import { Badge } from "./ui/badge";

const RELATIONSHIP_TYPES = [
  { 
    id: 'context', 
    label: 'Context',
    description: 'Modules that provide context or background information',
    icon: Network 
  },
  { 
    id: 'connection', 
    label: 'Connection',
    description: 'Modules that are directly connected or dependent',
    icon: Link2 
  },
] as const;

export type RelationshipType = typeof RELATIONSHIP_TYPES[number]['id'];

export interface ModuleWithRelations extends Module {
  relationTypes: RelationshipType[];
}

export interface RelationshipTreeNode {
  id: string;
  name: string;
  isFolder: boolean;
  children?: RelationshipTreeNode[];
  module?: ModuleWithRelations;
}

interface ExtendedRelationshipTreeNode extends RelationshipTreeNode {
  onRemoveRelation?: (moduleId: string, type: RelationshipType) => void;
}



const RelationshipNode = React.forwardRef<HTMLDivElement, NodeRendererProps<ExtendedRelationshipTreeNode>>(
  ({ node, style }, ref) => {
    const [showActions, setShowActions] = useState(false);
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const hideTimeoutRef = useRef<NodeJS.Timeout>();

    const handleMouseEnter = () => {
      if (hideTimeoutRef.current) {
        clearTimeout(hideTimeoutRef.current);
      }
      setShowActions(true);
    };

    const handleMouseLeave = () => {
      if (!isMenuOpen) {
        hideTimeoutRef.current = setTimeout(() => {
          setShowActions(false);
        }, 100);
      }
    };

    return (
      <div 
      ref={ref}
      style={style}
      className={cn(
        "flex items-center py-1 px-2",
        "hover:bg-gray-100 cursor-pointer",
        "rounded-sm group h-7"
      )}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      onClick={(_) => {
        if (node.isInternal) {
          node.toggle();
        }
      }}
    >
      <div className="flex items-center gap-1.5 flex-1 justify-between">
        <div className="flex items-center gap-1.5">
          {node.data.isFolder ? (
            <Button 
              variant="ghost" 
              size="icon"
              className="h-4 w-4 p-0 hover:bg-transparent"
              onClick={(e) => {
                e.stopPropagation();
                node.toggle();
              }}
            >
              <ChevronDown className={cn(
                "h-3 w-3 text-muted-foreground transition-transform ml-",
                !node.isOpen && "-rotate-90"
              )} />
            </Button>
          ) : (
            <Box className="h-3 w-3 text-muted-foreground ml-4" />
          )}
          <span className="text-sm truncate">{node.data.name}</span>
          {!node.data.isFolder && node.data.module?.relationTypes.map(type => {
            const relationConfig = RELATIONSHIP_TYPES.find(r => r.id === type);
            if (!relationConfig) return null;
            const Icon = relationConfig.icon;
            return (
              <TooltipProvider key={type}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div>
                      <Icon className="h-4 w-4 text-muted-foreground" />
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>{relationConfig.label} Relationship</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            );
          })}
        </div>
        {(showActions || isMenuOpen) && node.data.module && !node.data.isFolder && (
          <DropdownMenu 
            modal={false}
            open={isMenuOpen}
            onOpenChange={setIsMenuOpen}
          >
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6 p-0"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                }}
              >
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[200px]">
              <DropdownMenuLabel>Options</DropdownMenuLabel>
              {node.data.module.relationTypes.map(type => {
                const relationConfig = RELATIONSHIP_TYPES.find(r => r.id === type);
                if (!relationConfig) return null;
                const Icon = relationConfig.icon;
                return (
                  <DropdownMenuItem
                    key={type}
                    onSelect={() => {
                      if (node.data.onRemoveRelation) {
                        node.data.onRemoveRelation(node.data.module!.module_id, type);
                      }
                      setIsMenuOpen(false);
                    }}
                    className="text-destructive"
                  >
                    <Icon className="h-4 w-4 mr-2" />
                    Remove {relationConfig.label}
                  </DropdownMenuItem>
                );
              })}
            </DropdownMenuContent>
          </DropdownMenu>
        )}
      </div>
    </div>
    );
  }
);

RelationshipNode.displayName = 'RelationshipNode';

interface RelationshipTreeProps {
  modules: ModuleWithRelations[];
  isLoading?: boolean;
  onAddRelation?: (targetModule: Module, types: RelationshipType[]) => void;
  availableModules?: Module[];
  onRemoveRelation?: (moduleId: string, type: RelationshipType) => void;
  currentModuleId?: string;
}

export const RelationshipTree: React.FC<RelationshipTreeProps> = ({
  modules,
  isLoading = false,
  onAddRelation,
  availableModules = [],
  onRemoveRelation,
  currentModuleId
}) => {
  const [selectedTypes, setSelectedTypes] = useState<RelationshipType[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [treeSearchTerm, setTreeSearchTerm] = useState("");

  const baseTreeData = buildTreeFromModules(modules).map(node => ({
    ...node,
    onRemoveRelation,
    isFolder: node.isFolder ?? false,
  })) as ExtendedRelationshipTreeNode[];

  // Helper function to recursively filter tree nodes
  const filterNodes = (nodes: RelationshipTreeNode[], searchText: string): RelationshipTreeNode[] => {
    return nodes.reduce<RelationshipTreeNode[]>((acc, node) => {
      const matchesSearch = node.name.toLowerCase().includes(searchText.toLowerCase());
      
      if (node.children) {
        const filteredChildren = filterNodes(node.children, searchText);
        if (matchesSearch || filteredChildren.length > 0) {
          acc.push({
            ...node,
            children: filteredChildren
          });
        }
      } else if (matchesSearch) {
        acc.push(node);
      }
      
      return acc;
    }, []);
  };

  const treeData = useMemo(() => {
    if (!treeSearchTerm.trim()) return baseTreeData;
    return filterNodes(baseTreeData, treeSearchTerm);
  }, [baseTreeData, treeSearchTerm]);
  
  const filteredModules = availableModules.filter(module => 
    module.module_id !== currentModuleId &&
    (module.module_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
     module.path.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const handleAddRelation = (module: Module) => {
    if (selectedTypes.length === 0) return;
    onAddRelation?.(module, selectedTypes);
    setSelectedTypes([]);
    setIsDialogOpen(false);
    setSearchTerm("");
  };

  return (
    <Card className="h-full flex flex-col border-none rounded-none ">
      <CardHeader className="px-2 py-1 space-y-2">
        <div className="flex items-center justify-between">
          <p className="text-xs font-medium text-gray-600">RELATIONSHIPS</p>
          {onAddRelation && (
            <Dialog 
              open={isDialogOpen} 
              onOpenChange={(open) => {
                setIsDialogOpen(open);
                if (!open) {
                  setSelectedTypes([]);
                  setSearchTerm("");
                }
              }}
            >
              <DialogTrigger asChild>
                <Button variant="ghost" size="icon" className="h-6 w-6 p-0">
                  <Plus className="h-4 w-4" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Add New Relationship</DialogTitle>
                  <DialogDescription>
                    Select relationship types and choose a module to connect with
                  </DialogDescription>
                </DialogHeader>
                
                <div className="grid gap-4 py-4">
                  <div className="grid grid-cols-2 gap-4">
                    {RELATIONSHIP_TYPES.map(({ id, label, description, icon: Icon }) => (
                      <Card 
                        key={id} 
                        className={cn(
                          "cursor-pointer transition-colors",
                          selectedTypes.includes(id) && "border-primary"
                        )}
                        onClick={() => {
                          setSelectedTypes(prev =>
                            prev.includes(id)
                              ? prev.filter(t => t !== id)
                              : [...prev, id]
                          );
                        }}
                      >
                        <CardHeader className="p-4 space-y-2">
                          <CardTitle className="text-sm flex items-center gap-2">
                            <Checkbox
                              checked={selectedTypes.includes(id)}
                              onCheckedChange={(checked) => {
                                setSelectedTypes(prev =>
                                  checked
                                    ? [...prev, id]
                                    : prev.filter(t => t !== id)
                                );
                              }}
                            />
                            <Icon className="h-4 w-4" />
                            {label}
                          </CardTitle>
                          <CardDescription className="text-xs">
                            {description}
                          </CardDescription>
                        </CardHeader>
                      </Card>
                    ))}
                  </div>
  
                  <Separator />
  
                  <div className="space-y-2">
                    <Label>Available Modules</Label>
                    <Input
                      type="text"
                      placeholder="Search modules..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full"
                    />
                    <ScrollArea className="h-[200px] rounded-md border">
                      <div className="p-2 space-y-2">
                        {filteredModules.map(module => (
                          <Card
                            key={module.module_id}
                            className={cn(
                              "cursor-pointer transition-colors",
                              "hover:bg-accent hover:text-accent-foreground"
                            )}
                            onClick={() => handleAddRelation(module)}
                          >
                            <CardHeader className="p-3 space-y-1">
                              <div className="flex justify-between items-start">
                                <div className="space-y-1">
                                  <CardTitle className="text-sm">
                                    {module.module_name || module.kit_id}
                                  </CardTitle>
                                  <CardDescription className="text-xs">
                                    {module.path}
                                  </CardDescription>
                                </div>
                                <Badge variant="outline" className="text-xs">
                                  v{module.version}
                                </Badge>
                              </div>
                            </CardHeader>
                          </Card>
                        ))}
                        {filteredModules.length === 0 && (
                          <div className="text-center py-4 text-sm text-muted-foreground">
                            No modules found
                          </div>
                        )}
                      </div>
                    </ScrollArea>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          )}
        </div>
      </CardHeader>
  
      <div className="px-2 pb-2">
        <div className="flex items-center gap-2 px-2 py-1.5 bg-white/50 border border-gray-200/80 rounded-xl w-full">
          <Search className="w-4 h-4 text-gray-500" />
          <Input
            type="text"
            placeholder="Search relationships..."
            value={treeSearchTerm}
            onChange={(e) => setTreeSearchTerm(e.target.value)}
            className="h-6 text-sm bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 border-none shadow-none w-full placeholder:text-gray-400"
          />
        </div>
      </div>

      <div className="flex-1">
        <ScrollArea className="h-full">
          {isLoading ? (
            <div className="p-4 text-center text-muted-foreground">
              Loading...
            </div>
          ) : modules.length === 0 ? (
            <div className="p-4 text-center text-muted-foreground">
              No relationships found
            </div>
          ) : (
            <Tree<ExtendedRelationshipTreeNode>
              data={treeData}
              width="100%"
              height={800}
              indent={16}
              rowHeight={28}
              overscanCount={5}
            >
              {RelationshipNode}
            </Tree>
          )}
        </ScrollArea>
      </div>
    </Card>
  );
};

================
File: studio/src/components/themeProvider.tsx
================
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}

================
File: studio/src/components/TreeView.tsx
================
import React, { useState, useMemo } from 'react';
import { Tree, NodeRendererProps } from 'react-arborist';
import { Button } from "@/components/ui/button";
import { ChevronRight, ChevronDown, Plus, Pencil, Box, Search } from 'lucide-react';
import { ScrollArea } from './ui/scroll-area';
import { cn } from '@/lib/utils';
import { Input } from './ui/input';

export interface EnvVar {
  name: string;
  optional?: boolean;
  default?: any;
}

export interface Kit {
  name: string;
  version: string;
  created_at: string;
  size: number;
  owner: string;
  doc_version: string;
  kit_id: string;
  environment: EnvVar[];
}

export interface Module {
  module_id: string;
  project_id: string;
  kit_id: string;
  owner: string;
  version: string;
  created_at: string;
  env_vars: Record<string, string>;
  repo_name: string;
  path: string;
  module_name: string;
}

export interface TreeNode {
  id: string;
  name: string;
  children?: TreeNode[];
  isFolder?: boolean;
  kit?: Kit;
  module?: Module;
}

export interface MoveParams {
  dragIds: string[];
  parentId: string | null;
  index: number;
}

export interface TreeViewProps {
  data: TreeNode[];
  modules: Kit[];
  allowDrag?: boolean;
  onCreateModule?: ((parentId: string | null) => void) | null;
  onModuleClick: (module: Module) => void;
  onMove?: (params: MoveParams) => void;
  onEditPath?: (module: Module) => void;
  onRename?: (moduleId: string, currentName: string) => void;
  isLoading?: boolean;
  selectedModuleId?: string | null;
}


// Helper function to recursively filter tree nodes
const filterNodes = (nodes: TreeNode[], searchText: string): TreeNode[] => {
  return nodes.reduce<TreeNode[]>((acc, node) => {
    const matchesSearch = node.name.toLowerCase().includes(searchText.toLowerCase());
    
    if (node.children) {
      const filteredChildren = filterNodes(node.children, searchText);
      if (matchesSearch || filteredChildren.length > 0) {
        acc.push({
          ...node,
          children: filteredChildren
        });
      }
    } else if (matchesSearch) {
      acc.push(node);
    }
    
    return acc;
  }, []);
};

export const TreeView: React.FC<TreeViewProps> = ({
  data,
  // modules,
  allowDrag = true,
  onCreateModule,
  onModuleClick,
  onMove,
  onEditPath,
  onRename,
  isLoading = false,
  selectedModuleId = null
}) => {
  const [searchText, setSearchText] = useState('');

  const filteredData = useMemo(() => {
    if (!searchText.trim()) return data;
    return filterNodes(data, searchText);
  }, [data, searchText]);

  const Node = React.forwardRef<HTMLDivElement, NodeRendererProps<TreeNode>>((props, ref) => {
    const { node, style, dragHandle } = props;
    const [showActions, setShowActions] = useState(false);
    
    const isSelected = !node.data.isFolder && 
      node.data.module?.module_id === selectedModuleId;
    
    return (
      <div 
        style={style} 
        ref={(element) => {
          if (allowDrag && dragHandle) dragHandle(element);
          if (typeof ref === 'function') ref(element);
          else if (ref) ref.current = element;
        }}
        onMouseEnter={() => setShowActions(true)}
        onMouseLeave={() => setShowActions(false)}
        data-id={node.id}
      >
        <div 
          className={cn(
            "flex items-center justify-between py-1.5 px-2 h-8",
            "rounded-sm mx-0 transition-colors",
            "hover:bg-gray-200/50 group rounded-md",
            isSelected && "bg-gray-200/60"
          )}
        >
          <div 
            className="flex items-center gap-1.5 flex-1 min-w-0 cursor-pointer"
            onClick={() => {
              if (node.data.isFolder) {
                node.toggle();
              } else if (node.data.module) {
                onModuleClick(node.data.module);
              }
            }}
          >
            {node.data.isFolder ? (
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-5 w-5 p-0 hover:bg-transparent"
                onClick={(e) => {
                  e.stopPropagation();
                  node.toggle();
                }}
              >
                {node.isOpen ? 
                  <ChevronDown className="h-3.5 w-3.5 text-gray-500" /> : 
                  <ChevronRight className="h-3.5 w-3.5 text-gray-500" />
                }
              </Button>
            ) : (
              <Box className="h-3.5 w-3.5 ml-1 text-gray-400 shrink-0" />
            )}
            <span className="text-sm text-gray-700 truncate">{node.data.name}</span>
          </div>

          {showActions && (onCreateModule || onEditPath || onRename) && (
            <div className="flex gap-1">
              {node.data.isFolder && onCreateModule && (
                <Button 
                  variant="ghost" 
                  size="icon"
                  className="h-6 w-6 rounded-full hover:bg-gray-200/70 hover:text-gray-800 transition-colors"
                  onClick={(e) => {
                    e.stopPropagation();
                    onCreateModule(node.id);
                  }}
                >
                  <Plus className="h-3.5 w-3.5" />
                </Button>
              )}
              {!node.data.isFolder && node.data.module && (
                <>
                  {onRename && (
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-6 w-6 rounded-full hover:bg-gray-200/70 hover:text-gray-800 transition-colors"
                      onClick={(e) => {
                        e.stopPropagation();
                        onRename(node.id, node.data.name);
                      }}
                    >
                      <Pencil className="h-3.5 w-3.5" />
                    </Button>
                  )}
                  {onEditPath && (
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-6 w-6 rounded-full hover:bg-gray-200/70 hover:text-gray-800 transition-colors"
                      onClick={(e) => {
                        e.stopPropagation();
                        onEditPath(node.data.module!);
                      }}
                    >
                      <Pencil className="h-3.5 w-3.5" />
                    </Button>
                  )}
                </>
              )}
            </div>
          )}
        </div>
      </div>
    );
  });

  Node.displayName = 'Node';

  if (isLoading) {
    return (
      <div className="h-full bg-gray-50/60 border-none">
        <div className="p-3 text-sm text-gray-500 text-center">
          Loading...
        </div>
      </div>
    );
  }

  return (
    <div className="h-full bg-gray-50/60">
      <div className="p-2 flex items-center  ">
        <div className="flex items-center gap-2 px-2 py-1.5 bg-white/50 border border-gray-200/80 rounded-xl w-full">
          <Search className="w-4 h-4 text-gray-500" />
          <Input
            type="text"
            placeholder="Search modules..."
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            className="h-6 text-sm bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 border-none shadow-none w-full placeholder:text-gray-400"
          />
        </div>
      </div>
      {onCreateModule && (
        <div className="pt-2 px-2 pb-1 flex items-center justify-between  border-gray-200/80">
          <span><p className="text-xs font-medium text-gray-600 uppercase tracking-wide">Modules</p></span>
          <Button 
            variant="ghost" 
            size="icon"
            className="h-6 w-6 rounded-full hover:bg-gray-200/70 hover:text-gray-800 transition-colors"
            onClick={() => onCreateModule(null)}
          >
            <Plus className="h-3.5 w-3.5" />
          </Button>
        </div>
      )}

      <ScrollArea className="flex-1">
        {data.length === 0 ? (
          <div className="p-3 text-sm text-gray-500 text-center">
            No modules yet. Click the plus button to add one.
          </div>
        ) : (
          <Tree<TreeNode>
            data={filteredData}
            onMove={allowDrag ? onMove : undefined}
            width="100%"
            height={800}
            indent={16}
            rowHeight={32}
            overscanCount={5}
          >
            {Node}
          </Tree>
        )}
      </ScrollArea>
    </div>
  );
};

================
File: studio/src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: studio/src/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: studio/src/hooks/useModuleRelationships.ts
================
import { useState, useCallback } from 'react';
import { Module } from '../components/TreeView';
import { toast } from '@/hooks/use-toast';
import { DEFAULT_PROJECT_ID } from '../lib/tree';
import { ENGINE_BASE_URL, fetchWithAuth } from '@/config';

export const useModuleRelationships = (moduleId: string) => {
  const [context, setContext] = useState<Module[]>([]);
  const [connections, setConnections] = useState<Module[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const fetchContext = useCallback(async () => {
    try {
      const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module/${moduleId}/context`);
      const data = await response.json();
      setContext(data);
    } catch (error) {
      console.error('Error fetching context:', error);
      toast({
        title: "Error",
        description: "Failed to fetch context relations",
        variant: "destructive"
      });
    }
  }, [moduleId]);

  const fetchConnections = useCallback(async () => {
    try {
      const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module/${moduleId}/connections`);
      const data = await response.json();
      setConnections(data);
    } catch (error) {
      console.error('Error fetching connections:', error);
      toast({
        title: "Error",
        description: "Failed to fetch connections",
        variant: "destructive"
      });
    }
  }, [moduleId]);

  const fetchAvailableModules = useCallback(async () => {
    try {
      const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module/project/${DEFAULT_PROJECT_ID}/list`);
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching available modules:', error);
      toast({
        title: "Error",
        description: "Failed to fetch available modules",
        variant: "destructive"
      });
      return null;
    }
  }, []);

  const createConnection = useCallback(async (targetId: string, relationType: 'context' | 'connection') => {
    try {
      const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module/relation`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          source_id: moduleId,
          target_id: targetId,
          relation_type: relationType
        }),
      });

      toast({
        title: "Success",
        description: "Relationship created successfully"
      });

      // Refresh the relevant list
      if (relationType === 'context') {
        await fetchContext();
      } else {
        await fetchConnections();
      }
    } catch (error) {
      console.error('Error creating connection:', error);
      toast({
        title: "Error",
        description: "Failed to create relationship",
        variant: "destructive"
      });
    }
  }, [moduleId, fetchContext, fetchConnections]);

  const removeConnection = useCallback(async (targetId: string, relationType: 'context' | 'connection') => {
    try {
      const response = await fetchWithAuth(
        `${ENGINE_BASE_URL}/module/relation/${moduleId}/${targetId}/${relationType}`, 
        { method: 'DELETE' }
      );

      toast({
        title: "Success",
        description: "Relationship removed successfully"
      });

      // Refresh both lists since the relationship might have changed
      await Promise.all([fetchContext(), fetchConnections()]);
    } catch (error) {
      console.error('Error removing connection:', error);
      toast({
        title: "Error",
        description: "Failed to remove relationship",
        variant: "destructive"
      });
    }
  }, [moduleId, fetchContext, fetchConnections]);

  const fetchAll = useCallback(async () => {
    setIsLoading(true);
    try {
      await Promise.all([
        fetchContext(),
        fetchConnections()
      ]);
    } finally {
      setIsLoading(false);
    }
  }, [fetchContext, fetchConnections]);

  return {
    context,
    connections,
    isLoading,
    fetchAll,
    createConnection,
    removeConnection,
    fetchAvailableModules
  };
};

================
File: studio/src/layout/BottomPanel.tsx
================
import { useState, useEffect, useRef } from 'react';
import { useChatPromptStore } from '../stores/chatPromptStore';
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Send, Bot, FileText, WorkflowIcon, PackageCheck, GitBranchPlus, Settings, Boxes, Bot as AgentIcon, Expand, Minimize, Check } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ChatContainer } from '../components/Chat';
import type { Message } from '../components/Chat';
import type { Module } from '../components/TreeView';
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from '@/components/ui/tooltip';
import { ENGINE_BASE_URL, fetchWithAuth } from '@/config';
import { useChatStore } from '@/stores/chatStore';

interface Workflow {
  workflow_type: string;
  agent_type: string;
  base_instructions: string;
  metadata: {
    instructions: string;
    actions: any[];
    requirements: string[];
  };
  default_actions: any[];
  is_completed: boolean;
  allow_multiple?: boolean;
}

interface HistoryResponse {
  history: Message[];
  section: string;
  module_id: string;
}

interface BottomPanelProps {
  selectedModule: Module | null;
}

interface Session {
  session_id: string;
  last_message: string;
  last_updated: string;
  is_default: boolean;
}

const BottomPanel = ({ selectedModule }: BottomPanelProps) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  // const [messages, setMessages] = useState<Message[]>([]);
  const [localInputValue, setLocalInputValue] = useState('');
  const [workflows, setWorkflows] = useState<Workflow[]>([]);
  const [currentSection, setCurrentSection] = useState<string>('maintain');
  const [currentSession, setCurrentSession] = useState<string | null>(null);
  const [sessions, setSessions] = useState<Session[]>([]);
  // const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [elapsedTime, setElapsedTime] = useState<number>(0);
  const [completionTime, setCompletionTime] = useState<string | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);



  const { 
    messages, 
    isLoading, 
    setCurrentContext, 
    refreshChat ,
    sendMessage
  } = useChatStore();

  useEffect(() => {
    if (selectedModule?.module_id && currentSection && currentSession) {
      setCurrentContext(
        selectedModule.module_id,
        currentSection,
        currentSession
      );
      refreshChat();
    }
  }, [selectedModule?.module_id, currentSection, currentSession]);

  
  const adjustTextareaHeight = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = `${Math.min(textarea.scrollHeight, 200)}px`;
    }
  };

  useEffect(() => {
    adjustTextareaHeight();
  }, [localInputValue]);

  // Update elapsed time while loading
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isLoading) {
      interval = setInterval(() => {
        setElapsedTime(prev => prev + 0.1);
      }, 100);
    } else if (!completionTime) {
      const finalTime = elapsedTime;
      setCompletionTime(`Completed in ${finalTime.toFixed(1)}s`);
      setElapsedTime(0);
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isLoading]);

  useEffect(() => {
    let timeout: NodeJS.Timeout;
    
    if (completionTime) {
      timeout = setTimeout(() => {
        setCompletionTime(null);
        setElapsedTime(0);
      }, 3000); // Hide after 3 seconds
    }

    return () => {
      if (timeout) {
        clearTimeout(timeout);
      }
    };
  }, [completionTime]);

  const fetchSessions = async () => {
    if (!selectedModule?.module_id || !currentSection) return;

    try {
      const response = await fetchWithAuth(
        `${ENGINE_BASE_URL}/workflow/sessions?module_id=${selectedModule.module_id}&workflow=${currentSection}`
      );
      if (response.ok) {
        const data: Session[] = await response.json();
        setSessions(data);
        // If no current session or current session not found, use first available
        if (!currentSession || !data.find(s => s.session_id === currentSession)) {
          setCurrentSession(data[0]?.session_id || null);
        }
      }
    } catch (error) {
      console.error('Error fetching sessions:', error);
    }
  };

  const fetchWorkflows = async () => {
    if (!selectedModule?.module_id) return;

    try {
      const response = await fetchWithAuth(
        `${ENGINE_BASE_URL}/workflow/workflows?module_id=${selectedModule.module_id}`
      );
      const data: Workflow[] = await response.json();
      setWorkflows(data);
      
      // Set first workflow as default if none selected
      if (data.length > 0 && !currentSection) {
        setCurrentSection(data[0].workflow_type);
      }
    } catch (error) {
      console.error('Error fetching workflows:', error);
    }
  };

  // const fetchHistory = async () => {
  //   if (!selectedModule?.module_id || !currentSession) return;

  //   try {
  //     const url = new URL(`${ENGINE_BASE_URL}/chat/${selectedModule.module_id}/workflow/${currentSection}/history`);
  //     if (currentSession) {
  //       url.searchParams.append('session_id', currentSession);
  //     }
  //     const response = await fetchWithAuth(url.toString());
  //     const data: HistoryResponse = await response.json();
  //     setMessages(data.history || []);
  //   } catch (error) {
  //     console.error('Error fetching history:', error);
  //   }
  // };


  useEffect(() => {
    fetchWorkflows();
  }, [selectedModule?.module_id]);

  useEffect(() => {
    if (currentSection) {
      fetchSessions();
    }
  }, [currentSection, selectedModule?.module_id]);

  // useEffect(() => {
  //   if (currentSection) {
  //     fetchHistory();
  //   }
  // }, [currentSection, selectedModule?.module_id, currentSession]);

  const { inputValue: storeInputValue, setInputValue: setStoreInputValue } = useChatPromptStore();
  

  const handleSend = async (text: string) => {
    if (!text.trim()) return;
    await sendMessage(text);
  };










  
  // Show a message when no module is selected
  if (!selectedModule) {
    return (
      <div className="h-full flex flex-col items-center justify-center space-y-4 text-gray-500">
        <Bot className="w-12 h-12 text-gray-400 mb-2" strokeWidth={1.5} />
        <div className="text-center">
          <h3 className="text-lg font-medium text-gray-700 mb-1">No Module Selected</h3>
          <p className="text-sm text-gray-500">Select a module from the sidebar to begin</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`${isFullscreen ? 'fixed inset-4 bg-white shadow-2xl rounded-lg z-50' : 'h-full'} flex overflow-hidden`}>
      <div className={`flex-1 flex flex-col ${isFullscreen ? 'border rounded-l-lg' : 'border-t'} min-w-0`}>
        <ChatContainer 
          messages={messages}
        />
        
        <div className="p-4 border-t shrink-0">
          <div className="max-w-3xl mx-auto flex gap-2">
            <div className="flex-1">




                <Textarea
                  ref={textareaRef}
                  value={storeInputValue}
                  onChange={(e) => {
                    setStoreInputValue(e.target.value);
                    // Not needed here since useEffect will handle it, but adding for immediate response
                    adjustTextareaHeight();
                  }}
                onKeyDown={(e: React.KeyboardEvent) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (!isLoading) {
                      handleSend(storeInputValue);
                      setStoreInputValue('');
                    }
                  }

                }}
                placeholder="Send a message... (Shift+Enter for new line)"
                disabled={isLoading}
                className={`w-full resize-none min-h-[40px] max-h-[200px] ${error ? 'border-red-500' : ''}`}
                rows={1}
                style={{
                  height: 'auto',
                  overflow: 'hidden'
                }}
              />
              {error ? (
                <div className="mt-1 text-sm text-red-600">{error}</div>
              ) : completionTime && (
                <div className="mt-1 text-xs text-gray-600">{completionTime}</div>
              )}
            </div>
            <Button 
              onClick={() => {
                handleSend(storeInputValue);
                setStoreInputValue('');

              }}
              disabled={isLoading}
              variant="secondary"
            >
              {isLoading ? (
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600" />
                  <span className="text-xs text-gray-600 w-10">{elapsedTime.toFixed(1)}s</span>
                </div>
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
          </div>
        </div>
      </div>

      <div className={`${isFullscreen ? 'w-96' : 'w-80'} border-l ${isFullscreen ? 'rounded-r-lg' : ''} overflow-auto bg-white`}>
        <div className="p-4">
          <div className="flex items-center justify-between mb-4">
            <p className="text-xs font-medium text-gray-600">WORKFLOWS</p>
            <Button
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0"
              onClick={() => setIsFullscreen(!isFullscreen)}
            >
              {isFullscreen ? (
                <Minimize className="h-3 w-3" />
              ) : (
                <Expand className="h-3 w-3" />
              )}
            </Button>
          </div>
          <div className="space-y-4">
            <Select defaultValue={currentSection} value={currentSection} onValueChange={setCurrentSection}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select workflow" />
              </SelectTrigger>
              <SelectContent>
                {workflows.map((workflow) => (
                  <SelectItem key={workflow.workflow_type} value={workflow.workflow_type}>
                    {workflow.workflow_type}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* Keep existing workflow cards but only show selected one */}
            {workflows.filter(workflow => workflow.workflow_type === currentSection).map((workflow) => (
              <Card 
                key={workflow.workflow_type}
                className={`cursor-pointer transition-colors hover:bg-gray-50 ${
                  currentSection === workflow.workflow_type ? 'bg-gray-50 ring-1 ring-gray-200' : ''
                }`}
                onClick={() => setCurrentSection(workflow.workflow_type)}
              >
                <CardContent className="p-2">
                  <div className="space-y-1.5">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-1.5">
                        <span className="font-medium text-xs capitalize">{workflow.workflow_type}</span>
                        {workflow.is_completed && (
                          <TooltipProvider>
                            <Tooltip delayDuration={0}>
                              <TooltipTrigger>
                                <Check className="h-3 w-3 text-green-500" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>Workflow completed</p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        )}
                      </div>
                      <Badge variant="secondary" className="text-[10px] flex items-center gap-1 py-0 h-4">
                        <AgentIcon className="h-2.5 w-2.5" />
                        {workflow.agent_type}
                      </Badge>
                    </div>
                    
               
                      <div className="pt-1">
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant="ghost" size="sm" className="text-[10px] text-gray-500 hover:text-gray-700 h-5 px-2 w-full justify-start">
                          View Details →
                        </Button>
                      </DialogTrigger>
                        <DialogContent className="max-w-2xl max-h-[80vh] overflow-hidden flex flex-col">
                          <DialogHeader>
                          <DialogTitle className="flex items-center gap-3">
                            <span className="capitalize">{workflow.workflow_type}</span>
                            {workflow.is_completed && (
                              <Badge variant="default" className="bg-green-100 text-green-700 hover:bg-green-100">
                                Completed
                              </Badge>
                            )}
                            <Badge variant="secondary" className="flex items-center gap-1">
                              <AgentIcon className="h-3 w-3" />
                              {workflow.agent_type}
                            </Badge>
                          </DialogTitle>
                        </DialogHeader>
                        <Tabs defaultValue="instructions" className="flex-1 overflow-hidden">
                          <TabsList className="w-full justify-start mb-4">
                            <TabsTrigger value="instructions" className="flex items-center gap-2">
                              <FileText className="h-3 w-3" />
                              <span>Instructions</span>
                              {(workflow.base_instructions || workflow.metadata.instructions) && (
                                <div className="h-1.5 w-1.5 rounded-full bg-blue-500" />
                              )}
                            </TabsTrigger>
                            <TabsTrigger value="actions" className="flex items-center gap-2">
                              <WorkflowIcon className="h-3 w-3" />
                              <span>Actions</span>
                              {(workflow.metadata.actions.length > 0 || workflow.default_actions.length > 0) && (
                                <Badge variant="secondary" className="ml-1">
                                  {workflow.metadata.actions.length + workflow.default_actions.length}
                                </Badge>
                              )}
                            </TabsTrigger>
                            <TabsTrigger value="requirements" className="flex items-center gap-2">
                              <PackageCheck className="h-3 w-3" />
                              <span>Requirements</span>
                              {workflow.metadata.requirements.length > 0 && (
                                <Badge variant="secondary" className="ml-1">
                                  {workflow.metadata.requirements.length}
                                </Badge>
                              )}
                            </TabsTrigger>
                          </TabsList>
                          <div className="overflow-y-auto pr-6">
                            <TabsContent value="instructions" className="m-0">
                              <div className="space-y-4 pb-4">
                                {workflow.base_instructions && (
                                  <div className="rounded-lg border bg-card text-card-foreground">
                                  <div className="border-b bg-gray-50 px-4 py-3 flex items-center gap-2">
                                    <FileText className="h-3 w-3 text-gray-600" />
                                    <h3 className="text-sm font-medium">Base Instructions</h3>
                                    </div>
                                    <div className="p-4 text-sm text-gray-600 leading-relaxed">
                                      {workflow.base_instructions}
                                    </div>
                                  </div>
                                )}
                                {workflow.metadata.instructions && (
                                  <div className="rounded-lg border bg-card text-card-foreground">
                                  <div className="border-b bg-gray-50 px-4 py-3 flex items-center gap-2">
                                    <FileText className="h-3 w-3 text-gray-600" />
                                    <h3 className="text-sm font-medium">Specific Instructions</h3>
                                    </div>
                                    <div className="p-4 text-sm text-gray-600 leading-relaxed">
                                      {workflow.metadata.instructions}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </TabsContent>
                            <TabsContent value="actions" className="m-0">
                              <div className="space-y-4 pb-4">
                                {workflow.metadata.actions.length > 0 && (
                                  <div className="rounded-lg border bg-card text-card-foreground">
                                    <div className="border-b bg-gray-50 px-4 py-3 flex items-center gap-2">
                                      <div className="flex items-center gap-2">
                                        <Boxes className="h-3 w-3 text-gray-600" />
                                        <h3 className="text-sm font-medium">Custom Actions</h3>
                                      </div>
                                      <Badge variant="default" className="bg-blue-100 text-blue-700 hover:bg-blue-100">
                                        {workflow.metadata.actions.length}
                                      </Badge>
                                    </div>
                                    <div className="divide-y">
                                      {workflow.metadata.actions.map((action, idx) => (
                                        <div key={`metadata-${idx}`} className="p-4">
                                          <p className="text-sm font-medium text-blue-600">{action.name}</p>
                                          {action.description && (
                                            <p className="mt-1 text-sm text-gray-600">{action.description}</p>
                                          )}
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}
                                {workflow.default_actions.length > 0 && (
                                  <div className="rounded-lg border bg-card text-card-foreground">
                                    <div className="border-b bg-gray-50 px-4 py-3 flex items-center gap-2">
                                      <div className="flex items-center gap-2">
                                        <Settings className="h-3 w-3 text-gray-600" />
                                        <h3 className="text-sm font-medium">System Actions</h3>
                                      </div>
                                      <Badge variant="default" className="bg-purple-100 text-purple-700 hover:bg-purple-100">
                                        {workflow.default_actions.length}
                                      </Badge>
                                    </div>
                                    <div className="divide-y">
                                      {workflow.default_actions.map((action, idx) => (
                                        <div key={`default-${idx}`} className="p-4">
                                          <p className="text-sm font-medium text-purple-600">{action.name}</p>
                                          {action.description && (
                                            <p className="mt-1 text-sm text-gray-600">{action.description}</p>
                                          )}
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </TabsContent>
                            <TabsContent value="requirements" className="m-0">
                              <div className="space-y-4 pb-4">
                                <div className="rounded-lg border bg-card text-card-foreground">
                                  <div className="border-b bg-gray-50 px-4 py-3 flex items-center gap-2">
                                    <div className="flex items-center gap-2">
                                      <PackageCheck className="h-3 w-3 text-gray-600" />
                                      <h3 className="text-sm font-medium">Requirements</h3>
                                    </div>
                                    <Badge variant="default" className="bg-gray-100 text-gray-700 hover:bg-gray-100">
                                      {workflow.metadata.requirements.length}
                                    </Badge>
                                  </div>
                                  <div className="p-4">
                                    {workflow.metadata.requirements.length > 0 ? (
                                      <div className="flex flex-wrap gap-2">
                                        {workflow.metadata.requirements.map((req, idx) => (
                                          <Badge key={idx} variant="outline" className="flex items-center gap-1.5 px-3 py-1">
                                            <PackageCheck className="h-3 w-3" />
                                            {req}
                                          </Badge>
                                        ))}
                                      </div>
                                    ) : (
                                      <p className="text-sm text-gray-500">No requirements specified</p>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </TabsContent>
                          </div>
                        </Tabs>
                        </DialogContent>
                      </Dialog>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
        
            </div>

            {sessions.length > 0 && (
              <div className="mt-6">
                <p className="text-xs font-medium text-gray-600 mb-1">SESSIONS</p>
                    {/* New Session button below workflow card */}
            {workflows.find(w => w.workflow_type === currentSection)?.allow_multiple && (
              <Button
                variant="outline"
                size="sm"
                className="w-full my-2 text-xs"
                onClick={async () => {
                  try {
                    const response = await fetchWithAuth(
                      `${ENGINE_BASE_URL}/workflow/session/create?module_id=${selectedModule?.module_id}&workflow=${currentSection}`,
                      { method: 'POST' }
                    );
                    if (response.ok) {
                      const data = await response.json();
                      setCurrentSession(data.session_id);
                      await fetchSessions(); // Refresh sessions list
                    }
                  } catch (error) {
                    console.error('Error creating session:', error);
                  }
                }}
              >
                New Session +
              </Button>
            )}
                <div className="space-y-2 max-h-[300px] overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-gray-200 scrollbar-track-transparent">
                  {sessions.map((session) => (
                    <Card
                      key={session.session_id}
                      className={`cursor-pointer transition-colors hover:bg-gray-50 ${
                        currentSession === session.session_id ? 'bg-gray-50 ring-1 ring-gray-200' : ''
                      }`}
                      onClick={() => setCurrentSession(session.session_id)}
                    >
                      <CardContent className="p-2">
                <div className="space-y-1.5">
                          <div className="flex items-center justify-between">
                            <Badge
                              variant={session.is_default ? "secondary" : "outline"}
                              className="text-[10px]"
                            >
                              {session.is_default ? "Default Session" : new Date(session.last_updated).toLocaleString()}
                            </Badge>
                          </div>
                          <p className="text-xs text-gray-600 truncate">{session.last_message}</p>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
  );


};

export default BottomPanel;

================
File: studio/src/layout/LeftSidebar.tsx
================
import React, { useState, useEffect } from 'react';
import { Sidebar, SidebarClose, Settings, LogOut } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
Dialog,
DialogContent,
DialogHeader,
DialogTitle,
} from "@/components/ui/dialog";
import {
Select,
SelectContent,
SelectItem,
SelectTrigger,
SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from '@/hooks/use-toast';
import { TreeView, Kit, Module, TreeNode, MoveParams } from '../components/TreeView';
import { useModuleStore } from '../store';
import {
DEFAULT_PROJECT_ID,
buildTreeFromModules,
getNewPath
} from '../lib/tree';
import {
DialogFooter,
DialogDescription,
} from "@/components/ui/dialog"
import { SidebarHeader } from '@/components/ui/sidebar';
import { ENGINE_BASE_URL, fetchWithAuth } from '@/config';
interface LeftSidebarProps {
  initialModules?: Kit[];
  onExpand:  (expand: boolean) => void;
  expanded: boolean
}


const LeftSidebar: React.FC<LeftSidebarProps> = ({ initialModules = [], onExpand: onExpand, expanded  }) => {
  // Add handleLogout function
  const handleLogout = () => {
    localStorage.removeItem('auth_credentials');
    window.location.reload();
  };

const { toast } = useToast();
const { selectedModuleId, setSelectedModule } = useModuleStore();

const handleModuleClick = (module: Module) => {
  setSelectedModule(module);
};

const handleCreateModule = async (parentId: string | null) => {
  setCurrentParentId(parentId);
  setModuleName('');
  setModulePath('');
  setPathError('');
  setIsDialogOpen(true);
};

const [treeData, setTreeData] = useState<TreeNode[]>([]);
const [kits, setKits] = useState<Kit[]>(initialModules);
const [isDialogOpen, setIsDialogOpen] = useState(false);
const [isRenameDialogOpen, setIsRenameDialogOpen] = useState(false);
const [selectedKit, setSelectedKit] = useState<Kit | null>(null);
const [currentParentId, setCurrentParentId] = useState<string | null>(null);
const [envVars, setEnvVars] = useState<Record<string, string>>({});
const [moduleName, setModuleName] = useState('');
const [isLoading, setIsLoading] = useState(true);
const [moduleToRename, setModuleToRename] = useState<{ id: string; name: string } | null>(null);
const [newModuleName, setNewModuleName] = useState('');
const [modulePath, setModulePath] = useState('');
const [pathError, setPathError] = useState('');
const [isSettingsOpen, setIsSettingsOpen] = useState(false);
const [availableModels, setAvailableModels] = useState<Record<string, string[]>>({});
const [currentModel, setCurrentModel] = useState<string>('');






useEffect(() => {
  Promise.all([
    fetchKits(),
    fetchModules()
  ]).finally(() => setIsLoading(false));
}, []);

const fetchKits = async () => {
  try {
    const response = await fetchWithAuth(`${ENGINE_BASE_URL}/kit`);
    if (!response.ok) throw new Error('Failed to fetch kits');
    const result = await response.json();
    setKits(result.kits);
  } catch (error) {
    console.error('Error fetching modules:', error);
    toast({
      title: "Error",
      description: "Failed to fetch available modules",
      variant: "destructive"
    });
  }
};

// Fetch modules and models on mount
useEffect(() => {
  const fetchModels = async () => {
    try {
      const [availableRes, currentRes] = await Promise.all([
        fetchWithAuth(`${ENGINE_BASE_URL}/model/list`),
        fetchWithAuth(`${ENGINE_BASE_URL}/model/current`)
      ]);
      
      if (availableRes.ok) {
        const models = await availableRes.json();
        setAvailableModels(models);
      }
      
      if (currentRes.ok) {
        const current = await currentRes.json();
        setCurrentModel(current.model_name);
      }
    } catch (error) {
      console.error('Error fetching model data:', error);
    }
  };
  
  fetchModels();
}, []);

const [selectedProvider, setSelectedProvider] = useState<string>('');
const [selectedModel, setSelectedModel] = useState<string>('');

// Set initial values when currentModel changes
useEffect(() => {
  if (currentModel) {
    const provider = Object.keys(availableModels).find(p => 
      availableModels[p].includes(currentModel)
    );
    if (provider) {
      setSelectedProvider(provider);
      setSelectedModel(currentModel);
    }
  }
}, [currentModel, availableModels]);

const handleSaveModelSettings = async () => {
  if (!selectedModel) return;
  
  try {
    const res = await fetchWithAuth(`${ENGINE_BASE_URL}/model/set`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ model_name: selectedModel })
    });
    
    if (res.ok) {
      setCurrentModel(selectedModel);
      toast({
        title: "Success",
        description: "Model settings saved successfully",
        variant: "default"
      });
      setIsSettingsOpen(false);
    } else {
      throw new Error('Failed to update model');
    }
  } catch (error) {
    toast({
      title: "Error",
      description: "Failed to save model settings",
      variant: "destructive"
    });
  }
};








































const fetchModules = async () => {
  try {
    const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module/project/${DEFAULT_PROJECT_ID}/list`);
    if (!response.ok) throw new Error('Failed to fetch modules');
    const allModules: Module[] = await response.json();
    setTreeData(buildTreeFromModules(allModules));
  } catch (error) {
    console.error('Error fetching modules:', error);
    toast({
      title: "Error",
      description: "Failed to fetch modules",
      variant: "destructive"
    });
  }
};



const validatePath = (path: string): boolean => {
  if (!path) return true; // Empty path is allowed
  const pathRegex = /^[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*$/;
  return pathRegex.test(path);
};

const handlePathChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const newPath = e.target.value;
  setModulePath(newPath);
  
  if (!validatePath(newPath)) {
    setPathError('Path must be alphanumeric segments separated by periods (e.g., segment1.segment2)');
  } else {
    setPathError('');
  }
};

const handleRename = (moduleId: string, currentName: string) => {
  setModuleToRename({ id: moduleId, name: currentName });
  setNewModuleName(currentName);
  setIsRenameDialogOpen(true);
};

const handleRenameConfirm = async () => {
  if (!moduleToRename || !newModuleName.trim()) return;

  try {
    const moduleId = (moduleToRename.id).replace('module-', '');
    const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module/${moduleId}/name`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: newModuleName.trim(),
      }),
    });

    if (!response.ok) throw new Error('Failed to rename module');

    toast({
      title: "Success",
      description: "Module renamed successfully"
    });

    await fetchModules();
  } catch (error) {
    console.error('Error renaming module:', error);
    toast({
      title: "Error",
      description: "Failed to rename module",
      variant: "destructive"
    });
  } finally {
    setIsRenameDialogOpen(false);
    setModuleToRename(null);
    setNewModuleName('');
  }
};

const createModule = async (
  moduleId: string,
  version: string,
  owner: string,
  envVars: Record<string, string>,
  path: string,
  moduleName: string
) => {
  try {
    const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        project_id: DEFAULT_PROJECT_ID,
        kit_id: moduleId,
        version: version,
        owner: owner,
        env_vars: envVars,
        path: path,
        module_name: moduleName
      }),
    });

    if (!response.ok) throw new Error('Failed to create module');
    
    const result = await response.json();
    toast({
      title: "Success",
      description: "Module created successfully"
    });
    return result;
  } catch (error) {
    console.error('Error creating module:', error);
    toast({
      title: "Error",
      description: "Failed to create module",
      variant: "destructive"
    });
    return null;
  }
};

const handleCreateConfirm = async () => {
  if (!selectedKit || !moduleName.trim()) return;
  if (!validatePath(modulePath)) return;

  try {
    const finalPath = modulePath || (currentParentId ? 
      getNewPath(treeData, '', currentParentId, 0) : 
      'root');

    const moduleData = await createModule(
      selectedKit.kit_id,
      selectedKit.version,
      selectedKit.owner,
      envVars,
      finalPath,
      moduleName.trim()
    );

    if (moduleData) {
      await fetchModules();
    }
  } finally {
    setIsDialogOpen(false);
    setSelectedKit(null);
    setEnvVars({});
    setModuleName('');
    setModulePath('');
    setPathError('');
  }
};

const updateModulePath = async (moduleId: string, newPath: string) => {
  try {
    const response = await fetchWithAuth(`${ENGINE_BASE_URL}/module/${moduleId}/path`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        project_id: DEFAULT_PROJECT_ID,
        path: newPath
      }),
    });

    if (!response.ok) throw new Error('Failed to update module path');

    toast({
      title: "Success",
      description: "Module path updated successfully"
    });
  } catch (error) {
    console.error('Error updating module path:', error);
    toast({
      title: "Error",
      description: "Failed to update module path",
      variant: "destructive"
    });
    throw error;
  }
};

const handleMove = async (params: MoveParams) => {
  const { dragIds, parentId, index } = params;

  try {
    const newPath = getNewPath(treeData, dragIds[0], parentId, index);

    for (const dragId of dragIds) {
      if (dragId.startsWith('module-')) {
        const moduleId = dragId.replace('module-', '');
        await updateModulePath(moduleId, newPath);
      }
    }

    await fetchModules();
  } catch (error) {
    await fetchModules();
  }
};
return (
<>
<div className="h-full flex flex-col bg-gray-100">
  <div className="flex flex-col justify-between h-full">
    <div>
      <SidebarHeader className="px-2 py-4 flex flex-row items-center justify-between  backdrop-blur-sm">
        <div className={expanded ? "flex justify-between items-center w-full" : ''}>
          <div className="flex items-center gap-3">
            <img src="/logo.png" alt="Hivon Logo" className="h-10 w-10" />
            {expanded && <span className="font-semibold text-gray-600">HIVON</span>}
          </div>

          <div className="flex items-center gap-2">
        <Button
        variant="ghost"
        size="icon"
          onClick={() => {
            const newIsCollapsed = !expanded;
            onExpand(newIsCollapsed);
          }}
        className="h-10 w-10 rounded-full hover:bg-gray-200/70 hover:text-gray-800 transition-colors"
        aria-label={!expanded ? "Expand sidebar" : "Collapse sidebar"}
      >
        {!expanded ? <Sidebar size={16} /> : <SidebarClose size={16} />}
      </Button>
      </div>
    </div>
  </SidebarHeader>

    </div>

    {expanded ? (
      <>
        <div className="p-1 space-y-2 flex-1 overflow-auto">
          <TreeView
            data={treeData} 
            modules={kits} 
            allowDrag={true} 
            onCreateModule={handleCreateModule} 
            onModuleClick={handleModuleClick} 
            onMove={handleMove} 
            onRename={handleRename} 
            isLoading={isLoading} 
            selectedModuleId={selectedModuleId} 
          />
        </div>
        
        <div className="p-2 space-y-2 border-gray-200">
          <Button
            variant="ghost"
            onClick={() => setIsSettingsOpen(true)}
            className="w-full justify-start gap-2 hover:bg-gray-200/70 hover:text-gray-800 transition-colors"
            aria-label="Settings"
          >
            <Settings size={16} />
            Settings
          </Button>
          <Button
            variant="ghost"
            onClick={handleLogout}
            className="w-full justify-start gap-2 hover:bg-gray-200/70 text-red-600 hover:text-red-700 transition-colors"
            aria-label="Logout"
          >
            <LogOut size={16} />
            Logout
          </Button>
        </div>
      </>
    ) : (
      <div className="flex-1 flex flex-col justify-end">
        <div className="p-2 space-y-2 border-gray-200">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsSettingsOpen(true)}
            className="w-10 h-10 rounded-full hover:bg-gray-200/70 hover:text-gray-800 transition-colors"
            aria-label="Settings"
          >
            <Settings size={16} />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            onClick={handleLogout}
            className="w-10 h-10 rounded-full hover:bg-gray-200/70 text-red-600 hover:text-red-700 transition-colors"
            aria-label="Logout"
          >
            <LogOut size={16} />
          </Button>
        </div>
      </div>
    )}
  </div>
</div>

{/* Create Module Dialog */}

<Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
<DialogContent className="sm:max-w-[425px] bg-white/95 backdrop-blur-sm shadow-lg border-gray-200">
<DialogHeader className="space-y-1">
<DialogTitle className="text-xl">Create Module Instance</DialogTitle>
<DialogDescription className="text-gray-500">Configure your new module.</DialogDescription>
</DialogHeader>
<div className="grid gap-4 py-4 px-1">
<div className="grid gap-2">
<Label className="text-sm font-medium text-gray-700">Select Module</Label>
<Select
value={selectedKit?.name || ''}
onValueChange={(value) => {
const module = kits.find(m => m.name === value);
setSelectedKit(module || null);
if (module) {
const initialEnvVars: Record<string, string> = {};
module.environment?.forEach((env: any) => {
if (env.default !== undefined) {
initialEnvVars[env.name] = String(env.default);
}
});
setEnvVars(initialEnvVars);
}
}}
>
<SelectTrigger>
<SelectValue placeholder="Select a module" />
</SelectTrigger>
<SelectContent>
{kits.map((module) => (
<SelectItem key={module.name} value={module.name}>
{module.name}
</SelectItem>
))}
</SelectContent>
</Select>
</div>


Collapse
    <div className="grid gap-2">
<Label className="text-sm font-medium text-gray-700">Module Name</Label>
<Input
        type="text"
        value={moduleName}
        onChange={(e) => setModuleName(e.target.value)}
        placeholder="Enter module name"
        className="bg-white/50"
      />
    </div>

    <div className="grid gap-2">
<Label className="text-sm font-medium text-gray-700">Module Path (Optional)</Label>
      <Input
        type="text"
        value={modulePath}
        onChange={handlePathChange}
        placeholder="e.g., segment1.segment2"
      />
      {pathError && (
        <span className="text-sm text-red-500">{pathError}</span>
      )}
    </div>

{selectedKit && (selectedKit.environment?.length > 0) && (
      <div className="grid gap-4">
        <h4 className="font-medium">Environment Variables</h4>
        {selectedKit.environment.map((env: any) => (
          <div key={env.name} className="grid gap-2">
            <Label>
              {env.name}
              {env.optional && ' (Optional)'}
            </Label>
            <Input
              type="text"
              value={envVars[env.name] || ''}
              onChange={(e) => setEnvVars(prev => ({
                ...prev,
                [env.name]: e.target.value
              }))}
              placeholder={env.default !== undefined ? String(env.default) : ''}
            />
          </div>
        ))}
      </div>
    )}
  </div>

  <DialogFooter>

<Button variant="outline" onClick={() => setIsDialogOpen(false)} className="bg-white hover:bg-gray-50">
      Cancel
    </Button>
    <Button 
      onClick={handleCreateConfirm}
      className="bg-gray-900 hover:bg-gray-700 text-white"
      disabled={
        !selectedKit || 
        !moduleName.trim() || 
        !!pathError
      }
    >
      Create
    </Button>
    </DialogFooter>

</DialogContent>
</Dialog>
{/* Rename Dialog */}

<Dialog open={isRenameDialogOpen} onOpenChange={setIsRenameDialogOpen}>
<DialogContent className="sm:max-w-[425px] bg-white/95 backdrop-blur-sm shadow-lg border-gray-200">
<DialogHeader className="space-y-1">
<DialogTitle className="text-xl">Rename Module</DialogTitle>
<DialogDescription className="text-gray-500">Enter a new name for your module.</DialogDescription>
</DialogHeader>
Collapse
<div className="grid gap-4 py-4">
<div className="grid gap-2">
<Label className="text-sm font-medium text-gray-700">New Name</Label>
<Input
type="text"
value={newModuleName}
onChange={(e) => setNewModuleName(e.target.value)}
placeholder="Enter new name"
/>
</div>
</div>


  <DialogFooter>
<Button variant="outline" onClick={() => setIsRenameDialogOpen(false)} className="bg-white hover:bg-gray-50">
      Cancel
    </Button>
    <Button 
      onClick={handleRenameConfirm}
      className="bg-gray-900 hover:bg-gray-700 text-white"
      disabled={!newModuleName.trim() || newModuleName === moduleToRename?.name}
    >
      Rename
    </Button>
    
</DialogFooter>

</DialogContent>
</Dialog>
{/* Settings Dialog */}
<Dialog open={isSettingsOpen} onOpenChange={setIsSettingsOpen}>
  <DialogContent className="sm:max-w-[500px] bg-white/95 backdrop-blur-sm shadow-lg border-gray-200">
    <DialogHeader>
      <DialogTitle className="text-xl">Model Settings</DialogTitle>
      <DialogDescription>Configure the language model for your assistant.</DialogDescription>
    </DialogHeader>

    <div className="space-y-6 py-4">
      <div>
        <h3 className="text-sm font-medium text-gray-900 mb-2">Current Model</h3>
        <div className="text-sm text-gray-500 bg-gray-50 p-2 rounded-md">
          {currentModel || 'No model selected'}
        </div>
      </div>

      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="provider" className="text-sm font-medium text-gray-700">Provider</Label>
          <Select
            onValueChange={setSelectedProvider}
            value={selectedProvider}
          >
            <SelectTrigger id="provider">
              <SelectValue placeholder="Select provider" />
            </SelectTrigger>
            <SelectContent>
              {Object.keys(availableModels).map((provider) => (
                <SelectItem key={provider} value={provider}>
                  <span className="capitalize">{provider}</span>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="model" className="text-sm font-medium text-gray-700">Model</Label>
          <Select
            value={selectedModel}
            onValueChange={setSelectedModel}
          >
            <SelectTrigger id="model">
              <SelectValue placeholder="Select model" />
            </SelectTrigger>
            <SelectContent>
              {availableModels[selectedProvider]?.map((model) => (
                <SelectItem key={model} value={model}>
                  {model}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>
    </div>

    <DialogFooter className="space-x-2">
      <Button variant="outline" onClick={() => {
        setIsSettingsOpen(false);
      }}>
        Cancel
      </Button>
      <Button 
        onClick={handleSaveModelSettings}
        disabled={!selectedModel}
        className="bg-gray-900 hover:bg-gray-700 text-white"
      >
        Save Changes
      </Button>
    </DialogFooter>
  </DialogContent>
</Dialog>

</> 
);
};

export default LeftSidebar;

================
File: studio/src/layout/MainContent.tsx
================
import React, { useState, useEffect, useRef } from 'react';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable"
import { Tree, NodeRendererProps } from 'react-arborist';
import CodeEditor from '../components/CodeEditor';
import { ChevronRight, ChevronDown, Box, RefreshCw, Code, Eye, Package, Expand, Minimize, Network } from 'lucide-react';
import RightSidebar from './RightSidebar';
import { Module } from '../components/TreeView';
import ReactMarkdown from 'react-markdown';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Info, AlertTriangle } from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Input } from "@/components/ui/input";
import { ENGINE_BASE_URL, fetchWithAuth } from '@/config';

interface TreeItem {
  id: string;
  name: string;
  children?: TreeItem[];
  isFolder?: boolean;
  content?: string;
  description?: string;
}

interface ApiResponse {
  path: string;
  name: string;
  content: string;
  description: string;
}

const RESOURCE_TYPES = ['documentation', 'specification', 'workspace', 'manifests'];

const buildTreeFromPaths = (items: ApiResponse[]): TreeItem[] => {
  const root: { [key: string]: TreeItem } = {};

  items.forEach(item => {
    const parts = item.path.split('/');
    let currentLevel = root;

    parts.forEach((part, index) => {
      const isLast = index === parts.length - 1;
      const id = parts.slice(0, index + 1).join('/');

      if (!currentLevel[id]) {
        currentLevel[id] = {
          id,
          name: part,
          isFolder: !isLast,
          children: isLast ? undefined : [],
          content: isLast ? item.content : undefined,
          description: isLast ? item.description : undefined
        };

        const parentId = parts.slice(0, index).join('/');
        if (index > 0 && root[parentId]) {
          root[parentId].children?.push(currentLevel[id]);
        }
      }

      currentLevel = currentLevel[id].children ? root : {};
    });
  });

  return Object.values(root).filter(item => !item.id.includes('/'));
};

const ContentViewer = ({ 
  content, 
  isMarkdown, 
  onChange,
  viewMode = 'code'
}: { 
  content: string; 
  isMarkdown: boolean; 
  onChange: (value: string) => void;
  viewMode: 'preview' | 'code';
  isExpanded?: boolean;
}) => {
  if (!isMarkdown) {
    return (
      <CodeEditor 
        value={content}
        onChange={onChange}
      />
    );
  }

  return viewMode === 'preview' ? (

    <div className=" flex flex-col overflow-auto">
         <ScrollArea className="flex-1 overflow-x-hidden">
      <div className="prose max-w-none p-4 ">
        <ReactMarkdown>{content}</ReactMarkdown>
      </div>
      </ScrollArea>
    </div>
  ) : (
    <CodeEditor 
      value={content}
      onChange={onChange}
    />
  );
};

const MainContent = ({selectedModule}:{selectedModule: Module | null}) => {
  const [resourceStateCache, setResourceStateCache] = useState<{ 
    [moduleId: string]: { 
      type: string, 
      selectedNodeId: string | null 
    } 
  }>({});
  
  const [selectedResourceType, setSelectedResourceType] = useState<string>(RESOURCE_TYPES[0]);
  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);
  const [treeData, setTreeData] = useState<TreeItem[]>([]);
  const [resourceData, setResourceData] = useState<ApiResponse[]>([]);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [viewMode, setViewMode] = useState<'preview' | 'code'>('code');
const [isExpanded, setIsExpanded] = useState(false);
  const [showRelations, setShowRelations] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [deleteConfirmText, setDeleteConfirmText] = useState('');
  const [envVarName, setEnvVarName] = useState('');
  const [envVarValue, setEnvVarValue] = useState('');
  const deleteInputRef = useRef<HTMLInputElement>(null);

  const handleEnvVarUpdate = async () => {
    if (!selectedModule || !envVarName || !envVarValue) return;
    
    try {
      const response = await fetchWithAuth(
        `${ENGINE_BASE_URL}/module/${selectedModule.module_id}/env`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            env_var_name: envVarName,
            env_var_value: envVarValue,
          }),
        }
      );
      
      if (response.ok) {
        const updatedModule = await response.json();
        // Update the module with new env vars
        selectedModule.env_vars = updatedModule.env_vars;
  
        setEnvVarName('');
        setEnvVarValue('');
      } else {
        console.error('Failed to update environment variable');
      }
    } catch (error) {
      console.error('Error updating environment variable:', error);
    }
  };

  useEffect(() => {
    if (selectedModule?.module_id) {
      const cachedState = resourceStateCache[selectedModule.module_id];
      if (cachedState) {
        setSelectedResourceType(cachedState.type);
        setSelectedNodeId(cachedState.selectedNodeId);
      } else {
        setSelectedResourceType(RESOURCE_TYPES[0]);
        setSelectedNodeId(null);
      }
    }
  }, [selectedModule?.module_id]);

  useEffect(() => {
    if (selectedModule?.module_id) {
      setResourceStateCache(prev => ({
        ...prev,
        [selectedModule.module_id]: {
          type: selectedResourceType,
          selectedNodeId
        }
      }));
    }
  }, [selectedModule?.module_id, selectedResourceType, selectedNodeId]);

  const fetchResources = async () => {
    if (!selectedModule) return;
    
    setIsLoading(true);
    try {
      const response = await fetchWithAuth(
        `${ENGINE_BASE_URL}/resource/${selectedModule.module_id}/${selectedResourceType}`
      );
      const data: ApiResponse[] = await response.json();
      setResourceData(data);
      const tree = buildTreeFromPaths(data);
      setTreeData(tree);
    } catch (error) {
      console.error('Error fetching resources:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchResources();
  }, [selectedModule, selectedResourceType]);

  const handleGenerateManifest = async () => {
    if (!selectedModule) return;
    
    try {
      await fetchWithAuth(
        `${ENGINE_BASE_URL}/resource/${selectedModule.module_id}/manifest`,
        { method: 'GET' }
      );
      await fetchResources();  // Refresh to get the newly generated manifest
    } catch (error) {
      console.error('Error generating manifest:', error);
    }
  };

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await fetchResources();
    setIsRefreshing(false);
  };

  const Node = React.forwardRef<HTMLDivElement, NodeRendererProps<TreeItem>>((props, ref) => {
    const { node, style } = props;
    const isSelected = node.id === selectedNodeId;
    
    const handleNodeClick = () => {
      if (node.isInternal) {
        node.toggle();
      }
      if (!node.data.isFolder) {
        setSelectedNodeId(node.id);
      }
    };
    
    return (
      <div 
        ref={ref}
        style={style}
        className={`flex items-center py-0.5 px-1 hover:bg-gray-100 ${
          isSelected ? 'bg-blue-50 hover:bg-blue-100' : ''
        }`}
        onClick={handleNodeClick}
      >
        <div className="flex items-center gap-1">
          {node.data.isFolder ? (
            <>
              {node.isOpen ? 
                <ChevronDown className="h-3 w-3 text-gray-400" /> : 
                <ChevronRight className="h-3 w-3 text-gray-400" />
              }
            </>
          ) : (
            <>
              <span className="w-3" />
              <Box className="h-3 w-3 text-gray-400" />
            </>
          )}
          <span className="text-sm">{node.data.name}</span>
          {isSelected && isLoading && (
            <RefreshCw className="h-3 w-3 text-gray-400 animate-spin ml-1" />
          )}
        </div>
      </div>
    );
  });

  Node.displayName = 'Node';

  const handleContentChange = (newValue: string) => {
    if (selectedNodeId) {
      setResourceData(prev => 
        prev.map(item => 
          item.path === selectedNodeId 
            ? { ...item, content: newValue }
            : item
        )
      );
    }
  };

  const isMarkdownFile = (path: string) => path.toLowerCase().endsWith('.md');

  if (!selectedModule) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="flex items-center justify-center h-full">
          <div className="text-center">
            <Package className="w-12 h-12 text-gray-400 mb-2 mx-auto" strokeWidth={1.5} />
            
            <h2 className="text-xl font-semibold text-gray-700 mb-2">No Module Selected</h2>
            <p className="text-gray-500">Select a module from the sidebar to explore its contents</p>
          
          </div>
        </div>
      </div>
    );
  }

  const containerClass = isExpanded && selectedNodeId 
    ? "fixed inset-4 bg-white rounded-lg shadow-2xl z-50 flex flex-col"
    : "h-full flex flex-col";

  return (
    <div className={containerClass}>
      {/* Header section */}
      <div className="flex h-12 items-center px-4 border-b justify-between">
        <div className="flex items-center space-x-6">
          <div className="flex items-center gap-3">
            <div className="font-medium text-base">
              {selectedModule.module_name}
            </div>
            <div className="text-xs bg-gray-100 text-gray-600 px-2 py-0.5 rounded">
              v{selectedModule.version}
            </div>
            <Dialog>
              <DialogTrigger asChild>
                <button className="p-1.5 hover:bg-gray-100 rounded-full">
                  <Info className="h-4 w-4 text-gray-600" />
                </button>
              </DialogTrigger>
              <DialogContent className="max-w-4xl max-h-[80vh]">
                <DialogHeader>
                  <DialogTitle>
                    <div className="flex items-center gap-3">
                      <span className="text-xl">{selectedModule.module_name}</span>
                      <span className="text-sm bg-blue-50 text-blue-600 px-2 py-0.5 rounded-full">
                        v{selectedModule.version}
                      </span>
                    </div>
                  </DialogTitle>
                </DialogHeader>
                <Tabs defaultValue="module" className="mt-4">
                  <TabsList className="grid w-full grid-cols-4">
                    <TabsTrigger value="module">Module Info</TabsTrigger>
                    <TabsTrigger value="kit">Kit Info</TabsTrigger>
                    <TabsTrigger value="env">Environment</TabsTrigger>
                    <TabsTrigger value="destroy" className="text-destructive">Destroy</TabsTrigger>
                  </TabsList>
                  <ScrollArea className="h-[500px] mt-4">
                  <div className="px-2">
                  <TabsContent value="module">
                  <div className="bg-gray-50 rounded-lg p-4 grid gap-4">
                    <div className="grid grid-cols-4 items-center gap-4">
                      <span className="font-medium text-gray-500">Version</span>
                      <span className="col-span-3">{selectedModule.version}</span>
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                      <span className="font-medium text-gray-500">Owner</span>
                      <span className="col-span-3">{selectedModule.owner}</span>
                    </div>
                    <div className="grid grid-cols-4 items-center gap-4">
                      <span className="font-medium text-gray-500">Created</span>
                      <span className="col-span-3">{new Date(selectedModule.created_at).toLocaleDateString()}</span>
                    </div>
                  </div>
                  </TabsContent>
                  <TabsContent value="kit">
                    <div className="space-y-4">
                      <div className="bg-gray-50 rounded-lg p-4 grid gap-4">
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-medium text-gray-500">Kit ID</span>
                          <span className="col-span-3">{selectedModule.kit_id}</span>
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-medium text-gray-500">Repository</span>
                          <span className="col-span-3">{selectedModule.repo_name}</span>
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                          <span className="font-medium text-gray-500">Path</span>
                          <span className="col-span-3 font-mono text-sm">{selectedModule.path}</span>
                        </div>
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="env" className="space-y-4">
                    {Object.entries(selectedModule.env_vars).length > 0 ? (
                      <div className="bg-gray-50 rounded-lg p-4">
                        <div className="font-mono text-sm grid gap-2">
                          {Object.entries(selectedModule.env_vars).map(([key, value]) => (
                            <div 
                              key={key} 
                              className="group grid grid-cols-[200px_1fr_auto] gap-2 items-baseline hover:bg-gray-100 p-1 rounded"
                            >
                              <span className="text-gray-500">{key}:</span>
                              {envVarName === key ? (
                                <div className="flex gap-2 items-baseline">
                                  <Input
                                    size={30}
                                    value={envVarValue}
                                    onChange={(e) => setEnvVarValue(e.target.value)}
                                    className="font-mono h-6 text-sm py-0"
                                  />
                                  <div className="flex gap-1">
                                    <Button 
                                      size="sm" 
                                      variant="outline"
                                      className="h-6 px-2"
                                      onClick={async () => {
                                        await handleEnvVarUpdate();
                                        setEnvVarName('');
                                        setEnvVarValue('');
                                      }}
                                    >
                                      Save
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="ghost"
                                      className="h-6 px-2"
                                      onClick={() => {
                                        setEnvVarName('');
                                        setEnvVarValue('');
                                      }}
                                    >
                                      Cancel
                                    </Button>
                                  </div>
                                </div>
                              ) : (
                                <>
                                  <span>{value}</span>
                                  <Button
                                    size="sm"
                                    variant="ghost"
                                    className="opacity-0 group-hover:opacity-100 h-6 px-2"
                                    onClick={() => {
                                      setEnvVarName(key);
                                      setEnvVarValue(value);
                                    }}
                                  >
                                    Edit
                                  </Button>
                                </>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-4 text-gray-500">
                        No environment variables configured
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent value="destroy" className="space-y-4">
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                      <h3 className="text-lg font-semibold text-red-600 mb-2">Danger Zone</h3>
                      <p className="text-sm text-gray-600 mb-4">
                        Force deleting a module is a destructive action that cannot be undone.
                      </p>
                      <Button
                        variant="destructive"
                        onClick={() => setShowDeleteDialog(true)}
                        className="w-full"
                      >
                        Force Delete Module
                      </Button>
                    </div>
                  </TabsContent>
                  </div>
                  </ScrollArea>
                </Tabs>
              </DialogContent>
            </Dialog>

            <AlertDialog 
              open={showDeleteDialog} 
              onOpenChange={setShowDeleteDialog}
              
            >
              <AlertDialogContent  className='bg-white'>
                <AlertDialogHeader>
                  <AlertDialogTitle className="flex items-center gap-2">
                    <AlertTriangle className="h-5 w-5 text-destructive" />
                    Force Delete Module
                  </AlertDialogTitle>
                  <AlertDialogDescription className="space-y-3">
                    <p className="font-semibold text-destructive">Warning: This action cannot be undone!</p>
                    <ul className="list-disc pl-4 space-y-1 text-sm">
                      <li>Module will be completely deleted from the system</li>
                      <li>All running agents will be terminated immediately</li>
                      <li>All workspace files will be permanently deleted</li>
                      <li>This action may affect system stability if module is critical</li>
                    </ul>
                    <p className="text-sm mt-4">
                      To confirm deletion, type "delete {selectedModule?.module_name}" below:
                    </p>
                    <Input
                      ref={deleteInputRef}
                      value={deleteConfirmText}
                      onChange={(e) => setDeleteConfirmText(e.target.value)}
                      className="mt-2"
                      placeholder={`delete ${selectedModule?.module_name}`}
                    />
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel onClick={() => {
                    setDeleteConfirmText('');
                    setShowDeleteDialog(false);
                  }}>
                    Cancel
                  </AlertDialogCancel>
                  <AlertDialogAction
                    disabled={deleteConfirmText !== `delete ${selectedModule?.module_name}`}
                    onClick={async () => {
                      if (!selectedModule) return;
                      
                      try {
                        await fetchWithAuth(
                          `${ENGINE_BASE_URL}/module/${selectedModule.module_id}`,
                          { method: 'DELETE' }
                        );
                        
                        

                        window.location.reload();

                      } catch (error) {
                        console.error('Error deleting module:', error);
                      }
                 
                    }}
                    className="bg-destructive hover:bg-destructive/90 bg-red-600"
                  >
                    Delete Module
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </div>
          <Select
            value={selectedResourceType}
            onValueChange={(value) => setSelectedResourceType(value)}
          >
            <SelectTrigger className="w-40">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {RESOURCE_TYPES.map((type) => (
                <SelectItem key={type} value={type}>
                  {type}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex items-center gap-2">
        
          {selectedNodeId && (
            <div className="flex space-x-1">
              {isMarkdownFile(selectedNodeId) && (
                <>
                  <Button
                    size="sm"
                    variant={viewMode === 'preview' ? 'secondary' : 'outline'}
                    onClick={() => setViewMode('preview')}
                    className="flex items-center gap-2 rounded-full border-0 shadow-none"
                  >
                    <Eye className="h-3 w-3" />
                  </Button>
                  <Button
                    size="sm"
                    variant={viewMode === 'code' ? 'secondary' : 'outline'}
                    onClick={() => setViewMode('code')}
                    className="flex items-center gap-2 rounded-full border-0 shadow-none"
                  >
                    <Code className="h-4 w-4" />
                  </Button>
                </>
              )}
              <Button
                size="sm"
                variant="outline"
                onClick={() => setIsExpanded(!isExpanded)}
                className="flex items-center gap-2 rounded-full border-0 shadow-none"
              >
                {isExpanded ? (
                  <Minimize className="h-3 w-3" />
                ) : (
                  <Expand className="h-3 w-3" />
                )}
              </Button>
            </div>
          )}
          <div className="flex items-center gap-2">
            {selectedResourceType === 'manifests' && (
              <Button
                variant="outline"
                size="sm"
                onClick={handleGenerateManifest}
                className="flex items-center gap-2"
              >
                Generate
              </Button>
            )}
            <button
              onClick={handleRefresh}
              className="p-2 hover:bg-slate-100 rounded-full"
              disabled={isRefreshing}
            >
              <RefreshCw className={`h-4 w-4 text-gray-600 ${isRefreshing ? 'animate-spin' : ''}`} />
            </button>
            <Button
            size="sm"
            variant={showRelations ? "secondary" : "outline"}
            onClick={() => setShowRelations(!showRelations)}
            className="flex items-center gap-2"
          >
            <Network className="h-4 w-4" />
            Relations
          </Button>
          </div>
        </div>
      </div>

      {/* Main content section */}
      <div className="flex-1">
        <div className="h-full border rounded">
          <ResizablePanelGroup direction="horizontal" className="h-full">
            <ResizablePanel defaultSize={20} minSize={15}>
              <div className="h-full border-r">
                <Tree<TreeItem>
                  data={treeData}
                  width="100%"
                  height={800}
                  indent={16}
                  rowHeight={24}
                  overscanCount={1}
                >
                  {Node}
                </Tree>
              </div>
            </ResizablePanel>
            <ResizableHandle withHandle />
            <ResizablePanel>
              <div className="h-full">
                {selectedNodeId ? (
                  isLoading ? (
                    <div className="p-4">
                      <div className="animate-pulse flex space-x-4">
                        <div className="flex-1 space-y-4 py-1">
                          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                          <div className="space-y-2">
                            <div className="h-4 bg-gray-200 rounded"></div>
                            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <ContentViewer 
                      key={`${selectedNodeId}-${viewMode}`}
                      content={resourceData.find(item => item.path === selectedNodeId)?.content || '// No content available'}
                      isMarkdown={isMarkdownFile(selectedNodeId)}
                      onChange={handleContentChange}
                      viewMode={viewMode}
                      isExpanded={isExpanded}
                    />
                  )
                ) : (
                  <div className="p-4 text-gray-500">
                    Select a file to view its content
                  </div>
                )}
              </div>
            </ResizablePanel>
            {showRelations && (
              <>
                <ResizableHandle withHandle />
                <ResizablePanel defaultSize={30} minSize={10}>
                  <RightSidebar selectedModule={selectedModule} />
                </ResizablePanel>
              </>
            )}
          </ResizablePanelGroup>
        </div>
      </div>
    </div>
  );
};

export default MainContent;

================
File: studio/src/layout/MarkdownText.tsx
================
import { makeMarkdownText } from "@assistant-ui/react-markdown";
import { cn } from "@/lib/utils";

export const MarkdownText = makeMarkdownText({
  components: {
    // Style code blocks
    code: ({ className, children, ...props }) => {
      const match = /language-(\w+)/.exec(className || '');
      return (
        <code
          className={cn(
            "relative rounded bg-background-secondary px-[0.3rem] py-[0.2rem] font-mono text-sm",
            match && "block p-4",
            className
          )}
          {...props}
        >
          {children}
        </code>
      );
    },
    // Style headings
    h1: ({ className, ...props }) => (
      <h1 className={cn("mt-6 scroll-m-20 text-2xl font-bold", className)} {...props} />
    ),
    h2: ({ className, ...props }) => (
      <h2 className={cn("mt-5 scroll-m-20 text-xl font-semibold", className)} {...props} />
    ),
    h3: ({ className, ...props }) => (
      <h3 className={cn("mt-4 scroll-m-20 text-lg font-semibold", className)} {...props} />
    ),
    // Style links
    a: ({ className, ...props }) => (
      <a className={cn("text-blue-400 hover:text-blue-300 underline", className)} {...props} />
    ),
    // Style lists
    ul: ({ className, ...props }) => (
      <ul className={cn("my-2 ml-6 list-disc", className)} {...props} />
    ),
    ol: ({ className, ...props }) => (
      <ol className={cn("my-2 ml-6 list-decimal", className)} {...props} />
    ),
    // Style blockquotes
    blockquote: ({ className, ...props }) => (
      <blockquote
        className={cn(
          "mt-4 border-l-2 border-gray-500 pl-4 italic text-gray-300",
          className
        )}
        {...props}
      />
    ),
  },
});

================
File: studio/src/layout/RightSidebar.tsx
================
import { Network } from 'lucide-react';
import { Module } from '../components/TreeView';
import { useEffect, useState } from "react";
import { useModuleRelationships } from "@/hooks/useModuleRelationships";
import { ModuleWithRelations, RelationshipTree, RelationshipType } from "@/components/RelationshipTree";


const RightSidebar: React.FC<{
  selectedModule?: Module | null;
}> = ({ selectedModule }) => {
  const [availableModules, setAvailableModules] = useState<Module[]>([]);
  
  const {
    context,
    connections,
    isLoading,
    fetchAll,
    createConnection,
    removeConnection,
    fetchAvailableModules
  } = useModuleRelationships(selectedModule?.module_id || '');

  useEffect(() => {
    if (selectedModule?.module_id) {
      fetchAll();
    }
  }, [fetchAll, selectedModule?.module_id]);

  useEffect(() => {
    const fetchAndSetAvailableModules = async () => {
      if (!selectedModule?.module_id) return;
      
      const modules = await fetchAvailableModules();
      if (modules) {
        const existingIds = new Set([
          selectedModule.module_id,
          ...context.map(m => m.module_id),
          ...connections.map(m => m.module_id)
        ]);
        
        const filtered = modules.filter((m: { id: string; }) => !existingIds.has(m.id));
        setAvailableModules(filtered);
      }
    };

    if (selectedModule?.module_id) {
      fetchAndSetAvailableModules();
    }
  }, [context, connections, fetchAvailableModules, selectedModule?.module_id]);

  const handleAddConnection = async (targetModule: Module, types: RelationshipType[]) => {
    if (!selectedModule?.module_id) return;
    
    for (const type of types) {
      await createConnection(targetModule.module_id, type);
    }
    
    const newAvailable = availableModules.filter(m => m.module_id !== targetModule.module_id);
    setAvailableModules(newAvailable);
  };

  const handleRemoveConnection = async (targetId: string, type: RelationshipType) => {
    if (!selectedModule?.module_id) return;
    await removeConnection(targetId, type);
  };

  const modulesWithRelations = Object.values(
    [...context, ...connections].reduce((acc, curr) => {
      if (!acc[curr.module_id]) {
        acc[curr.module_id] = {
          ...curr,
          relationTypes: []
        };
      }
      
      const isContext = context.some(m => m.module_id === curr.module_id);
      const isConnection = connections.some(m => m.module_id === curr.module_id);
      
      acc[curr.module_id].relationTypes = [
        ...(isContext ? ['context' as const] : []),
        ...(isConnection ? ['connection' as const] : [])
      ];
      
      return acc;
    }, {} as Record<string, ModuleWithRelations>)
  );

  if (!selectedModule?.module_id) {
    return (
      <div className="h-full flex">
        <div className="flex flex-col text-center justify-center gap-2 p-2 border-l bg-background">
        <div className="text-center justify-center">
            <Network className="w-12 h-12 text-gray-400 mb-2 mx-auto" strokeWidth={1.5} />
            
            <h2 className="text-xl font-semibold text-gray-700 mb-2">No Module Selected</h2>
            <p className="text-gray-500">Select a module from the sidebar to explore its contents</p>
          
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex border-l">
      <div className="flex-1">
        <RelationshipTree
          modules={modulesWithRelations}
          isLoading={isLoading}
          onAddRelation={handleAddConnection}
          onRemoveRelation={handleRemoveConnection}
          availableModules={availableModules}
          currentModuleId={selectedModule.module_id}
        />
      </div>
    </div>
  );
};

export default RightSidebar;

================
File: studio/src/layout/types.d.ts
================
declare module '*.svg' {
    import React from 'react';
    const SVG: React.FC<React.SVGProps<SVGSVGElement>>;
    export default SVG;
  }

================
File: studio/src/lib/tree.ts
================
import { TreeNode, Module } from '../components/TreeView';

export interface FolderNode {
  id: string;
  name: string;
  isFolder: true;
  children: (FolderNode | ModuleNode)[];
}

export interface ModuleNode {
  id: string;
  name: string;
  isFolder: false;
  module: Module;
}

export const DEFAULT_PROJECT_ID = "00000000-0000-0000-0000-000000000000";

export function buildTreeFromModules(modules: Module[]): TreeNode[] {
  const folderMap = new Map<string, TreeNode>();
  const rootNodes: TreeNode[] = [];

  // Sort modules so that shorter paths are processed first
  const sortedModules = [...modules].sort((a, b) => a.path.length - b.path.length);

  sortedModules.forEach(module => {
    const pathParts = module.path.split('.');
    let currentPath = '';

    // Create or get all necessary folder nodes
    for (let i = 0; i < pathParts.length; i++) {
      const part = pathParts[i];
      currentPath = currentPath ? `${currentPath}.${part}` : part;
      
      if (!folderMap.has(currentPath)) {
        const newNode: TreeNode = {
          id: `folder-${currentPath}`,
          name: part,
          isFolder: true,
          children: []
        };
        folderMap.set(currentPath, newNode);

        // Add to parent or root
        if (i === 0) {
          rootNodes.push(newNode);
        } else {
          const parentPath = pathParts.slice(0, i).join('.');
          const parentNode = folderMap.get(parentPath);
          if (parentNode && parentNode.children) {
            parentNode.children.push(newNode);
          }
        }
      }
    }

    // Create module node
    const moduleNode: TreeNode = {
      id: `module-${module.module_id}`,
      name: `${module.module_name} (${module.version})`,
      isFolder: false,
      module: module
    };

    // Add module node to its parent folder or root
    if (pathParts.length === 1) {
      rootNodes.push(moduleNode);
    } else {
      const parentFolder = folderMap.get(module.path);
      if (parentFolder && parentFolder.children) {
        parentFolder.children.push(moduleNode);
      }
    }
  });

  return rootNodes;
}

export function getParentPath(nodes: TreeNode[], nodeId: string): string {
  const parts: string[] = [];
  
  const findNode = (currentNodes: TreeNode[]): boolean => {
    for (const node of currentNodes) {
      if (node.id === nodeId) {
        return true;
      }
      
      if (node.children) {
        parts.push(node.name);
        if (findNode(node.children)) {
          return true;
        }
        parts.pop();
      }
    }
    return false;
  };

  findNode(nodes);
  return parts.join('.');
}

export function getNewPath(
  tree: TreeNode[], 
  dragId: string, 
  targetParentId: string | null, 
  targetIndex: number
): string {
  if (targetParentId === null) {
    return 'root';
  }

  console.log('getNewPath', dragId, targetParentId, targetIndex);

  const parentNode = findNodeById(tree, targetParentId);
  if (!parentNode || !parentNode.isFolder) {
    return 'root';
  }

  const parentPath = getParentPath(tree, targetParentId);
  if (!parentPath) {
    return parentNode.name;
  }

  return `${parentPath}.${parentNode.name}`;
}

export function findNodeById(nodes: TreeNode[], id: string): TreeNode | null {
  for (const node of nodes) {
    if (node.id === id) return node;
    if (node.children) {
      const found = findNodeById(node.children, id);
      if (found) return found;
    }
  }
  return null;
}

export function buildPathString(node: TreeNode, tree: TreeNode[]): string {
  const parts: string[] = [];
  
  const findNodePath = (nodes: TreeNode[], targetId: string): boolean => {
    for (const n of nodes) {
      if (n.id === targetId) {
        parts.unshift(n.name);
        return true;
      }
      if (n.children && findNodePath(n.children, targetId)) {
        parts.unshift(n.name);
        return true;
      }
    }
    return false;
  };

  findNodePath(tree, node.id);
  return parts.join('.');
}

================
File: studio/src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: studio/src/stores/chatPromptStore.ts
================
import { create } from 'zustand'

interface ChatPromptState {
  inputValue: string
  activePromptIndex: number
  setInputValue: (value: string) => void
  setActivePromptIndex: (index: number) => void
}

export const useChatPromptStore = create<ChatPromptState>((set) => ({
  inputValue: '',
  activePromptIndex: -1,
  setInputValue: (value) => set({ inputValue: value }),
  setActivePromptIndex: (index) => set({ activePromptIndex: index }),
}))

================
File: studio/src/stores/chatStore.ts
================
// stores/chatStore.ts
import { create } from 'zustand';
import { Message } from '@/components/Chat';
import { ENGINE_BASE_URL, fetchWithAuth } from '@/config';

interface ChatState {
  messages: Message[];
  isLoading: boolean;
  error: string | null;  // Added error state
  currentModuleId: string | null;
  currentWorkflow: string | null;
  currentSession: string | null;
  setCurrentContext: (moduleId: string, workflow: string, sessionId: string) => void;
  sendResponse: (id: string, value: string) => Promise<void>;
  sendMessage: (text: string) => Promise<void>;  // New function
  refreshChat: () => Promise<void>;
}

export const useChatStore = create<ChatState>((set, get) => ({
  messages: [],
  isLoading: false,
  error: null,
  currentModuleId: null,
  currentWorkflow: null,
  currentSession: null,

  setCurrentContext: (moduleId, workflow, sessionId) => {
    set({ currentModuleId: moduleId, currentWorkflow: workflow, currentSession: sessionId });
  },

  sendMessage: async (text: string) => {
    const { currentModuleId, currentWorkflow, currentSession } = get();
    if (!currentModuleId || !currentWorkflow) {
      set({ error: 'No active context' });
      return;
    }

    set({ isLoading: true, error: null });
    try {
      const url = new URL(`${ENGINE_BASE_URL}/chat/${currentModuleId}/execute`);
      const response = await fetchWithAuth(url.toString(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          section: currentWorkflow,
          input: text,
          session_id: currentSession
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Failed to send message');
      }

      // Refresh chat after sending message
      await get().refreshChat();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to send message';
      set({ error: errorMessage });
      console.error('Error sending message:', error);
    } finally {
      set({ isLoading: false });
    }
  },

  sendResponse: async (id: string, value: string) => {
    const { currentModuleId, currentWorkflow, currentSession } = get();
    if (!currentModuleId || !currentWorkflow) {
      set({ error: 'No active context' });
      return;
    }

    set({ isLoading: true, error: null });
    try {
      const response = `<giml><responses><response id="${id}" value="${value}"/></responses></giml>`;
      
      const url = new URL(`${ENGINE_BASE_URL}/chat/${currentModuleId}/execute`);
      const result = await fetchWithAuth(url.toString(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          section: currentWorkflow,
          input: response,
          session_id: currentSession
        })
      });

      if (!result.ok) {
        const errorData = await result.json();
        throw new Error(errorData.detail || 'Failed to send response');
      }

      // Refresh chat after sending response
      await get().refreshChat();
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to send response';
      set({ error: errorMessage });
      console.error('Error sending response:', error);
    } finally {
      set({ isLoading: false });
    }
  },

  refreshChat: async () => {
    const { currentModuleId, currentWorkflow, currentSession } = get();
    if (!currentModuleId || !currentWorkflow || !currentSession) {
      set({ error: 'No active context' });
      return;
    }

    try {
      const url = new URL(`${ENGINE_BASE_URL}/chat/${currentModuleId}/workflow/${currentWorkflow}/history`);
      url.searchParams.append('session_id', currentSession);
      
      const response = await fetchWithAuth(url.toString());
      if (!response.ok) {
        throw new Error('Failed to fetch chat history');
      }

      const data = await response.json();
      set({ messages: data.history || [] });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to refresh chat';
      set({ error: errorMessage });
      console.error('Error refreshing chat:', error);
    }
  }
}));

================
File: studio/src/types/types.ts
================
export interface TreeItem {
    index: string;
    isFolder?: boolean;
    children: string[];
    data: string;
  }
  
  export interface TreeItems {
    [key: string]: TreeItem;
  }
  
  export type TabType = 'code' | 'human explanation' | 'specification' | 'data views' | 'access' | 'custom';
  export type RightTabType = 'dependencies' | 'dependants' | 'context';

================
File: studio/src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: studio/src/App.tsx
================
import { useState } from 'react';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,

} from "@/components/ui/resizable";
import 'react-complex-tree/lib/style-modern.css';
import LeftSidebar from './layout/LeftSidebar';
import MainContent from './layout/MainContent';
import BottomPanel from './layout/BottomPanel';
import { useModuleStore } from './store';
import { GripHorizontal } from 'lucide-react';
import { ThemeProvider } from './components/themeProvider';

const ProjectInterface = () => {
  const [sidebarExpand, setSidebarExpand] = useState(true);
  const selectedModule = useModuleStore(state => state.selectedModule);

  
  const changeLeftSidebarSize = (expand: boolean) => {
    console.log(expand);
    setSidebarExpand(expand);
  };


  


  return (
    <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
    <div className="h-screen flex flex-col bg-background">

      
      <ResizablePanelGroup direction="horizontal" className="flex-1">
      
         <ResizablePanel   minSize={sidebarExpand? 20:4} maxSize={sidebarExpand? 20:4} >
          <LeftSidebar onExpand={changeLeftSidebarSize} expanded={sidebarExpand} />
          </ResizablePanel>
      
        <ResizableHandle />
        <ResizablePanel>
          <ResizablePanelGroup direction="vertical">
            <ResizablePanel defaultSize={75}>
              <MainContent selectedModule={selectedModule} />
            </ResizablePanel>
            <ResizableHandle withHandle>
              <div className="flex h-full w-full items-center justify-center">
                <GripHorizontal className="h-3 w-3 text-gray-400" />
              </div>
            </ResizableHandle>
            <ResizablePanel defaultSize={35} minSize={10} maxSize={95}>
              <BottomPanel selectedModule={selectedModule} />
            </ResizablePanel>
          </ResizablePanelGroup>
        </ResizablePanel>
      </ResizablePanelGroup>
    
    </div>
   </ThemeProvider>
  );
};

export default ProjectInterface;

================
File: studio/src/config.ts
================
const DEFAULT_ENGINE_URL = import.meta.env.VITE_ENGINE_URL;

// Get stored engine URL or use default
export const ENGINE_BASE_URL = localStorage.getItem('engine_url') || DEFAULT_ENGINE_URL;

// Save engine URL to localStorage
export const setEngineUrl = (url: string) => {
  localStorage.setItem('engine_url', url);
  window.location.reload(); // Reload to apply new URL
};

// Get stored credentials
export const getAuthCredentials = () => {
  const stored = localStorage.getItem('auth_credentials');
  if (stored) {
    try {
      return JSON.parse(stored);
    } catch {
      return { username: '', password: '' };
    }
  }
  return { username: '', password: '' };
};

// Save credentials to localStorage
export const setAuthCredentials = (username: string, password: string) => {
  localStorage.setItem('auth_credentials', JSON.stringify({ username, password }));
};

type FetchOptions = RequestInit & {
  skipAuth?: boolean;
};

export const fetchWithAuth = async (url: string, options: FetchOptions = {}) => {
  const { skipAuth = false, ...fetchOptions } = options;

  if (!skipAuth) {
    const credentials = getAuthCredentials();
    const authHeader = btoa(`${credentials.username}:${credentials.password}`);
    fetchOptions.headers = {
      ...fetchOptions.headers,
      'Authorization': `Basic ${authHeader}`,
    };
  }

  const response = await fetch(url, fetchOptions);

  if (!response.ok) {
    const error = await response.json().catch(() => ({ detail: 'An error occurred' }));
    throw new Error(error.detail || 'Request failed');
  }

  return response;
};

================
File: studio/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --radius: 0.5rem
  ;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%}
  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%
  }
}

================
File: studio/src/main.tsx
================
import { StrictMode, useState, useEffect } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'
import { ThemeProvider } from "@/components/themeProvider"
import { AuthPage } from '@/components/AuthPage'
import { getAuthCredentials } from './config.ts'

function Root() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const credentials = getAuthCredentials();
    setIsAuthenticated(!!credentials.username && !!credentials.password);
  }, []);

  if (!isAuthenticated) {
    return (
      <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
        <AuthPage onAuthSuccess={() => setIsAuthenticated(true)} />
      </ThemeProvider>
    );
  }

  return (
    <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
      <App />
    </ThemeProvider>
  );
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <Root />
  </StrictMode>,
);

================
File: studio/src/store.ts
================
import { create } from 'zustand';
import { Module } from './components/TreeView';

interface ModuleState {
  selectedModuleId: string | null;
  selectedModule: Module | null;
  setSelectedModule: (module: Module | null) => void;
}

export const useModuleStore = create<ModuleState>((set) => ({
  selectedModuleId: null,
  selectedModule: null,
  setSelectedModule: (module) => {
    console.log('Setting selected module:', module);
    set({ 
      selectedModuleId: module?.module_id || null,
      selectedModule: module 
    })},
}));

================
File: studio/src/vite-env.d.ts
================
/// <reference types="vite/client" />
/// <reference types="vite-plugin-svgr/client" />

================
File: studio/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: studio/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "gray",
    "cssVariables": false,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: studio/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: studio/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Genbase</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: studio/package.json
================
{
  "name": "genbase-studio",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@assistant-ui/react": "^0.7.28",
    "@assistant-ui/react-markdown": "^0.7.7",
    "@git-diff-view/react": "^0.0.25",
    "@hookform/resolvers": "^3.10.0",
    "@monaco-editor/react": "^4.6.0",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.4",
    "@radix-ui/react-dialog": "^1.1.5",
    "@radix-ui/react-dropdown-menu": "^2.1.5",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-tooltip": "^1.1.7",
    "allotment": "^1.20.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.469.0",
    "markdown-to-jsx": "^7.7.3",
    "react": "^18.3.1",
    "react-arborist": "^3.4.0",
    "react-complex-tree": "^2.4.6",
    "react-diff-viewer-continued": "^3.4.0",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "react-json-view": "^1.21.3",
    "react-markdown": "^9.0.3",
    "react-resizable-panels": "^2.1.7",
    "react-syntax-highlighter": "^15.6.1",
    "rehype-raw": "^7.0.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.0.5",
    "vite-plugin-svgr": "^4.3.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.10.5",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

================
File: studio/postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: studio/README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: studio/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			sm: '1px',
  			DEFAULT: '1px',
  			md: '4px',
  			lg: '6px',
  			xl: '8px',
  			'2xl': '10px'
  		},
  		fontSize: {
  			code: '13px',
  			ui: '13px'
  		},
  		spacing: {
  			tree: '0.5rem'
  		},
  		opacity: {
  			dim: '0.8'
  		},
  		colors: {
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate"),    require('@tailwindcss/typography')  ]
}

================
File: studio/tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }



    
  },
  "include": ["src"]
}

================
File: studio/tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false
  }
  
}

================
File: studio/tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: studio/vite.config.ts
================
import path from "path"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"
import svgr from 'vite-plugin-svgr' 

export default defineConfig({
  plugins: [react(),
    svgr({ 
      svgrOptions: {},
    }),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})

================
File: .gitignore
================
.data
.env
.venv
node_modules
.venvs
.venvstest
.working
.ruff_cache/
.test-kits/
# Python cache files
__pycache__/
*.py[cod]
*$py.class
registry/.next/
.pytest_cache
# Node
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
engine/.pdm-python
engine/*.log

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel

# yalc
.yalc
yalc.lock

================
File: README.md
================
{
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/*.pyo": true,
        "**/*.pyd": true,
        ".Python": true
    }
}



================================================================
End of Codebase
================================================================
